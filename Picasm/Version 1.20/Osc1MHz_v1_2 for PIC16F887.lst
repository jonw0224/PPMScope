MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: An oscilloscope program based on the PIC16F877 and the MAX118
                      00005 ;*Version: 1.200
                      00006 ;*Date: 6/28/2011
                      00007 ;*Filename: osc.asm
                      00008 ;
                      00009 ;Versions:  1.000 - 3/29/2003
                      00010 ;           1.000 - 7/26/2004
                      00011 ;           1.000 - 4/2/2005
                      00012 ;           1.000 - 9/29/2005 -- Additional Header comments and license added
                      00013 ;           1.101 - 11/3/2005 -- Began to modify for use on PIC16F877
                      00014 ;                       1.102 - 3/28/2006 -- Made trigger interrupt based, expanded sampling
                      00015 ;                               to 256 samples across modes
                      00016 ;                       1.102 - 4/12/2006 -- Finished expanding sampling to 256 samples.
                      00017 ;                               Still need to test communication, sampleDelayed and sampleXY
                      00018 ;                               modes.
                      00019 ;                       1.103 - 4/29/2007 -- Fixed interlaced sampling, modified so sample
                      00020 ;                               data configuration and trigger level are measured after the
                      00021 ;                               data buffer if filled instead of at communication.
                      00022 ;                       1.104 - 6/27/2007 -- Added faster XY sampling modes
                      00023 ;                       1.105 - 7/18/2007 -- Added repetitive sampling and wait for trigger
                      00024 ;                               in WaitComm so the scope will respond to the PC
                      00025 ;                       1.106 - 3/1/2009 -- changed the trigger back to not respond to PC
                      00026 ;                       1.107 - 3/1/2009 -- Changed the trigger code to shorten the 
                      00027 ;                               trigger delay. - NEED TO TEST  
                      00028 ;                               Made scope responsive to trigger change message. - NEED TO TEST
                      00029 ;                               Removed the use of the slave parallel port. - NEED TO TEST
                      00030 ;                               Combined SampleXY250 and SampleXY192. - NEED TO TEST - tested 3/5/2009
                      00031 ;                       1.108 - 3/9/2009 -- changed trigger code to broaden range of trigger
                      00032 ;                               delay - NEED TO TEST
                      00033 ;                       1.109 - 10/28/2009 -- tested and fixed bug with trigger code
                      00034 ;                       1.110 - 5/12/2010 -- Added serial port support to code.  NEED TO TEST
                      00035 ;                       1.111 - 2/1/2011 -- fixed a bug with the trigger code (another one)
                      00036 ;                       1.200 - 6/28/2011 - Modified code to handle conditional compile for hardware ver
                            sion 1.0 or hardware version 1.2
                      00037 ;                       1.200 - 8/15/2012 - Added portability for PIC16F887
                      00038 
                      00039 ;Copyright (C) 2003-2011 Jonathan Weaver
                      00040 ;
                      00041 ; This file is part of PPMScope.
                      00042 ;
                      00043 ; PPMScope is free software: you can redistribute it and/or modify
                      00044 ; it under the terms of the GNU General Public License as published by
                      00045 ; the Free Software Foundation, either version 3 of the License, or
                      00046 ; (at your option) any later version.
                      00047 ;
                      00048 ; This program is distributed in the hope that it will be useful,
                      00049 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00050 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00051 ; GNU General Public License for more details.
                      00052 ;
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053 ; You should have received a copy of the GNU General Public License
                      00054 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                      00055 ;
                      00056 ;==============================================================================
                      00057 
                      00058 ;=============================================================================
                      00059 ; C O N F I G U R A T I O N
                      00060 ;=============================================================================
                      00061 
  00000887            00062 PIC     equ 0x887
                      00063 ;PIC equ 0x877
                      00064 
Warning[205]: Found directive in column 1. (if)
                      00065 if PIC == 0x887
                      00066 ;=============================================================================
                      00067 ; Contributed by Paul Messer
                      00068 ;=============================================================================
                      00069     list p=16F887
                      00070         errorlevel      -302, -205, -207                ;Suppress bank selection messages
                      00071 
                      00072 ;*****************************************************
                      00073 ;       === Configuration Word Definitions ===
                      00074 ;*****************************************************
                      00075 ; Defines for PIC16F887 operation
                      00076 
                      00077 ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00078 ; The labels following the directive are located in the respective .inc file.
                      00079 ; See respective data sheet for additional information on configuration word.
                      00080 
2007   20F2           00081         __CONFIG _CONFIG1, _DEBUG_OFF & _LVP_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_OFF & _CPD_OFF & _CP_OF
                            F & _MCLRE_ON & _PWRTE_OFF & _WDT_OFF & _HS_OSC
2008   3FFF           00082         __CONFIG _CONFIG2, _WRT_OFF & _BOR40V
                      00083 
                      00084 ; '__idlocs' sets the four ID locations to the hexadecimal value of expression.
                      00085 ; These are not readable by the cpu, but can be read by the programning hardware.
                      00086 
2000   0001 0002 0003 00087         __idlocs        0x1234
       0004 
                      00088 
  00000020            00089         clockFreq = 20                                  ;20 = 20 MHZ, 4 = 4 MHZ
                      00090         
                      00091 else
                      00092     list p=16F877a
                      00093       errorlevel      -302, -205, -207   ;Suppress bank selection messages
                      00094     __config  _WDT_OFF & _HS_OSC & _LVP_OFF
                      00095     clockFreq = 20      ;20 = 20 MHZ, 4 = 4 MHZ
                      00096 endif
                      00097 
                      00098 
                      00099 ;=============================================================================
                      00100 ; C O N S T A N T S
                      00101 ;=============================================================================
                      00102 
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000012            00103 HARDWARE equ 0x12
                      00104 
  00000020            00105 BUFFERMIN equ 0x20      ;Memory restrictions for the buffer
  00000040            00106 BUFFERSIZE equ D'64'    ;Number of data points to store.  In single channel
                      00107                         ;mode, all data points are for one channel, in XY mode
                      00108                         ;the data points alternate between channel 1 and
                      00109                         ;channel 2
  0000005F            00110 BUFFERMAX equ BUFFERMIN+BUFFERSIZE-1
  00000100            00111 TOTALBUFFERSIZE equ BUFFERSIZE*4
                      00112 
                      00113 ;I/O Pin maps
                      00114 ;-----------------------------------------------------------------------------
                      00115 if HARDWARE == 0x10
                      00116         SPPORT set PORTC
                      00117         SP equ 0x05
                      00118 
                      00119         I2CPORT set PORTC
                      00120         SDA equ 0x04            ;Pin map for the I2CPORT
                      00121         CLK equ 0x03
                      00122 
                      00123         ADC_CONTROLPORT set PORTB
                      00124         ADC_PORT set PORTB
                      00125         RDD equ 0x02            ;Pin map for the ADC
                      00126 
                      00127         TRIGGERPORT set PORTB
                      00128         TRIGGER equ 0x00
                      00129 
                      00130         SERIALPORT set PORTC
                      00131         RX equ 0x07
                      00132         TX equ 0x06
                      00133 
                      00134         ADDR2 equ 0x05          ;ADDR2 and ADDR1 not used in this program (later use)
                      00135         ADDR1 equ 0x04
                      00136         ADDR0 equ 0x03          ;Least significant bit of the ADC channel address
                      00137         CS equ 0x01
                      00138 
                      00139         ADC_DATAPORT set PORTD
                      00140 
                      00141         ANALOG_SEL set PORTC
                      00142         CH1SEL equ 0x01
                      00143         CH2SEL equ 0x02
                      00144         
                      00145         ANALOG_GAIN set PORTA
                      00146         GAIN1 equ 0x00
                      00147         GAIN2 equ 0x01
                      00148         CH1SELG equ 0x04
                      00149         CH2SELG equ 0x05
                      00150 
                      00151         ANALOG_ACDC set PORTC
                      00152         ACDCMODE equ 0x00
                      00153 
                      00154 else
  00000005            00155         SPPORT set PORTA
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000002            00156         SP equ 0x02
                      00157         ;SPPORT set PORTB
                      00158         ;SP equ 0x05
                      00159 
  00000007            00160         SERIALPORT set PORTC
  00000007            00161         RX equ 0x07
  00000006            00162         TX equ 0x06
                      00163 
  00000009            00164         ADC_CONTROLPORT set PORTE
  00000000            00165         RDD equ 0x00
  00000001            00166         ADDR0 equ 0x01
                      00167 
  00000006            00168         TRIGGERPORT set PORTB
  00000000            00169         TRIGGER equ 0x00
                      00170 
  00000006            00171         I2CPORT set PORTB
  00000004            00172         SDA equ 0x04
  00000005            00173         CLK equ 0x05
                      00174 
  00000006            00175         ADC_PORT set PORTB
  00000003            00176         ADDR2 equ 0x03          
  00000002            00177         ADDR1 equ 0x02
  00000001            00178         CS equ 0x01
                      00179 
  00000008            00180         ADC_DATAPORT set PORTD
                      00181 
  00000007            00182         ANALOG_SEL set PORTC
  00000001            00183         CH1SEL equ 0x01
  00000002            00184         CH2SEL equ 0x02
                      00185 
  00000005            00186         ANALOG_GAIN set PORTA
  00000000            00187         GAIN1 equ 0x00
  00000001            00188         GAIN5 equ 0x01
  00000004            00189         CH1SELG equ 0x04
  00000005            00190         CH2SELG equ 0x05
                      00191 
  00000007            00192         ANALOG_ACDC set PORTC
  00000000            00193         ACDCMODE equ 0x00
                      00194 
                      00195 endif
                      00196 
                      00197 ;Configuration memory map
                      00198 ;-----------------------------------------------------------------------------
                      00199 ;Bit map for configLoc1
  00000007            00200 TRIGGERPOSBIT equ 0x07  ;1 is positive slope trigger, 0 is negative slope
  00000006            00201 TRIGGERENBIT equ 0x06   ;1 is trigger enabled, 0 is no trigger
  00000005            00202 CLOCKFREQBIT equ 0x05   ;1 is 20 MHz, 0 is 4 MHz
  00000004            00203 CHANNELBIT equ 0x04     ;1 is channel 2, 0 is channel 1
  00000003            00204 FREQMODEBIT3 equ 0x03   ;Reserve the bits in CONFIGLOC1 for the frequency modes
  00000002            00205 FREQMODEBIT2 equ 0x02
  00000001            00206 FREQMODEBIT1 equ 0x01
  00000000            00207 FREQMODEBIT0 equ 0x00
                      00208 
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000000            00209 FREQSAMPLE1M equ D'0'   ;Table of frequency modes, 0 to 15
  00000001            00210 FREQSAMPLE833K equ D'1'
  00000002            00211 FREQSAMPLE625K equ D'2'
  00000003            00212 FREQSAMPLE417K equ D'3'
  00000004            00213 FREQSAMPLE250K equ D'4'
  00000005            00214 FREQSAMPLEDELAYED equ D'5'
  00000006            00215 FREQSAMPLEREP5M equ D'6'        ;Ensure trigger is enabled
  00000007            00216 FREQSAMPLEREP2M equ D'7'        ;Ensure trigger is enabled
  00000008            00217 FREQSAMPLEXY417K equ D'8'
  00000009            00218 FREQSAMPLEXY250K equ D'9'
  0000000A            00219 FREQSAMPLEXY192K equ D'10'
  0000000B            00220 FREQSAMPLEXYDELAYED equ D'11'
                      00221 
                      00222 ;=============================================================================
                      00223 ; V A R I A B L E S
                      00224 ;=============================================================================
                      00225 
                      00226 CBLOCK  0x70                    ;Shared General Purpose Registers, accessible anywhere
  00000070            00227     configLoc1          ;Configuration mode
  00000071            00228     triggerDelay1       ;trigger delay (3 bytes)
  00000072            00229     triggerDelay2
  00000073            00230         triggerDelay3
  00000074            00231     sampleRate1         ;sample rate delay (2 bytes)
  00000075            00232     sampleRate2
  00000076            00233     cntra               ;general use counter
  00000077            00234     cntrb               ;second counter
  00000078            00235     cntrc               ;third counter
  00000079            00236     modetemp                    ;temporary mode variable
  0000007A            00237     modetempb                   ;temporary mode for repetitive sampling
  0000007B            00238     cntr                                ;counter variable for i2cs
  0000007C            00239         i2csdata                        ;data for i2cs
  0000007D            00240         dataConfig                      ;the data configuration
  0000007E            00241         triggerLevel            ;the trigger level
                      00242 ENDC
                      00243 
                      00244 ;=============================================================================
                      00245 ; M A C R O S
                      00246 ;=============================================================================
                      00247 
                      00248 if PIC == 0x887
                      00249         include "p16f887.inc"
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ;  MPASM PIC16F887 processor include
                      00005 ; 
                      00006 ;  (c) Copyright 1999-2013 Microchip Technology, All rights reserved
                      00007 ;==========================================================================
                      00008 
                      00809         LIST
                      00250 else
                      00251     include "p16F877a.inc"
                      00252 endif
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00253     include "equality.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: A set of equality testing macros.  Assumes all registers and literals are signed bytes.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 7/10/2003
                      00007 ;*Filename: equality.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 -- Code finished.  Added comments.
                      00010 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00011 ;
                      00012 ;Copyright (C) 2005 Jonathan Weaver
                      00013 ;
                      00014 ;This program is free software; you can redistribute it and/or modify it under 
                      00015 ;the terms of the GNU General Public License as published by the Free Software 
                      00016 ;Foundation; either version 2 of the License, or (at your option) any later 
                      00017 ;version.
                      00018 ;
                      00019 ;This program is distributed in the hope that it will be useful, but WITHOUT 
                      00020 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00021 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
                      00022 ;details.
                      00023 ;
                      00024 ;You should have received a copy of the GNU General Public License along with 
                      00025 ;this program; if not, write to the Free Software Foundation, Inc., 
                      00026 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00027 ;
                      00028 ;==============================================================================
                      00029 
                      00030 ;================================================================================
                      00031 ; M A C R O S
                      00032 ;================================================================================
                      00033 
                      00034 ;*This macro skips the next line if regA is equal to regB
                      00035 skipEqFF macro regA,regB ;public
                      00036         movf regA, w
                      00037         xorwf regB, w
                      00038         btfss STATUS, Z
                      00039 endm
                      00040 
                      00041 ;*This macro skips the next line if regA is greater than or equal to regB
                      00042 skipGrEqFF macro regA, regB ;public
                      00043         movf regB, w
                      00044         subwf regA, w
                      00045         andlw B'10000000'
                      00046         btfss STATUS, Z
                      00047 endm
                      00048 
                      00049 ;*This macro skips the next line if regA is greater than regB
                      00050 skipGrFF macro regA, regB ;public
                      00051         movf regA, w
                      00052         subwf regB, w
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053         andlw B'10000000'
                      00054         btfsc STATUS, Z
                      00055 endm
                      00056 
                      00057 ;*This macro skips the next line if the literal is equal to regB
                      00058 skipEqLF macro lit, regB ;public
                      00059         movf regB, w
                      00060         xorlw lit
                      00061         btfss STATUS, Z
                      00062 endm
                      00063 
                      00064 ;*This macro skips the next line if the literal is greater than or equal to regB
                      00065 skipGrEqLF macro lit, regB ;public
                      00066         movf regB, w
                      00067         sublw lit
                      00068         andlw B'10000000'
                      00069         btfss STATUS, Z
                      00070 endm
                      00071 
                      00072 ;*This macro skips the next line if the literal is greater than regB
                      00073 skipGrLF macro lit, regB ;public
                      00074         movlw lit
                      00075         subwf regB, w
                      00076         andlw B'10000000'
                      00077         btfsc STATUS, Z
                      00078 endm
                      00079 
                      00080 ;*This macro skips the next line if the regA is greater than or equal to the literal
                      00081 skipGrEqFL macro regA, lit ;public
                      00082         movlw lit
                      00083         subwf regA, w
                      00084         andlw B'10000000'
                      00085         btfss STATUS, Z
                      00086 endm
                      00087 
                      00088 ;*This macro skips the next line if the regA is greater than the literal
                      00089 skipGrFL macro regA, lit ;public
                      00090         movf regA, w
                      00091         sublw regB
                      00092         andlw B'10000000'
                      00093         btfsc STATUS, Z
                      00094 endm
                      00095 
                      00096 ;*This macro skips the next line if the result of the previous line is zero
                      00097 skipZero macro ;public
                      00098         btfss STATUS, Z
                      00099 endm
                      00100 
                      00101 ;*This macro skips the next line if the result of the previous line is not zero
                      00102 skipNotZero macro ;public
                      00103         btfsc STATUS, Z
                      00104 endm
                      00105 
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00106 ;*This macro skips the next line if the result of the previous line is less than zero
                      00107 skipLessZero macro ;public
                      00108         andlw B'10000000'
                      00109         btfsc STATUS, Z
                      00110 endm
                      00111 
                      00112 ;*This macro skips the next line if the result of the previous line is more than or equal to zero
                      00113 skipMoreEqZero macro ;public
                      00114         andlw B'10000000'
                      00115         btfss STATUS, Z
                      00116 endm
                      00117 
                      00118 ;*This macro skips the next line if the result of the previous line is less than or equal to zero
                      00119 skipLessEqZero macro ;public
                      00120         addlw B'01111111'
                      00121         andlw B'10000000'
                      00122         btfss STATUS, Z
                      00123 endm
                      00124 
                      00125 ;*This macro skips the next line if the result of the previous line is more than zero
                      00126 skipMoreZero macro ;public
                      00127         addlw B'01111111'
                      00128         andlw B'10000000'
                      00129         btfsc STATUS, Z
                      00130 endm
                      00254     include "banks.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Banking macro.  A replacement for the banksel command.  Uses minimal bit set/clear comma
                            nds to set desired bank.
                      00005 ;*Version: 2.0
                      00006 ;*Date: 11/9/2005
                      00007 ;*Filename:  banks.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 - Created Unit
                      00010 ;                       1.0 - 9/29/2005 - Added comments and license
                      00011 ;                       2.0 - 11/9/2005 - Complete change in file, generalized for
                      00012 ;                                                         different processor banking, selects bank base
                            d
                      00013 ;                                                         on label passed to BNKSEL function.
                      00014 ;                                                         Removed BANK0 and BANK1 macros (for flexibilit
                            y)
                      00015 ;
                      00016 ;Copyright (C) 2005 Jonathan Weaver
                      00017 ;
                      00018 ;This program is free software; you can redistribute it and/or modify it under
                      00019 ;the terms of the GNU General Public License as published by the Free Software
                      00020 ;Foundation; either version 2 of the License, or (at your option) any later
                      00021 ;version.
                      00022 ;
                      00023 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00024 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00025 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00026 ;details.
                      00027 ;
                      00028 ;You should have received a copy of the GNU General Public License along with
                      00029 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00030 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00031 ;
                      00032 ;==============================================================================
                      00033 
  0000                00034 variable CURRENTBANK
  00000000            00035 CURRENTBANK set 0x0000
                      00036 
                      00037 
                      00038 ;*Sets the STATUS bits RP0 and RP1 correctly depending on the label passed.  Comparable to banksel comma
                            nd, except that it remembers the last bank selected in a variable named CURRENTBANK.  Based on C
                      00039 ;*reg: the register whose bank to select
                      00040 BNKSEL macro reg ;public
                      00041         if reg & 0x0100
                      00042                 if (CURRENTBANK & 0x0100) == 0
                      00043                         bsf STATUS, RP1
                      00044                 endif
                      00045         else
                      00046                 if (CURRENTBANK & 0x0100) == 0x0100
                      00047                         bcf STATUS, RP1
                      00048                 endif
                      00049         endif
                      00050         if reg & 0x0080
                      00051                 if (CURRENTBANK & 0x0080) == 0
                      00052                         bsf STATUS, RP0
                      00053                 endif
                      00054         else
                      00055                 if (CURRENTBANK & 0x0080) == 0x0080
                      00056                         bcf STATUS, RP0
                      00057                 endif
                      00058         endif
                      00059         CURRENTBANK set reg & 0x180
                      00060 endm
                      00061 
                      00062 
                      00255     include "asmext.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Extention of assembly instructions on registers and literals.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 11/1/2005
                      00007 ;*Filename: asmext.inc
                      00008 ;
                      00009 ;Copyright (C) 2005 Jonathan Weaver
                      00010 ;
                      00011 ;This program is free software; you can redistribute it and/or modify it under
                      00012 ;the terms of the GNU General Public License as published by the Free Software
                      00013 ;Foundation; either version 2 of the License, or (at your option) any later
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00014 ;version.
                      00015 ;
                      00016 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00017 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00018 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00019 ;details.
                      00020 ;
                      00021 ;You should have received a copy of the GNU General Public License along with
                      00022 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00023 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00024 ;
                      00025 ;Versions:  1.0 - 1/5/2005 - Defined headers, began writing macros
                      00026 ;           1.0 - 1/6/2005 - Wrote more macros
                      00027 ;           1.0 - 7/1/2005 - Tested macros, fixed bugs.  Rewrote SHIFTX and ROTX.
                      00028 ;                       1.0 - 7/11/2005 - Finished testing macros.  Added comments to headers.
                      00029 ;                       1.0 - 11/1/2005 - Wrote VROTF and VSHIFTF macros.
                      00030 ;==============================================================================
                      00031 
  00000001            00032 f equ F
  00000000            00033 w equ W
                      00034 
                      00035 ;------------------------------------------------------------------------------
                      00036 ;*Adds regA to regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00037 ;*regA: the register to add to regB
                      00038 ;*regB: the register to add to regA
                      00039 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00040 ADDFF macro regA, regB, dest    ;public
                      00041     movf regA, w
                      00042     addwf regB, dest
                      00043 endm
                      00044 
                      00045 ;------------------------------------------------------------------------------
                      00046 ;*Ands regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00047 ;*regA: the register to and with regB
                      00048 ;*regB: the register to and with regA
                      00049 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00050 ANDFF macro regA, regB, dest    ;public
                      00051     movf regA, w
                      00052     andwf regB, dest
                      00053 endm
                      00054 
                      00055 ;------------------------------------------------------------------------------
                      00056 ;*Inclusive ors regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00057 ;*regA: the register to or with regB
                      00058 ;*regB: the register to or with regA
                      00059 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00060 IORFF macro regA, regB, dest    ;public
                      00061     movf regA, w
                      00062     iorwf regB, dest
                      00063 endm
                      00064 
                      00065 ;------------------------------------------------------------------------------
                      00066 ;*Moves the value in regA to regB.  Affects WREG, STATUS.  2 Instruction Cycles.
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00067 ;*regA: the register to move to regB
                      00068 ;*regB: the destination register
                      00069 MOVFF macro regA, regB  ;public
                      00070     movf regA, w
                      00071     movwf regB
                      00072 endm
                      00073 
                      00074 ;------------------------------------------------------------------------------
                      00075 ;*Shifts the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cycl
                            es.
                      00076 ;*reg: the register to shift
                      00077 ;*lit: a literal containing the number of bits to shift left
                      00078 SHIFTL macro reg, lit   ;public
                      00079     local cnt
                      00080     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00081         cnt = lit
                      00082         while cnt > 0
                      00083             rlf reg, f
                      00084             cnt--
                      00085         endw
                      00086         if (lit) == 1
                      00087             bcf reg, 0
                      00088         else
                      00089             if (lit) == 2
                      00090                 bcf reg, 0
                      00091                 bcf reg, 1
                      00092             else
                      00093                 movlw (0xFF << (lit))
                      00094                     andwf reg, f
                      00095                 endif
                      00096         endif
                      00097     else
                      00098         if (lit) < 6
                      00099             if (lit) == 4           ;4 -> 3 cycles
                      00100                 swapf reg, f
                      00101                 movlw 0xF0
                      00102                 andwf reg, f
                      00103             else                    ;5 -> 4 cycles
                      00104                 swapf reg, f
                      00105                 rlf reg, f
                      00106                 movlw B'11100000'
                      00107                 andwf reg, f
                      00108             endif
                      00109         else
                      00110             if (lit) == 6           ;6 -> 5 cycles
                      00111                 rrf reg, f
                      00112                 rrf reg, f
                      00113                 rrf reg, f
                      00114                 movlw B'11000000'
                      00115                 andwf reg, f
                      00116             else                    ;7 -> 3 cycles
                      00117                 rrf reg, f
                      00118                 clrf reg
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00119                 rrf reg, f
                      00120             endif
                      00121         endif
                      00122     endif
                      00123 endm
                      00124 
                      00125 ;------------------------------------------------------------------------------
                      00126 ;*Shifts the value in reg right by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cyc
                            les.
                      00127 ;*reg: the register to shift
                      00128 ;*lit: a literal containing the number of bits to shift left
                      00129 SHIFTR macro reg, lit   ;public
                      00130     local cnt
                      00131     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00132         cnt = lit
                      00133         while cnt > 0
                      00134             rrf reg, f
                      00135             cnt--
                      00136         endw
                      00137         if (lit) == 1
                      00138             bcf reg, 7
                      00139         else
                      00140             movlw (0xFF >> (lit))
                      00141             andwf reg, f
                      00142         endif
                      00143     else
                      00144         if (lit) < 6
                      00145             if (lit) == 4           ;4 -> 3 cycles
                      00146                 swapf reg, f
                      00147                 movlw 0x0F
                      00148                 andwf reg, f
                      00149             else                    ;5 -> 4 cycles
                      00150                 swapf reg, f
                      00151                 rrf reg, f
                      00152                 movlw B'00000111'
                      00153                 andwf reg, f
                      00154             endif
                      00155         else
                      00156             if (lit) == 6           ;6 -> 5 cycles
                      00157                 rlf reg, f
                      00158                 rlf reg, f
                      00159                 rlf reg, f
                      00160                 movlw B'00000011'
                      00161                 andwf reg, f
                      00162             else                    ;7 -> 3 cycles
                      00163                 rlf reg, f
                      00164                 clrf reg
                      00165                 rlf reg, f
                      00166             endif
                      00167         endif
                      00168     endif
                      00169 endm
                      00170 
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00171 ;------------------------------------------------------------------------------
                      00172 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00173 ;*reg: the register to shift
                      00174 ;*lit: a literal containing the number of bits to shift left
                      00175 ROTL macro reg, lit     ;public
                      00176     local cnt
                      00177     if (lit) < 3                    ;1 -> 2 cycles, 2 -> 4 cycles
                      00178         cnt = lit
                      00179         while cnt > 0
                      00180             rlf reg, w
                      00181             rlf reg, f
                      00182             cnt--
                      00183         endw
                      00184     else
                      00185         if (lit) < 6
                      00186             swapf reg, f            ;4 -> 1 cycles
                      00187             if (lit) == 3           ;3 -> 3 cycles
                      00188                 rrf reg, w
                      00189                 rrf reg, f
                      00190             endif
                      00191             if (lit) == 5
                      00192                 rlf reg, w          ;5 -> 3 cycles
                      00193                 rlf reg, f
                      00194             endif
                      00195         else                        ;6 -> 4 cycles, 7 -> 2 cycles
                      00196             cnt = 8 - (lit)
                      00197             while cnt > 0
                      00198                 rrf reg, w
                      00199                 rrf reg, f
                      00200                 cnt--
                      00201             endw
                      00202         endif
                      00203     endif
                      00204 endm
                      00205 
                      00206 ;------------------------------------------------------------------------------
                      00207 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00208 ;*reg: the register to shift
                      00209 ;*lit: a literal containing the number of bits to shift left
                      00210 ROTR macro reg, lit     ;public
                      00211     ROTL reg, 8-lit
                      00212 endm
                      00213 
                      00214 ;------------------------------------------------------------------------------
                      00215 ;*Shifts regA left by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00216 ;*regA: register to shift
                      00217 ;*regB: register that determines shift (7 to 0 are valid)
                      00218 VSHIFTL macro regA, regB ;public
                      00219     bcf STATUS, C   ;Conditional shift by 1
                      00220     btfsc regB, 0
                      00221         rlf regA, f
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00222     bcf STATUS, C   ;Conditional shift by 2
                      00223     btfsc regB, 1
                      00224         rlf regA, f
                      00225     bcf STATUS, C
                      00226     btfsc regB, 1
                      00227         rlf regA, f
                      00228     swapf regA, w      ;Conditional shift by 4
                      00229     andlw 0xF0
                      00230     btfsc regB, 2
                      00231         movwf regA
                      00232 endm
                      00233 
                      00234 ;------------------------------------------------------------------------------
                      00235 ;*Shifts regA right by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00236 ;*regA: register to shift
                      00237 ;*regB: register that determines shift (7 to 0 are valid)
                      00238 VSHIFTR macro regA, regB ;public
                      00239     bcf STATUS, C   ;Conditional shift by 1
                      00240     btfsc regB, 0
                      00241         rrf regA, f
                      00242     bcf STATUS, C   ;Conditional shift by 2
                      00243     btfsc regB, 1
                      00244         rrf regA, f
                      00245     bcf STATUS, C
                      00246     btfsc regB, 1
                      00247         rrf regA, f
                      00248     swapf regA, w      ;Conditional shift by 4
                      00249     andlw 0x0F
                      00250     btfsc regB, 2
                      00251         movwf regA
                      00252 endm
                      00253 
                      00254 ;------------------------------------------------------------------------------
                      00255 ;*Rotates regA left by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00256 ;*regA: register to rotate
                      00257 ;*regB: register that determines rotate (7 to 0 are valid)
                      00258 VROTL macro regA, regB ;public
                      00259     rlf regA, w        ;Conditional rotate by 1
                      00260     btfsc regB, 0
                      00261         rlf regA, f
                      00262     rlf regA, w        ;Conditional rotate by 2
                      00263     btfsc regB, 1
                      00264         rlf regA, f
                      00265     rlf regA, w
                      00266     btfsc regB, 1
                      00267         rlf regA, f
                      00268     btfsc regB, 2      ;Conditional rotate by 4
                      00269         swapf regA, f
                      00270 endm
                      00271 
                      00272 ;------------------------------------------------------------------------------
                      00273 ;*Rotates regA right by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00274 ;*regA: register to rotate
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00275 ;*regB: register that determines rotate (7 to 0 are valid)
                      00276 VROTR macro regA, regB ;public
                      00277     rrf regA, w        ;Conditional rotate by 1
                      00278     btfsc regB, 0
                      00279         rrf regA, f
                      00280     rrf regA, w        ;Conditional rotate by 2
                      00281     btfsc regB, 1
                      00282         rrf regA, f
                      00283     rrf regA, w
                      00284     btfsc regB, 1
                      00285         rrf regA, f
                      00286     btfsc regB, 2      ;Conditional rotate by 4
                      00287         swapf regA, f
                      00288 endm
                      00289 
                      00290 ;------------------------------------------------------------------------------
                      00291 ;*Subracts regA from regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00292 ;*regA: the register to subtract
                      00293 ;*regB: the register to subtract from
                      00294 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00295 SUBFF macro regA, regB, dest    ;public
                      00296     movf regA, w
                      00297     subwf regB, dest
                      00298 endm
                      00299 
                      00300 ;------------------------------------------------------------------------------
                      00301 ;*Exclusive ors regA and regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00302 ;*regA: the register to exclusive or with regB
                      00303 ;*regB: the register to exclusive or with regA
                      00304 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00305 XORFF macro regA, regB, dest    ;public
                      00306     movf regA, w
                      00307     xorwf regB, dest
                      00308 endm
                      00309 
                      00310 ;------------------------------------------------------------------------------
                      00311 ;*Adds lit and reg and stores in WREG or reg.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00312 ;*lit: the literal to add with reg
                      00313 ;*reg: the register to add with lit
                      00314 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00315 ADDLF macro lit, reg, dest      ;public
                      00316     movlw lit
                      00317     addwf reg, dest
                      00318 endm
                      00319 
                      00320 ;------------------------------------------------------------------------------
                      00321 ;*Ands lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00322 ;*lit: literal to and with reg
                      00323 ;*reg: register to and with lit
                      00324 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00325 ANDLF macro lit, reg, dest      ;public
                      00326     movlw lit
                      00327     andwf reg, dest
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00328 endm
                      00329 
                      00330 ;------------------------------------------------------------------------------
                      00331 ;*Inclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00332 ;*lit: literal to inclusive or with reg
                      00333 ;*reg: register to inclusive or with lit
                      00334 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00335 IORLF macro lit, reg, dest      ;public
                      00336     movlw lit
                      00337     iorwf reg, dest
                      00338 endm
                      00339 
                      00340 ;------------------------------------------------------------------------------
                      00341 ;*Moves lit to reg.  Affects WREG.  2 Instruction Cycles.
                      00342 ;*lit: literal to move
                      00343 ;*reg: register to move literal to
                      00344 MOVLF macro lit, reg    ;public
                      00345     movlw lit
                      00346     movwf reg
                      00347 endm
                      00348 
                      00349 ;------------------------------------------------------------------------------
                      00350 ;*Subtracts reg from lit and stores in WREG or reg.  Affects WREG, STATUS.  2 to 3 Instruction Cycles.
                      00351 ;*lit: literal to subtract from
                      00352 ;*reg: register to subtract from literal
                      00353 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00354 SUBLF macro lit, reg, dest      ;public
                      00355     movf reg, w
                      00356     sublw lit
                      00357     if dest == 1
                      00358         movwf reg
                      00359     endif
                      00360 endm
                      00361 
                      00362 ;------------------------------------------------------------------------------
                      00363 ;*Exclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00364 ;*lit: literal to exclusive or with reg
                      00365 ;*reg: register to exclusive or with literal
                      00366 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00367 XORLF macro lit, reg, dest      ;public
                      00368     movlw lit
                      00369     xorwf reg, dest
                      00370 endm
                      00371 
                      00372 ;------------------------------------------------------------------------------
                      00373 ;*Negates reg and stores in WREG or reg.  Affects STATUS.  2 Instruction Cycles.
                      00374 ;*reg: register to negate (result is 0 - register)
                      00375 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00376 NEGATEF macro reg, dest ;public
                      00377     if dest == 1
                      00378         comf reg, f
                      00379         incf reg, f
                      00380     else
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00381         movf reg, w
                      00382         sublw 0x00      ;WREG = 0 - reg
                      00383     endif
                      00384 endm
                      00385 
                      00386 ;------------------------------------------------------------------------------
                      00387 ;*Sets WREG equal to reg and reg equal to WREG.  Affects STATUS.  2 Instruction Cycles.
                      00388 ;*reg: the register to swap with WREG
                      00389 SWAPWF macro reg        ;public
                      00390     xorwf reg, f        ;reg = reg xor WREG
                      00391     xorwf reg, w        ;WREG = reg xor WREG xor WREG = reg
                      00392     xorwf reg, f        ;reg = reg xor WREG xor reg = WREG
                      00393 endm
                      00394 
                      00395 ;------------------------------------------------------------------------------
                      00396 ;*Sets regA equal to regB and regB equal to regA.  Affects STATUS, WREG.  4 Instruction Cycles.
                      00397 ;*regA: register to move to regB
                      00398 ;*regB: register to move to regA
                      00399 SWAPFF macro regA, regB ;public
                      00400     movf regA, w
                      00401     xorwf regB, w       ;WREG = regA xor regB
                      00402     xorwf regA, f       ;regA = regA xor regB xor regA = regB
                      00403     xorwf regB, f       ;regB = regB xor regA xor regB = regA
                      00404 endm
                      00405 
                      00406 ;------------------------------------------------------------------------------
                      00407 ;*Adds regA to regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00408 ;*regA: register to add to regB
                      00409 ;*regB: register to add to regA
                      00410 ADDFF_TW macro regA, regB       ;public
                      00411     xorwf regA, f       ;regA = regA xor WREG
                      00412     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00413     addwf regB, f       ;regB = regB - regA
                      00414     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00415     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00416 endm
                      00417 
                      00418 ;------------------------------------------------------------------------------
                      00419 ;*Ands regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00420 ;*regA: register to and with regB
                      00421 ;*regB: register to and with regA
                      00422 ANDFF_TW macro regA, regB       ;public
                      00423     xorwf regA, f       ;regA = regA xor WREG
                      00424     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00425     andwf regB, f       ;regB = regB and regA
                      00426     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00427     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00428 endm
                      00429 
                      00430 ;------------------------------------------------------------------------------
                      00431 ;*Inclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00432 ;*regA: register to inclusive or with regB
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00433 ;*regB: register to inclusive or with regA
                      00434 IORFF_TW macro regA, regB       ;public
                      00435     xorwf regA, f       ;regA = regA xor WREG
                      00436     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00437     iorwf regB, f       ;regB = regB or regA
                      00438     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00439     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00440 endm
                      00441 
                      00442 ;------------------------------------------------------------------------------
                      00443 ;*Moves the value in regA to regB, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00444 ;*regA: register to move to regB
                      00445 ;*regB: destination register
                      00446 MOVFF_TW macro regA, regB       ;public
                      00447     xorwf regA, w
                      00448     movwf regB          ;regB = regA xor WREG
                      00449     xorwf regA, w       ;WREG = regA xor WREG xor regA = WREG
                      00450     xorwf regB, f       ;regB = regA xor WREG xor WREG = regA
                      00451 endm
                      00452 
                      00453 ;------------------------------------------------------------------------------
                      00454 ;*Subracts regA from regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles
                            .
                      00455 ;*regA: register to subtract from regB
                      00456 ;*regB: register regA is subtracted from and the destination register
                      00457 SUBFF_TW macro regA, regB       ;public
                      00458     xorwf regA, f       ;regA = regA xor WREG
                      00459     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00460     subwf regB, f       ;regB = regB - regA
                      00461     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00462     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00463 endm
                      00464 
                      00465 ;------------------------------------------------------------------------------
                      00466 ;*Exclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00467 ;*regA: register to exclusive or with regB
                      00468 ;*regB: register to exclusive or with regA
                      00469 XORFF_TW macro regA, regB       ;public
                      00470     xorwf regB, f       ;regB = WREG xor regB
                      00471     xorwf regA, w       ;WREG = WREG xor regA
                      00472     xorwf regB, f       ;regB = WREG xor regB xor WREG xor regA = regA xor regB
                      00473     xorwf regA, w       ;WREG = WREG xor regA xor regA = WREG
                      00474 endm
                      00475 
                      00476 ;------------------------------------------------------------------------------
                      00477 ;*Adds lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00478 ;*lit: literal to add to reg
                      00479 ;*reg: register which to add literal
                      00480 ADDLF_TW macro lit, reg ;public
                      00481     subwf reg, f        ;reg = reg - WREG
                      00482     addlw lit           ;WREG = WREG + lit
                      00483     addwf reg, f        ;reg = reg - WREG + WREG + lit = reg + lit
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00484     addlw 0-lit         ;WREG = WREG - lit
                      00485 endm
                      00486 
                      00487 ;------------------------------------------------------------------------------
                      00488 ;*Ands lit and reg and stores in reg, but preserves WREG.  Affect STATUS.  7 Instruction Cycles.
                      00489 ;*lit: literal to and with reg
                      00490 ;*reg: register which to and with literal
                      00491 ANDLF_TW macro lit, reg ;public
                      00492     SWAPWF reg
                      00493     andlw lit           ;WREG = reg and lit
                      00494     SWAPWF reg
                      00495 endm
                      00496 
                      00497 ;------------------------------------------------------------------------------
                      00498 ;*Inclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  7 Instruction Cycle
                            s.
                      00499 ;*lit: literal to inclusive or with reg
                      00500 ;*reg: register which to inclusive or with literal
                      00501 IORLF_TW macro lit, reg ;public
                      00502     SWAPWF reg
                      00503     iorlw lit           ;WREG = reg or lit
                      00504     SWAPWF reg
                      00505 endm
                      00506 
                      00507 ;------------------------------------------------------------------------------
                      00508 ;*Moves lit to reg, but preserves WREG.  Affects STATUS.  4 instruction cycles.
                      00509 ;*lit: literal to move
                      00510 ;*reg: register to move literal to
                      00511 MOVLF_TW macro lit, reg ;public
                      00512     movwf reg           ;reg = WREG
                      00513     xorlw lit           ;WREG = WREG xor lit
                      00514     xorwf reg, f        ;reg = WREG xor WREG xor lit = lit
                      00515     xorlw lit           ;WREG = WREG xor lit xor lit
                      00516 endm
                      00517 
                      00518 ;------------------------------------------------------------------------------
                      00519 ;*Subtracts reg from lit and stores in reg, but preserves WREG.  Affects STATUS.  6 Instruction Cycles.
                      00520 ;*lit: literal to subtract reg from
                      00521 ;*reg: register to subtract from lit and destination register
                      00522 SUBLF_TW macro lit, reg ;public
                      00523     subwf reg, f        ;reg = reg - WREG
                      00524     addlw 0-lit         ;WREG = WREG - lit
                      00525     addwf reg, f        ;reg = reg - WREG + WREG - lit = reg - lit
                      00526     addlw lit           ;WREG = WREG - lit + lit = WREG
                      00527     NEGATEF reg, f      ;Negate reg, 2 cycles
                      00528 endm
                      00529 
                      00530 ;------------------------------------------------------------------------------
                      00531 ;*Exclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycle
                            s.
                      00532 ;*lit: literal to exclusive or reg with
                      00533 ;*reg: register to exclusive or with lit and destination register
                      00534 XORLF_TW macro lit, reg ;public
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00535     xorwf reg, f        ;reg = reg xor WREG
                      00536     xorlw lit           ;WREG = WREG xor lit
                      00537     xorwf reg, f        ;reg = reg xor WREG xor WREG xor lit = reg xor lit
                      00538     xorlw lit           ;WREG = WREG xor lit xor lit = WREG
                      00539 endm
                      00540 
                      00541 ;------------------------------------------------------------------------------
                      00542 ;*Sets regA equal to regB and regB equal to regA, but preserves WREG.  Affects STATUS.  8 Instruction Cy
                            cles.
                      00543 ;*regA: register to move regB to
                      00544 ;*regB: register to more regA to
                      00545 SWAPFF_TW macro regA, regB      ;public
                      00546     xorwf regA, f       ;regA = regA xor WREG
                      00547     xorwf regB, f       ;regB = regB xor WREG
                      00548     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00549     xorwf regB, w       ;WREG = regA xor WREG xor regB
                      00550     xorwf regA, f       ;regA = WREG xor regA xor regB xor regA xor WREG = regB
                      00551     xorwf regB, f       ;regB = WREG xor regA xor regB xor regB xor WREG = regA
                      00552     xorwf regA, w       ;WREG = WREG xor regA xor regB xor regA = WREG xor regB
                      00553     xorwf regB, w       ;WREG = WREG xor regB xor regB = WREG
                      00554 endm
                      00555 
                      00556 ;------------------------------------------------------------------------------
                      00557 ;*Adds WREG to the Program Counter.  Usually used to lookup a value in a table of retlw between labels T
                            ableStart and TableEnd.  1 to 6 Instruction Cycles.
                      00558 ;*TableStart:  starting address in program memory of the table, should be immediately following call to 
                            ADDWPC
                      00559 ;*TableEnd:  ending address in program memory of the table.  For support if table crosses a page boundar
                            y (gives warning).
                      00560 ADDWPC macro TableStart, TableEnd       ;public
                      00561     if (high TableStart)
                      00562         movlw high TableStart
                      00563         movwf PCLATH
                      00564     endif
                      00565     if (high TableStart) == (high TableEnd)
                      00566         addwf PCL, f
                      00567     else
                      00568         messg "Table crosses page boundary"
                      00569         addwf PCL, w
                      00570         btfss STATUS, C
                      00571             incf PCLATH, f
                      00572         movwf PCL
                      00573     endif
                      00574 endm
                      00575 
                      00576 
                      00256 
                      00257 MGOTO macro address
                      00258         if (address & (0x1000))
                      00259                 bsf PCLATH, 4
                      00260         else
                      00261                 bcf PCLATH, 4
                      00262         endif
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00263         if (address & (0x800))
                      00264                 bsf PCLATH, 3
                      00265         else
                      00266                 bcf PCLATH, 3
                      00267         endif
                      00268         goto address
                      00269         endm
                      00270 
                      00271 CONFRECIEVE macro
                      00272     call GetByte                        ;Recieve ConfigLoc1
                      00273     movf i2csdata, w
                      00274     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                      00275     if clockFreq == 20              ;if necessary
                      00276         iorlw 1 << CLOCKFREQBIT
                      00277     endif
                      00278     movwf configLoc1
                      00279     call GetByte                        ;Recieve trigger delay
                      00280     MOVFF i2csdata, triggerDelay1
                      00281     call GetByte
                      00282     MOVFF i2csdata, triggerDelay2
                      00283     call GetByte                
                      00284     MOVFF i2csdata, triggerDelay3
                      00285     call GetByte                                        ;Recieve sample rate
                      00286     MOVFF i2csdata, sampleRate1
                      00287     call GetByte
                      00288     MOVFF i2csdata, sampleRate2
                      00289     endm
                      00290 
                      00291 CONFSEND macro
                      00292     ;Send number of datapoints (2 bytes)
                      00293     MOVLF high TOTALBUFFERSIZE, i2csdata
                      00294     call PutByte
                      00295     MOVLF low TOTALBUFFERSIZE, i2csdata
                      00296     call PutByte
                      00297     ;Send clock frequency configuration
                      00298     MOVFF configLoc1, i2csdata
                      00299     call PutByte
                      00300     MOVFF triggerDelay1, i2csdata
                      00301     call PutByte
                      00302     MOVFF triggerDelay2, i2csdata
                      00303     call PutByte
                      00304     MOVFF triggerDelay3, i2csdata
                      00305     call PutByte
                      00306     MOVFF sampleRate1, i2csdata
                      00307     call PutByte
                      00308     MOVFF sampleRate2, i2csdata
                      00309     call PutByte
                      00310     endm
                      00311 
                      00312 CHANNELCONFSEND macro
                      00313         MOVFF dataConfig, i2csdata              ;Channel configuration
                      00314     call PutByte
                      00315         clrf i2csdata
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00316     call PutByte                                        ;Channel 1 offset
                      00317     call PutByte                                        ;Channel 2 offset
                      00318         MOVFF triggerLevel, i2csdata
                      00319     call PutByte                                ;Triggerlevel
                      00320         endm
                      00321 
                      00322 CHANNELCONFSTORE macro
                      00323     ;Format of channel configuration is: Channel 1 Scale (2) bits
                      00324     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                      00325     ;                                    Channel 2 Scale (2) bits
                      00326     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                      00327     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                      00328     ;                                    Two least significant bits = 0
                      00329     clrf dataConfig
                      00330         BNKSEL TRISC
                      00331         bcf TRISC, CH1SEL                               ;Ch1Sel output
                      00332         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
                      00333         bcf TRISA, CH1SELG                              ;Ch1Sel output
                      00334         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
                      00335         BNKSEL ANALOG_SEL       
                      00336         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
                      00337         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                      00338 if HARDWARE == 0x10
                      00339         bsf dataConfig, 7
                      00340         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00341                 bcf dataConfig, 7
                      00342         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00343                 bcf dataConfig, 7
                      00344         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00345                 bsf dataConfig, 6
                      00346 else
                      00347         bsf dataConfig, 6                               ;Assume Gain = 2
                      00348         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00349                 bcf dataConfig, 6
                      00350         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00351                 bcf dataConfig, 6
                      00352         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00353                 bsf dataConfig, 7
                      00354 endif
                      00355         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00356                 bsf dataConfig, 3
                      00357         bsf ANALOG_SEL, CH1SEL
                      00358         bsf ANALOG_GAIN, CH1SELG
                      00359         BNKSEL TRISC
                      00360         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
                      00361         bcf TRISC, CH2SEL                               ;Ch2Sel output
                      00362         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
                      00363         bcf TRISA, CH2SELG                              ;Ch2Sel output
                      00364         BNKSEL ANALOG_SEL
                      00365         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
                      00366         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                      00367 if HARDWARE == 0x10
                      00368         bsf dataConfig, 5
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00369         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00370                 bcf dataConfig, 5
                      00371         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00372                 bcf dataConfig, 5
                      00373         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00374                 bsf dataConfig, 4
                      00375 else
                      00376         bsf dataConfig, 4                               ;Assume Gain = 2
                      00377         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00378                 bcf dataConfig, 4
                      00379         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00380                 bcf dataConfig, 4
                      00381         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00382                 bsf dataConfig, 5
                      00383 endif
                      00384         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00385                 bsf dataConfig, 2
                      00386     bsf ANALOG_SEL, CH2SEL
                      00387         bsf ANALOG_GAIN, CH2SELG
                      00388         ;Next byte is Trigger Level
                      00389         bcf ADC_CONTROLPORT, ADDR0                              ;Select address for trigger level
                      00390         bsf ADC_PORT, ADDR1
                      00391         bcf ADC_PORT, ADDR2
                      00392         bcf ADC_PORT, CS                                ;Select maxim ADC
                      00393         bcf ADC_CONTROLPORT, RDD                                ;Begin conversion
                      00394         goto $ + 1                                              ;Wait 3
                      00395         nop
                      00396         movf ADC_DATAPORT, w                    ;Save trigger level
                      00397         bsf ADC_CONTROLPORT, RDD                                ;stop conversion
                      00398         bsf ADC_PORT, CS                        ;unselect
                      00399         bcf ADC_CONTROLPORT, ADDR0                              ;Unselect address for trigger level
                      00400         bcf ADC_PORT, ADDR1
                      00401         bcf ADC_PORT, ADDR2
                      00402         movwf triggerLevel
                      00403     endm
                      00404 
                      00405 ;=============================================================================
                      00406 ; I N T E R R U P T S
                      00407 ;=============================================================================
                      00408 
0000                  00409 org 0x000
                      00410 ;Initialize
                      00411 ;First three lines of initialization included here to save on memory.
                      00412     MOVLF B'11000110', ADC_CONTROLPORT
0000   30C6               M     movlw B'11000110'
0001   0089               M     movwf ADC_CONTROLPORT
0002   0188           00413     clrf ADC_DATAPORT
0003   2895           00414     goto Initial
                      00415 
0004                  00416 org 0x004
0004                  00417 IntHandler
0004   1283           00418     bcf STATUS, RP0                                             ;Ensure we're in Bank0
0005   0BF6           00419         decfsz cntra, f
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0006   2804           00420         goto IntHandler
0007   0BF7           00421     decfsz cntrb, f
0008   2804           00422                 goto IntHandler
0009   0BF8           00423         decfsz cntrc, f
000A   2804           00424                 goto IntHandler
000B   0879           00425         movf modetemp, w
000C                  00426 MainSelect
000C   0782           00427     addwf PCL, f                        ;Add freqMode to Program Counter
                      00428         MGOTO Sample1M                                          ;FreqMode = 0
                          M         if (Sample1M & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
000D   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample1M & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
000E   118A               M                 bcf PCLATH, 3
                          M         endif
000F   2C0E               M         goto Sample1M
                      00429     MGOTO Sample833k                                    ;FreqMode = 1
                          M         if (Sample833k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0010   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample833k & (0x800))
0011   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0012   2F15               M         goto Sample833k
                      00430         MGOTO Sample625k                                        ;FreqMode = 2
                          M         if (Sample625k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0013   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample625k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0014   118A               M                 bcf PCLATH, 3
                          M         endif
0015   2AD5               M         goto Sample625k
                      00431         MGOTO Sample417k250k                            ;FreqMode = 3
                          M         if (Sample417k250k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0016   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample417k250k & (0x800))
                          M                 bsf PCLATH, 3
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
0017   118A               M                 bcf PCLATH, 3
                          M         endif
0018   2B18               M         goto Sample417k250k
                      00432         MGOTO Sample417k250k                            ;FreqMode = 4
                          M         if (Sample417k250k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0019   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample417k250k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
001A   118A               M                 bcf PCLATH, 3
                          M         endif
001B   2B18               M         goto Sample417k250k
                      00433     MGOTO SampleDelayed                                 ;FreqMode = 5
                          M         if (SampleDelayed & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
001C   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleDelayed & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
001D   118A               M                 bcf PCLATH, 3
                          M         endif
001E   29C7               M         goto SampleDelayed
                      00434     MGOTO SampleRep5M                                   ;FreqMode = 6
                          M         if (SampleRep5M & (0x1000))
001F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5M & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0020   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0021   2D18               M         goto SampleRep5M
                      00435         MGOTO SampleRep2M                                       ;FreqMode = 7
                          M         if (SampleRep2M & (0x1000))
0022   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2M & (0x800))
0023   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0024   294B               M         goto SampleRep2M
                      00436         MGOTO SampleXY417k                                      ;FreqMode = 8
                          M         if (SampleXY417k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0025   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY417k & (0x800))
0026   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0027   2912               M         goto SampleXY417k
                      00437         MGOTO SampleXY250k192k                          ;FreqMode = 9
                          M         if (SampleXY250k192k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0028   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY250k192k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0029   118A               M                 bcf PCLATH, 3
                          M         endif
002A   2B7B               M         goto SampleXY250k192k
                      00438         MGOTO SampleXY250k192k                          ;FreqMode = 10
                          M         if (SampleXY250k192k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
002B   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY250k192k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
002C   118A               M                 bcf PCLATH, 3
                          M         endif
002D   2B7B               M         goto SampleXY250k192k
                      00439     MGOTO SampleXYDelayed                               ;FreqMode = 11
                          M         if (SampleXYDelayed & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
002E   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXYDelayed & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
002F   118A               M                 bcf PCLATH, 3
                          M         endif
0030   2A32               M         goto SampleXYDelayed
                      00440         MGOTO Main                                                      ;Invalid FreqMode = 12, goto beg
                            inning
                          M         if (Main    & (0x1000))
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bsf PCLATH, 4
                          M         else
0031   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Main    & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0032   118A               M                 bcf PCLATH, 3
                          M         endif
0033   28B7               M         goto Main
                      00441         MGOTO Main                                                      ;Invalid FreqMode = 13
                          M         if (Main    & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0034   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Main    & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0035   118A               M                 bcf PCLATH, 3
                          M         endif
0036   28B7               M         goto Main
                      00442         MGOTO Main                                                      ;Invalid FreqMode = 14
                          M         if (Main    & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0037   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Main    & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0038   118A               M                 bcf PCLATH, 3
                          M         endif
0039   28B7               M         goto Main
                      00443         MGOTO Main                                                      ;Invalid FreqMode = 15
                          M         if (Main    & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
003A   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Main    & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
003B   118A               M                 bcf PCLATH, 3
                          M         endif
003C   28B7               M         goto Main
                      00444 
                      00445 ;=============================================================================
                      00446 ; I N C L U D E S
                      00447 ;=============================================================================
                      00448     include "i2cs.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: Software immulated I2C Slave Device.  I2CPort sets I/O port for I2C.  CLK sets clock pin.
                              SDA sets data pin.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 10/28/2009
                      00007 ;*Filename: i2cs.inc
                      00008 ;
                      00009 ;Program Words: 78
                      00010 ;Data Words:     2
                      00011 ;
                      00012 ;Versions:  1.0 - 12/29/2002 -- Code finished, tested, and cleaned.
                      00013 ;                       1.0 - 07/10/2003 -- Made code portable with external constants.
                      00014 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00015 ;                       1.0 - 10/28/2009 -- Fixed bug so that code will work with interrupts
                      00016 ;
                      00017 ;Copyright (C) 2002-2009 Jonathan Weaver
                      00018 ;
                      00019 ;This program is free software; you can redistribute it and/or modify it under
                      00020 ;the terms of the GNU General Public License as published by the Free Software
                      00021 ;Foundation; either version 2 of the License, or (at your option) any later
                      00022 ;version.
                      00023 ;
                      00024 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00025 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00026 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00027 ;details.
                      00028 ;
                      00029 ;You should have received a copy of the GNU General Public License along with
                      00030 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00031 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00032 ;
                      00033 ;==============================================================================
                      00034 
                      00035 ;;;;;; External Constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00036 
                      00037 ;*CLK is a literal which determines which pin will be the clock signal
                      00038 ;external CLK
                      00039 
                      00040 ;*SDA is a literal which determines which pin will be the data signal
                      00041 ;external CLK
                      00042 
                      00043 ;*I2CPORT is a literal which determines which port will be used as the I2C port.  Example setup for CLK 
                            = RB6 and SDA = RB7.<br><br>  CLK equ 0x06<br>  SDA equ 0x07<br> I2CPORT equ PORTB
                      00044 ;external I2CPORT
                      00045 
                      00046 
                      00047 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 
                      00049 ;*I2C Data byte, declare as register in main program
                      00050 ;external i2csdata
                      00051 
                      00052 ;*Temporary Counter, declare as register in main program
                      00053 ;external cntr
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 
                      00055 ;;;;;;; I2CSGetStop Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00056 ;*Tests if the next clock cycle is stop, start, or continued transmission.
                      00057 ;*Returns:  If Stop detected, returns hFF in WREG.  If Start detected, returns hFE in WREG.  If continue
                            d transmission, recieves next byte and returns h00 in WREG.  Next byte appears in i2csdata
003D                  00058 I2CSGetStop ;public
003D   1E86           00059                 btfss I2CPORT, CLK                      ;Clock line high?
003E   283D           00060                         goto I2CSGetStop
003F   1A06           00061                 btfsc I2CPORT, SDA
0040   2848           00062                         goto I2CSGetStopL2              ;SDA was high
0041                  00063 I2CSGetStopL1
0041   1A06           00064                 btfsc I2CPORT, SDA
0042   34FF           00065                         retlw 0xFF                              ;Detected stop bit
0043   1A86           00066                 btfsc I2CPORT, CLK
0044   2841           00067                         goto I2CSGetStopL1              ;Wait for clock to go low
0045   3002           00068                 movlw 0x02
0046   00FC           00069                 movwf i2csdata
0047   2862           00070                 goto I2CSGetByteL1                      ;Get next byte, no stop bit
0048                  00071 I2CSGetStopL2
0048   1E06           00072                 btfss I2CPORT, SDA
0049   284F           00073                         goto I2CSGetStopL3              ;Detected start bit
004A   1A86           00074                 btfsc I2CPORT, CLK
004B   2848           00075                         goto I2CSGetStopL2              ;Wait for clock to go low
004C   3003           00076                 movlw 0x03
004D   00FC           00077                 movwf i2csdata
004E   2862           00078                 goto I2CSGetByteL1                      ;Get next byte, no start bit
004F                  00079 I2CSGetStopL3
004F   1A86           00080                 btfsc I2CPORT, CLK
0050   284F           00081                         goto I2CSGetStopL3              ;Wait for clock to go low
0051   34FE           00082                 retlw 0xFE
                      00083 
                      00084 ;;;;;;; I2CSWaitStart Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00085 ;*Waits for a start condition.  Never returns unless Start detected and byte recieved.
                      00086 ;*Returns: 0x00 in WREG.  Byte returned in i2csdata
0052                  00087 I2CSWaitStart ;public
                      00088                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0052   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0053   1606           00089                 bsf I2CPORT, SDA                        ;Release SDA
                      00090                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0054   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0055                  00091 I2CSWaitStartL3
0055   1E86           00092                 btfss I2CPORT, CLK                      ;Clock line high?
0056   2855           00093                         goto I2CSWaitStartL3
0057   1E06           00094                 btfss I2CPORT, SDA                      ;Data line high?
0058   2855           00095                         goto I2CSWaitStartL3
0059                  00096 I2CSWaitStartL2
0059   1A06           00097                 btfsc I2CPORT, SDA                      ;Data line low?
005A   2859           00098                         goto I2CSWaitStartL2
005B   1E86           00099                 btfss I2CPORT, CLK                      ;Clock line high?
005C   2855           00100                         goto I2CSWaitStartL3
005D                  00101 I2CSWaitStartL1
005D   1A86           00102                 btfsc I2CPORT, CLK                      ;Clock line low?
005E   285D           00103                         goto I2CSWaitStartL1
                      00104                 ;Fall into I2CSGetByte
                      00105 
                      00106 ;;;;;;; I2CSGetByte Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00107 ;*Recieves a byte and sends an acknowledge.  Recieved byte appears in i2csdata
                      00108 ;*Returns:  0x00 in WREG
005F                  00109 I2CSGetByte ;public
005F   1003           00110                 bcf STATUS, C                           ;Clear carry
0060   01FC           00111                 clrf i2csdata                           ;Clear Input byte
0061   147C           00112                 bsf i2csdata, 0                         ;Set indicator
0062                  00113 I2CSGetByteL1
0062   1E86           00114                 btfss I2CPORT, CLK                      ;Clock high transition?
0063   2862           00115                         goto I2CSGetByteL1
0064   1003           00116                 bcf STATUS, C                           ;High transition, get bit into carry
0065   1A06           00117                 btfsc I2CPORT, SDA                      ;Assume clear, set if necessary
0066   1403           00118                         bsf STATUS, C
0067   0DFC           00119                 rlf i2csdata, F                         ;Add to LSB
0068                  00120 I2CSGetByteL2
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0068   1A86           00121                 btfsc I2CPORT, CLK                      ;Clock low transition
0069   2868           00122                         goto I2CSGetByteL2
006A   1C03           00123                 btfss STATUS, C                         ;Check indicator.  High is done
006B   2862           00124                         goto I2CSGetByteL1
                      00125                 ;Fall into Acknowledge
                      00126 
                      00127 ;;;;;;; I2CSPutAck Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00128 ;*Send an acknowledge.
                      00129 ;*Returns: 0x00 in WREG
006C                  00130 I2CSPutAck ;public
006C   1206           00131                 bcf I2CPORT, SDA                        ;Ensure SDA low
                      00132                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
006D   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
006E   1206           00133                 bcf I2CPORT, SDA                        ;Hold SDA low
                      00134                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
006F   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0070                  00135 I2CSPutAckL1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0070   1E86           00136                 btfss I2CPORT, CLK                      ;Clock high transition
0071   2870           00137                         goto I2CSPutAckL1
0072                  00138 I2CSPutAckL2
0072   1A86           00139                 btfsc I2CPORT, CLK                      ;Clock low transition
0073   2872           00140                         goto I2CSPutAckL2
                      00141                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0074   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0075   1606           00142                 bsf I2CPORT, SDA                        ;Release SDA
                      00143                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0076   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0077   3400           00144                 retlw 0
                      00145 
                      00146 ;;;;;;; I2CSPutByte ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00147 ;*Sends a byte.  Expects: the byte to send to be in i2csdata.
                      00148 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
0078                  00149 I2CSPutByte ;public
0078   1206           00150                 bcf I2CPORT, SDA                        ;Ensure SDA pulls low
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0079   3008           00151                 movlw 0x08
007A   00FB           00152                 movwf cntr
007B   287E           00153                 goto I2CSPutByteL1S
007C                  00154 I2CSPutByteL1
007C   1A86           00155                 btfsc I2CPORT, CLK                      ;Clock low transition
007D   287C           00156                         goto I2CSPutByteL1
007E                  00157 I2CSPutByteL1S
                      00158                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
007E   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
007F   1606           00159                 bsf I2CPORT, SDA                        ;Release SDA
0080   1FFC           00160                 btfss i2csdata, 7
0081   1206           00161                         bcf I2CPORT, SDA                ;Hold SDA low
                      00162                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0082   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0083                  00163 I2CSPutByteL2
0083   1E86           00164                 btfss I2CPORT, CLK                      ;Clock high transition
0084   2883           00165                         goto I2CSPutByteL2
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0085   0DFC           00166                 rlf i2csdata, F
0086   0BFB           00167                 decfsz cntr, F
0087   287C           00168                         goto I2CSPutByteL1
0088                  00169 I2CSPutByteL3
0088   1A86           00170                 btfsc I2CPORT, CLK                      ;Clock low transition
0089   2888           00171                         goto I2CSPutByteL3
                      00172                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
008A   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
008B   1606           00173                 bsf I2CPORT, SDA                        ;Release SDA
                      00174                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
008C   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
                      00175                 ;Fall into I2CSGetAck
                      00176 
                      00177 ;;;;;;; I2CSGetAck ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00178 ;*Detects if the master sent an acknowledge.  Expects: to be called when clock is low
                      00179 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
008D                  00180 I2CSGetAck ;public
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

008D   1E86           00181                 btfss I2CPORT, CLK                      ;Clock high transition
008E   288D           00182                         goto I2CSGetAck
008F   3000           00183                 movlw 0x00                                      ;Ack
0090   1A06           00184                 btfsc I2CPORT, SDA                      ;Test SDA
0091   30FF           00185                         movlw 0xFF                              ;No Ack
0092                  00186 I2CSGetAckL1
0092   1A86           00187                 btfsc I2CPORT, CLK                      ;Clock low transition
0093   2892           00188                         goto I2CSGetAckL1
0094   0008           00189                 return
                      00449 
                      00450 ;=============================================================================
                      00451 ;I N I T I A L I Z E
                      00452 ;=============================================================================
0095                  00453 Initial
                      00454 if HARDWARE == 0x10
                      00455     clrf PORTA
                      00456     BNKSEL TRISA
                      00457     MOVLF B'00000011', TRISA                    ;Configure PORTA
                      00458     MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
                      00459         MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
                      00460 
                      00461     MOVLF B'00000001', ADC_CONTROLPORT
                      00462     MOVLF B'11111111', ADC_DATAPORT
                      00463 
                      00464     MOVLF B'00000111', TRISE            ;Set up as inputs
                      00465         MOVLF B'00000111', ADCON1           ;Turn off A/D converter
                      00466     MOVLF B'11111001', TRISC                    ;Configure PORTC
                      00467 
                      00468         ;Initialize Serial Port
                      00469         MOVLF D'21', SPBRG                                      ;Set to 57,600 baud (nominally 56,818 ba
                            ud at 20 MHz clock).
                      00470         MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mode, high 
                            speed mode
                      00471         BSF PIE1,TXIE                                           ;Enable transmit interrupts
                      00472         BSF PIE1,RCIE                                           ;Enable receive interrupts
                      00473     BNKSEL 0x0000
                      00474         MOVLF B'10000000', RCSTA                        ;Eight bit recieve not yet enabled
                      00475 
                      00476     bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
                      00477     clrf ADCON0
                      00478 
                      00479 else
                      00480     if PIC == 0x887
                      00481 ;==============================================================================
                      00482 ;Contributed by Paul Messer
                      00483 ;==============================================================================
0095   0185           00484                 clrf PORTA
                      00485                 BNKSEL TRISA
                          M         if TRISA & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if TRISA & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0096   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISA & 0x180
                      00486                 MOVLF B'00010111', TRISA                        ;Configure PORTA
0097   3017               M     movlw B'00010111'
0098   0085               M     movwf TRISA
                      00487                 MOVLF B'11000000', OPTION_REG           ;Interrupt on rising edge of RB0
0099   30C0               M     movlw B'11000000'
009A   0081               M     movwf OPTION_REG
                      00488                 MOVLF B'00010000', INTCON                       ;Interrupt on RB0 only, but not enabled 
                            yet
009B   3010               M     movlw B'00010000'
009C   008B               M     movwf INTCON
                      00489                 MOVLF B'00110001', TRISB
009D   3031               M     movlw B'00110001'
009E   0086               M     movwf TRISB
                      00490                 MOVLF B'11111111', TRISD
009F   30FF               M     movlw B'11111111'
00A0   0088               M     movwf TRISD
                      00491                 MOVLF B'00000100', TRISE                        ;Set up USB detect as input, CS and ADDR
                            0 as outputs
00A1   3004               M     movlw B'00000100'
00A2   0089               M     movwf TRISE
                      00492                 MOVLF B'10111001', TRISC                        ;Configure PORTC
00A3   30B9               M     movlw B'10111001'
00A4   0087               M     movwf TRISC
                      00493 
                      00494                 BNKSEL  ANSEL
                          M         if ANSEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
00A5   1703               M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANSEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000180                M         CURRENTBANK set ANSEL & 0x180
00A6   0188           00495                 clrf    ANSEL           ;Turn off analog mode on RE2,1,0 and RA5,3,2,1,0 so the pins rea
                            d digital
00A7   0189           00496                 clrf    ANSELH          ;Turn off analog mode on RB5,0,4,1,3,2 so the pins read digital
                      00497 
                      00498                 ;Initialize Serial Port
                      00499 
                      00500                 BNKSEL  BAUDCTL         ;Access bank 3
                          M         if BAUDCTL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if BAUDCTL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000180                M         CURRENTBANK set BAUDCTL & 0x180
00A8   3008           00501                 movlw   0x08            ;Set the Serial Port baud rate generators
00A9   0087           00502                 movwf   BAUDCTL
                      00503                 BNKSEL  SPBRG           ;Return to bank 1 and continue setting baud rate generators
                          M         if SPBRG & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
00AA   1303               M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if SPBRG & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set SPBRG & 0x180
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AB   3056           00504                 movlw   0x56            ; for 57.6K baud
00AC   0099           00505                 movwf   SPBRG
00AD   3000           00506                 movlw   0x00
00AE   009A           00507                 movwf   SPBRGH
00AF   3024           00508                 movlw   0x24            ;Set the Serial Port Transmitter configuration
00B0   0098           00509                 movwf   TXSTA
                      00510         ;       bsf PIE1,TXIE           ;Enable transmit interrupts
00B1   0000           00511                 nop
                      00512         ;       bsf PIE1,RCIE           ;Enable receive interrupts
                      00513                 BNKSEL  RCSTA           ;Access bank 0
                          M         if RCSTA & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if RCSTA & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
00B2   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set RCSTA & 0x180
00B3   3090           00514                 movlw   0x90            ;Set the Serial Port Receiver configuration
00B4   0098           00515                 movwf   RCSTA
                      00516 
00B5   1383           00517                 bcf STATUS, IRP         ;Ensure indirect addressing of Bank0 and Bank1
00B6   019F           00518                 clrf ADCON0                     ;Make sure PIC's ADC is off
                      00519         
                      00520         else
                      00521                 clrf PORTA
                      00522                 BNKSEL TRISA
                      00523                 MOVLF B'00010111', TRISA                        ;Configure PORTA
                      00524                 MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
                      00525                 MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
                      00526                 MOVLF B'00110001', TRISB
                      00527                 MOVLF B'11111111', TRISD
                      00528                 MOVLF B'00000100', TRISE            ;Set up USB detect as input, CS and ADDR0 as outputs
                      00529                 MOVLF B'00000111', ADCON1           ;Turn off A/D converter
                      00530                 MOVLF B'10111001', TRISC                        ;Configure PORTC
                      00531 
                      00532                 ;Initialize Serial Port
                      00533                 MOVLF D'21', SPBRG                                      ;Set to 57,600 baud (nominally 5
                            6,818 baud at 20 MHz clock).
                      00534                 MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mod
                            e, high speed mode
                      00535                 BSF PIE1,TXIE                                           ;Enable transmit interrupts
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00536                 BSF PIE1,RCIE                                           ;Enable receive interrupts
                      00537                 BNKSEL 0x0000   
                      00538                 MOVLF B'10000000', RCSTA                        ;Eight bit recieve not yet enabled
                      00539 
                      00540                 bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
                      00541                 clrf ADCON0
                      00542         endif
                      00543 endif
                      00544         
                      00545 ;=============================================================================
                      00546 ; M A I N
                      00547 ;=============================================================================
00B7                  00548 Main
                      00549 
00B7   20E0           00550     call WaitComm
                      00551 
00B8   01FA           00552         clrf modetempb                                          ;Clear the modetempb for repetative samp
                            ling
                      00553         
00B9                  00554 MainB
00B9   0870           00555         movf configLoc1, w                  ;Put configuration in WREG
00BA   1089           00556     bcf ADC_CONTROLPORT, ADDR0          ;Select Channel
00BB   1A70           00557     btfsc configLoc1, CHANNELBIT
00BC   1489           00558         bsf ADC_CONTROLPORT, ADDR0
                      00559     if (high MainSelect)
                      00560         movlw high MainSelect          ;Prepare for jump
                      00561         movwf PCLATH
                      00562     else
00BD   018A           00563         clrf PCLATH
                      00564     endif
00BE   390F           00565     andlw (1<<FREQMODEBIT3)|(1<<FREQMODEBIT2)|(1<<FREQMODEBIT1)|(1<<FREQMODEBIT0)   ;Unmask FreqMode
00BF   00F9           00566     movwf modetemp                                              ;Multiply by 3
00C0   1003           00567     bcf STATUS, C
00C1   0DF9           00568     rlf modetemp, f
00C2   0779           00569     addwf modetemp, w
00C3   1086           00570     bcf ADC_PORT, CS                            ;Select MAX114
00C4   1F70           00571     btfss configLoc1, TRIGGERENBIT      ;Decide if trigger is enabled.  If so, wait on interrupt
00C5   280C           00572         goto MainSelect        
00C6                  00573 MainWaitTrig                            ;Trigger is enabled, set up interrupt
00C6   00F9           00574     movwf modetemp                                              ;Store the jump for main select (freqmod
                            e)
00C7   0A73           00575     incf triggerDelay3, w                               ;Get the trigger delay ready
00C8   00F6           00576     movwf cntra
00C9   0A72           00577     incf triggerDelay2, w       
00CA   00F7           00578     movwf cntrb
00CB   0A71           00579     incf triggerDelay1, w
00CC   00F8           00580     movwf cntrc    
                      00581     BNKSEL OPTION_REG
                          M         if OPTION_REG & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if OPTION_REG & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
00CD   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set OPTION_REG & 0x180
00CE   1301           00582     bcf OPTION_REG, INTEDG              ;Assume trigger on falling edge
00CF   0870           00583     movf configLoc1, w                  ;Get the trigger status
00D0   3980           00584     andlw 0x01 << TRIGGERPOSBIT
                      00585     skipZero                            ;Positive or negative trigger
00D1   1D03               M         btfss STATUS, Z
00D2   1701           00586         bsf OPTION_REG, INTEDG          ;Trigger on rising edge
                      00587     BNKSEL 0x0000
                          M         if 0x0000 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if 0x0000 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
00D3   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set 0x0000 & 0x180
00D4   108B           00588     bcf INTCON, INTF                    ;Ensure that the RB0 interrupt flag is clear
00D5   178B           00589     bsf INTCON, GIE                     ;Enable RB0 Interrupt
00D6                  00590 MainWTrigB
00D6   2164           00591     call WaitByte                                               ;Wait for the trigger unless a "break tr
                            igger"
                      00592     skipEqLF B'11110011', i2csdata              ;message is recieved
00D7   087C               M         movf i2csdata, w
00D8   3AF3               M         xorlw B'11110011'
00D9   1D03               M         btfss STATUS, Z
00DA   28D6           00593         goto MainWTrigB
                      00594     MOVLF B'11011100', i2csdata         ;Respond
00DB   30DC               M     movlw B'11011100'
00DC   00FC               M     movwf i2csdata
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DD   217C           00595     call PutByte
00DE   138B           00596         bcf INTCON, GIE                                         ;Disable RB0 Interrupt
00DF   28B7           00597     goto Main                                                   ;Abort
                      00598 
                      00599                                         ;Note that the gitter on the interrupt is
                      00600                                         ;1 cycles.  This translates to 200 ns
                      00601                                         ;on the PIC running at 20 MHz
                      00602 
                      00603 ;=============================================================================
                      00604 ; S U B R O U T I N E S
                      00605 ;=============================================================================
                      00606 
                      00607 ;Wait for command from computer and respond accordingly
                      00608 ;-----------------------------------------------------------------------------
00E0                  00609 WaitComm
00E0   2164           00610     call WaitByte                                       ;Wait for recieve
00E1                  00611 WaitComm_Test                                           ;Determine the command and the response
                      00612     skipEqLF B'11111000', i2csdata
00E1   087C               M         movf i2csdata, w
00E2   3AF8               M         xorlw B'11111000'
00E3   1D03               M         btfss STATUS, Z
00E4   2928           00613         goto WaitComm_Conf
00E5                  00614 WaitComm_Data
                      00615     MOVLF B'11011100', i2csdata     ;Send beginning of message
00E5   30DC               M     movlw B'11011100'
00E6   00FC               M     movwf i2csdata
00E7   217C           00616     call PutByte
                      00617     MOVLF BUFFERMIN, FSR            ;Set pointer to beginning of queue
00E8   3020               M     movlw BUFFERMIN
00E9   0084               M     movwf FSR
                      00618     MOVLF BUFFERSIZE, cntrb                     ;Set counter
00EA   3040               M     movlw BUFFERSIZE
00EB   00F7               M     movwf cntrb
00EC                  00619 WaitComm_SendDataA
                      00620     MOVFF INDF, i2csdata            ;Get data ready to send
00EC   0800               M     movf INDF, w
00ED   00FC               M     movwf i2csdata
00EE   0A84           00621     incf FSR, F                     ;Increment pointer
00EF   217C           00622     call PutByte                        ;Send data
00F0   39FF           00623     andlw 0xFF                      ;Until end of queue
                      00624     skipZero
00F1   1D03               M         btfss STATUS, Z
00F2   291C           00625         goto WaitComm_SendDataExit
00F3   0BF7           00626     decfsz cntrb, f
00F4   28EC           00627         goto WaitComm_SendDataA
                      00628         MOVLF BUFFERSIZE, cntrb                 ;Set counter
00F5   3040               M     movlw BUFFERSIZE
00F6   00F7               M     movwf cntrb
00F7   1784           00629         bsf FSR, 7                                              ;Bank 1
00F8   0384           00630         decf FSR, f
00F9                  00631 WaitComm_SendDataB
                      00632     MOVFF INDF, i2csdata            ;Get data ready to send
00F9   0800               M     movf INDF, w
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00FA   00FC               M     movwf i2csdata
00FB   0384           00633     decf FSR, F                     ;Increment pointer
00FC   217C           00634     call PutByte                        ;Send data
00FD   39FF           00635     andlw 0xFF                      ;Until end of queue
                      00636     skipZero
00FE   1D03               M         btfss STATUS, Z
00FF   291C           00637         goto WaitComm_SendDataExit
0100   0BF7           00638     decfsz cntrb, f
0101   28F9           00639         goto WaitComm_SendDataB
                      00640         MOVLF BUFFERSIZE, cntrb                 ;Set counter
0102   3040               M     movlw BUFFERSIZE
0103   00F7               M     movwf cntrb
0104   1783           00641         bsf STATUS, IRP                                 ;Bank 3
0105   0A84           00642         incf FSR, f
0106                  00643 WaitComm_SendDataC
                      00644     MOVFF INDF, i2csdata            ;Get data ready to send
0106   0800               M     movf INDF, w
0107   00FC               M     movwf i2csdata
0108   0A84           00645     incf FSR, F                     ;Increment pointer
0109   217C           00646     call PutByte                        ;Send data
010A   39FF           00647     andlw 0xFF                      ;Until end of queue
                      00648     skipZero
010B   1D03               M         btfss STATUS, Z
010C   291C           00649         goto WaitComm_SendDataExit
010D   0BF7           00650     decfsz cntrb, f
010E   2906           00651         goto WaitComm_SendDataC
                      00652         MOVLF BUFFERSIZE, cntrb                 ;Set counter
010F   3040               M     movlw BUFFERSIZE
0110   00F7               M     movwf cntrb
0111   1384           00653         bcf FSR, 7                                              ;Bank 3
0112   0384           00654         decf FSR, f
0113                  00655 WaitComm_SendDataD
                      00656     MOVFF INDF, i2csdata            ;Get data ready to send
0113   0800               M     movf INDF, w
0114   00FC               M     movwf i2csdata
0115   0384           00657     decf FSR, F                     ;Increment pointer
0116   217C           00658     call PutByte                        ;Send data
0117   39FF           00659     andlw 0xFF                      ;Until end of queue
                      00660     skipZero
0118   1D03               M         btfss STATUS, Z
0119   291C           00661         goto WaitComm_SendDataExit
011A   0BF7           00662     decfsz cntrb, f
011B   2913           00663         goto WaitComm_SendDataD
011C                  00664 WaitComm_SendDataExit
011C   1384           00665         bcf FSR, 7                                              ;Bank 0
011D   1383           00666         bcf STATUS, IRP
                      00667     CHANNELCONFSEND
                          M         MOVFF dataConfig, i2csdata              ;Channel configuration
011E   087D               M     movf dataConfig, w
011F   00FC               M     movwf i2csdata
0120   217C               M     call PutByte
0121   01FC               M         clrf i2csdata
0122   217C               M     call PutByte                                        ;Channel 1 offset
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0123   217C               M     call PutByte                                        ;Channel 2 offset
                          M         MOVFF triggerLevel, i2csdata
0124   087E               M     movf triggerLevel, w
0125   00FC               M     movwf i2csdata
0126   217C               M     call PutByte                                ;Triggerlevel
0127   28E0           00668     goto WaitComm
                      00669 
0128                  00670 WaitComm_Conf
                      00671     skipEqLF B'11111001', i2csdata
0128   087C               M         movf i2csdata, w
0129   3AF9               M         xorlw B'11111001'
012A   1D03               M         btfss STATUS, Z
012B   2948           00672         goto WaitComm_Rec
                      00673     MOVLF B'11011101', i2csdata     ;Send beginning of message
012C   30DD               M     movlw B'11011101'
012D   00FC               M     movwf i2csdata
012E   217C           00674     call PutByte        
                      00675     CONFSEND
                          M     ;Send number of datapoints (2 bytes)
                          M     MOVLF high TOTALBUFFERSIZE, i2csdata
012F   3001               M     movlw high TOTALBUFFERSIZE
0130   00FC               M     movwf i2csdata
0131   217C               M     call PutByte
                          M     MOVLF low TOTALBUFFERSIZE, i2csdata
0132   3000               M     movlw low TOTALBUFFERSIZE
0133   00FC               M     movwf i2csdata
0134   217C               M     call PutByte
                          M     ;Send clock frequency configuration
                          M     MOVFF configLoc1, i2csdata
0135   0870               M     movf configLoc1, w
0136   00FC               M     movwf i2csdata
0137   217C               M     call PutByte
                          M     MOVFF triggerDelay1, i2csdata
0138   0871               M     movf triggerDelay1, w
0139   00FC               M     movwf i2csdata
013A   217C               M     call PutByte
                          M     MOVFF triggerDelay2, i2csdata
013B   0872               M     movf triggerDelay2, w
013C   00FC               M     movwf i2csdata
013D   217C               M     call PutByte
                          M     MOVFF triggerDelay3, i2csdata
013E   0873               M     movf triggerDelay3, w
013F   00FC               M     movwf i2csdata
0140   217C               M     call PutByte
                          M     MOVFF sampleRate1, i2csdata
0141   0874               M     movf sampleRate1, w
0142   00FC               M     movwf i2csdata
0143   217C               M     call PutByte
                          M     MOVFF sampleRate2, i2csdata
0144   0875               M     movf sampleRate2, w
0145   00FC               M     movwf i2csdata
0146   217C               M     call PutByte
0147   28E0           00676     goto WaitComm
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00677 
0148                  00678 WaitComm_Rec
                      00679     skipEqLF B'11111010', i2csdata
0148   087C               M         movf i2csdata, w
0149   3AFA               M         xorlw B'11111010'
014A   1D03               M         btfss STATUS, Z
014B   28E0           00680         goto WaitComm               ;No valid message sent
                      00681     MOVLF B'11011110', i2csdata     ;Send beginning of message
014C   30DE               M     movlw B'11011110'
014D   00FC               M     movwf i2csdata
014E   217C           00682     call PutByte
                      00683     CONFRECIEVE
014F   2167               M     call GetByte                        ;Recieve ConfigLoc1
0150   087C               M     movf i2csdata, w
0151   39DF               M     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                          M     if clockFreq == 20              ;if necessary
0152   3820               M         iorlw 1 << CLOCKFREQBIT
                          M     endif
0153   00F0               M     movwf configLoc1
0154   2167               M     call GetByte                        ;Recieve trigger delay
                          M     MOVFF i2csdata, triggerDelay1
0155   087C               M     movf i2csdata, w
0156   00F1               M     movwf triggerDelay1
0157   2167               M     call GetByte
                          M     MOVFF i2csdata, triggerDelay2
0158   087C               M     movf i2csdata, w
0159   00F2               M     movwf triggerDelay2
015A   2167               M     call GetByte                
                          M     MOVFF i2csdata, triggerDelay3
015B   087C               M     movf i2csdata, w
015C   00F3               M     movwf triggerDelay3
015D   2167               M     call GetByte                                        ;Recieve sample rate
                          M     MOVFF i2csdata, sampleRate1
015E   087C               M     movf i2csdata, w
015F   00F4               M     movwf sampleRate1
0160   2167               M     call GetByte
                          M     MOVFF i2csdata, sampleRate2
0161   087C               M     movf i2csdata, w
0162   00F5               M     movwf sampleRate2
                      00684     
                      00685 ;       goto WaitComm                                   ;For DEBUGGING, simply return to WaitComm
0163   0008           00686         return
                      00687 
                      00688 ;WaitByte is used to wait for a byte either on serial port or on the i2c port
                      00689 ;------------------------------------------------------------------------------
0164                  00690 WaitByte
0164   1D05           00691         btfss SPPORT, SP
0165   2852           00692             goto I2CSWaitStart          
0166   2969           00693         goto GetByteSerial
                      00694 
                      00695 ;GetByte is used to recieve a byte on either a serial port or on the i2c port
                      00696 ;------------------------------------------------------------------------------
0167                  00697 GetByte
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0167   1D05           00698         btfss SPPORT, SP
0168   285F           00699             goto I2CSGetByte            
0169                  00700 GetByteSerial
0169   1618           00701         bsf RCSTA, CREN
016A   1E8C           00702         btfss PIR1, RCIF                        
016B   2969           00703                 goto GetByteSerial
016C                  00704 GetByteSerialB
016C   1D18           00705         btfss RCSTA, FERR                       ;Handle the frame error
016D   2970           00706                 goto GetByteSerialC
016E   081A           00707         movf RCREG, w                           ;Throw away data with errors
016F   2969           00708         goto GetByteSerial
0170                  00709 GetByteSerialC
0170   1C98           00710         btfss RCSTA, OERR                       ;Handle the over run error
0171   2978           00711                 goto GetByteSerialE
0172   1218           00712         bcf RCSTA, CREN                         ;Reset the recieve logic
0173   1618           00713         bsf RCSTA, CREN
0174                  00714 GetByteSerialD
0174   081A           00715         movf RCREG, w                           ;Throw away data with errors
0175   1A8C           00716         btfsc PIR1, RCIF
0176   2974           00717             goto GetByteSerialD
0177   2969           00718         goto GetByteSerial
0178                  00719 GetByteSerialE                                  ;No errors if we got here       
                      00720         MOVFF RCREG, i2csdata           ;Read byte from serial FIFO
0178   081A               M     movf RCREG, w
0179   00FC               M     movwf i2csdata
017A   1218           00721         bcf RCSTA, CREN
017B   3400           00722         retlw 0
                      00723         
                      00724 ;PutByte is used to put a byte either on the serial port or on the i2c port
                      00725 ;------------------------------------------------------------------------------
017C                  00726 PutByte
017C   1D05           00727         btfss SPPORT, SP
017D   2878           00728                 goto I2CSPutByte
017E                  00729 PutByteSerial
017E   1E0C           00730         btfss PIR1, TXIF
017F   297E           00731                 goto PutByteSerial
                      00732         ;Delay 82 cycles
                      00733 ;       MOVLF D'27', cntr
                      00734 ;PutByteSerialDelay
                      00735 ;       decfsz cntr, f
                      00736 ;               goto PutByteSerialDelay
                      00737         MOVFF i2csdata, TXREG
0180   087C               M     movf i2csdata, w
0181   0099               M     movwf TXREG
0182   3400           00738         retlw 0
                      00739 
                      00740 ;Delay used to adjust sample rate and trigger delay
                      00741 ;Any delay due to using a call must be added (i.e. delay doesn't include call
                      00742 ;statement)
                      00743 ;Delay = 5+7*(cntrb:cntra)+3*cntrb if cntra > 0, cntrb >= 0
                      00744 ;If cntra = 0 then delay as if cntra = 256
                      00745 ;If cntrb:cntra = 0x0000 then Delay as if cntrb = 255, cntra = 256
                      00746 ;-----------------------------------------------------------------------------
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0183                  00747 Delay
0183   3001           00748     movlw 0x01
0184                  00749 DelayLoop
0184   02F6           00750     subwf cntra, F
0185   1C03           00751     btfss STATUS, C
0186   02F7           00752         subwf cntrb, F
0187   08F6           00753     movf cntra, F
                      00754     skipZero
0188   1D03               M         btfss STATUS, Z
0189   2984           00755         goto DelayLoop
018A   08F7           00756     movf cntrb, F
                      00757     skipZero
018B   1D03               M         btfss STATUS, Z
018C   2984           00758         goto DelayLoop
018D   0008           00759         return
                      00760 
                      00761 ;ADCShutdown, shutsdown the MAX114/MAX118
                      00762 ;-----------------------------------------------------------------------------
018E                  00763 ADCShutdown
018E   0080           00764     movwf INDF                      ;Save to QUEUE
018F   1486           00765     bsf ADC_PORT, CS                    ;Unselect MAX114
0190   1383           00766     bcf STATUS, IRP                                     ;Set bank = 0
                      00767         CHANNELCONFSTORE
                          M     ;Format of channel configuration is: Channel 1 Scale (2) bits
                          M     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                          M     ;                                    Channel 2 Scale (2) bits
                          M     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Two least significant bits = 0
0191   01FD               M     clrf dataConfig
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0192   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
0193   1087               M         bcf TRISC, CH1SEL                               ;Ch1Sel output
0194   1507               M         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
0195   1205               M         bcf TRISA, CH1SELG                              ;Ch1Sel output
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0196   1685               M         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
                          M         BNKSEL ANALOG_SEL       
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0197   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
0198   1087               M         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
0199   1205               M         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                          M if HARDWARE == 0x10
                          M         bsf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                 bcf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                 bcf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                 bsf dataConfig, 6
                          M else
019A   177D               M         bsf dataConfig, 6                               ;Assume Gain = 2
019B   1C05               M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
019C   137D               M                 bcf dataConfig, 6
019D   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
019E   137D               M                 bcf dataConfig, 6
019F   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
01A0   17FD               M                 bsf dataConfig, 7
                          M endif
01A1   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
01A2   15FD               M                 bsf dataConfig, 3
01A3   1487               M         bsf ANALOG_SEL, CH1SEL
01A4   1605               M         bsf ANALOG_GAIN, CH1SELG
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
01A5   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
01A6   1487               M         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
01A7   1107               M         bcf TRISC, CH2SEL                               ;Ch2Sel output
01A8   1605               M         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
01A9   1285               M         bcf TRISA, CH2SELG                              ;Ch2Sel output
                          M         BNKSEL ANALOG_SEL
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
01AA   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
01AB   1107               M         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
01AC   1285               M         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                          M if HARDWARE == 0x10
                          M         bsf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                 bcf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                 bcf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                 bsf dataConfig, 4
                          M else
01AD   167D               M         bsf dataConfig, 4                               ;Assume Gain = 2
01AE   1C05               M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
01AF   127D               M                 bcf dataConfig, 4
01B0   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
01B1   127D               M                 bcf dataConfig, 4
01B2   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
01B3   16FD               M                 bsf dataConfig, 5
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M endif
01B4   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
01B5   157D               M                 bsf dataConfig, 2
01B6   1507               M     bsf ANALOG_SEL, CH2SEL
01B7   1685               M         bsf ANALOG_GAIN, CH2SELG
                          M         ;Next byte is Trigger Level
01B8   1089               M         bcf ADC_CONTROLPORT, ADDR0                              ;Select address for trigger level
01B9   1506               M         bsf ADC_PORT, ADDR1
01BA   1186               M         bcf ADC_PORT, ADDR2
01BB   1086               M         bcf ADC_PORT, CS                                ;Select maxim ADC
01BC   1009               M         bcf ADC_CONTROLPORT, RDD                                ;Begin conversion
01BD   29BE               M         goto $ + 1                                              ;Wait 3
01BE   0000               M         nop
01BF   0808               M         movf ADC_DATAPORT, w                    ;Save trigger level
01C0   1409               M         bsf ADC_CONTROLPORT, RDD                                ;stop conversion
01C1   1486               M         bsf ADC_PORT, CS                        ;unselect
01C2   1089               M         bcf ADC_CONTROLPORT, ADDR0                              ;Unselect address for trigger level
01C3   1106               M         bcf ADC_PORT, ADDR1
01C4   1186               M         bcf ADC_PORT, ADDR2
01C5   00FE               M         movwf triggerLevel
01C6   28B7           00768     goto Main
                      00769 
                      00770 ;Sample Delayed
                      00771 ;Sampling rate = 5e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      00772 ;Sampling rate = 1e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      00773 ;-----------------------------------------------------------------------------
01C7                  00774 SampleDelayed
01C7   1009           00775     bcf ADC_CONTROLPORT, RDD                    ;Begin Conversion
                      00776     MOVLF BUFFERSIZE-1, cntrc       ;Initialize counter, use cntrc as counter
01C8   303F               M     movlw BUFFERSIZE-1
01C9   00F8               M     movwf cntrc
                      00777     MOVLF BUFFERMIN, FSR            ;Initialize pointer
01CA   3020               M     movlw BUFFERMIN
01CB   0084               M     movwf FSR
                      00778     MOVFF sampleRate2, cntra        ;Restore cntra
01CC   0875               M     movf sampleRate2, w
01CD   00F6               M     movwf cntra
                      00779     MOVFF sampleRate1, cntrb        ;Restore cntrb
01CE   0874               M     movf sampleRate1, w
01CF   00F7               M     movwf cntrb
01D0   0000           00780         nop
01D1   2183           00781     call Delay
01D2                  00782 SampleDelayedLoopA
01D2   0808           00783     movf ADC_DATAPORT, W            ;Sample
01D3   1409           00784     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
01D4   1009           00785     bcf ADC_CONTROLPORT, RDD                ;Begin next conversion
01D5   0080           00786     movwf INDF                      ;Save to QUEUE
01D6   0A84           00787     incf FSR, F                     ;Increment QUEUE pointer
01D7                  00788 StSampleDelayedLoopA
                      00789     MOVFF sampleRate2, cntra        ;Restore cntra
01D7   0875               M     movf sampleRate2, w
01D8   00F6               M     movwf cntra
                      00790     MOVFF sampleRate1, cntrb        ;Restore cntrb
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D9   0874               M     movf sampleRate1, w
01DA   00F7               M     movwf cntrb
01DB   2183           00791     call Delay
01DC   0BF8           00792     decfsz cntrc, F             ;Increment counter, 64 samples?
01DD   29D2           00793         goto SampleDelayedLoopA
01DE   0000           00794         nop
01DF   0808           00795         movf ADC_DATAPORT, W                    ;Last sample in Bank 1
01E0   1409           00796     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
01E1   1009           00797     bcf ADC_CONTROLPORT, RDD                    ;Begin next conversion
01E2   0080           00798     movwf INDF                      ;Save to QUEUE
01E3   1784           00799         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00800         MOVLF BUFFERSIZE-1, cntrc
01E4   303F               M     movlw BUFFERSIZE-1
01E5   00F8               M     movwf cntrc
                      00801     MOVFF sampleRate2, cntra         ;Restore cntra
01E6   0875               M     movf sampleRate2, w
01E7   00F6               M     movwf cntra
                      00802     MOVFF sampleRate1, cntrb        ;Restore cntrb
01E8   0874               M     movf sampleRate1, w
01E9   00F7               M     movwf cntrb
01EA   2183           00803         call Delay
01EB   0000           00804         nop
01EC                  00805 SampleDelayedLoopB
01EC   0808           00806     movf ADC_DATAPORT, W            ;Sample
01ED   1409           00807     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01EE   1009           00808     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01EF   0080           00809     movwf INDF                      ;Save to QUEUE
01F0   0384           00810     decf FSR, F                     ;Increment QUEUE pointer
                      00811     MOVFF sampleRate2, cntra         ;Restore cntra
01F1   0875               M     movf sampleRate2, w
01F2   00F6               M     movwf cntra
                      00812     MOVFF sampleRate1, cntrb        ;Restore cntrb
01F3   0874               M     movf sampleRate1, w
01F4   00F7               M     movwf cntrb
01F5   2183           00813     call Delay
01F6   0BF8           00814     decfsz cntrc, F                         ;Increment counter, 64 samples?
01F7   29EC           00815         goto SampleDelayedLoopB
01F8   0000           00816         nop
01F9   0808           00817         movf ADC_DATAPORT, W                    ;Last sample in Bank 2
01FA   1409           00818     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01FB   1009           00819     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01FC   0080           00820     movwf INDF                      ;Save to QUEUE
01FD   1783           00821         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
                      00822         MOVLF BUFFERSIZE-1, cntrc
01FE   303F               M     movlw BUFFERSIZE-1
01FF   00F8               M     movwf cntrc
                      00823     MOVFF sampleRate2, cntra         ;Restore cntra
0200   0875               M     movf sampleRate2, w
0201   00F6               M     movwf cntra
                      00824     MOVFF sampleRate1, cntrb        ;Restore cntrb
0202   0874               M     movf sampleRate1, w
0203   00F7               M     movwf cntrb
0204   2183           00825         call Delay
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0205   0000           00826         nop
0206                  00827 SampleDelayedLoopC
0206   0808           00828     movf ADC_DATAPORT, W            ;Sample
0207   1409           00829     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0208   1009           00830     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0209   0080           00831     movwf INDF                      ;Save to QUEUE
020A   0A84           00832     incf FSR, F                     ;Increment QUEUE pointer
                      00833     MOVFF sampleRate2, cntra         ;Restore cntra
020B   0875               M     movf sampleRate2, w
020C   00F6               M     movwf cntra
                      00834     MOVFF sampleRate1, cntrb        ;Restore cntrb
020D   0874               M     movf sampleRate1, w
020E   00F7               M     movwf cntrb
020F   2183           00835     call Delay
0210   0BF8           00836     decfsz cntrc, F                         ;Increment counter, 64 samples?
0211   2A06           00837         goto SampleDelayedLoopC
0212   0000           00838         nop
0213   0808           00839         movf ADC_DATAPORT, W                    ;Last sample in Bank 4
0214   1409           00840     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0215   1009           00841     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0216   0080           00842     movwf INDF                      ;Save to QUEUE
0217   1384           00843         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00844         MOVLF BUFFERSIZE-1, cntrc
0218   303F               M     movlw BUFFERSIZE-1
0219   00F8               M     movwf cntrc
                      00845     MOVFF sampleRate2, cntra         ;Restore cntra
021A   0875               M     movf sampleRate2, w
021B   00F6               M     movwf cntra
                      00846     MOVFF sampleRate1, cntrb        ;Restore cntrb
021C   0874               M     movf sampleRate1, w
021D   00F7               M     movwf cntrb
021E   2183           00847         call Delay
021F   0000           00848         nop
0220                  00849 SampleDelayedLoopD
0220   0808           00850     movf ADC_DATAPORT, W            ;Sample
0221   1409           00851     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0222   1009           00852     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0223   0080           00853     movwf INDF                      ;Save to QUEUE
0224   0384           00854     decf FSR, F                     ;Increment QUEUE pointer
                      00855     MOVFF sampleRate2, cntra         ;Restore cntra
0225   0875               M     movf sampleRate2, w
0226   00F6               M     movwf cntra
                      00856     MOVFF sampleRate1, cntrb        ;Restore cntrb
0227   0874               M     movf sampleRate1, w
0228   00F7               M     movwf cntrb
0229   2183           00857     call Delay
022A   0BF8           00858     decfsz cntrc, F                         ;Increment counter, 64 samples?
022B   2A20           00859         goto SampleDelayedLoopD
022C   0000           00860     nop
022D   0808           00861     movf ADC_DATAPORT, W            ;Last sample
022E   1409           00862     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
022F   118A           00863     bcf PCLATH, 3                                       ;insure correct program memory page
0230   120A           00864     bcf PCLATH, 4
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0231   298E           00865     goto ADCShutdown
                      00866 
                      00867 ;SampleXYDelayed
                      00868 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      00869 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      00870 ;SampleXYDelayed does not sample X and Y at the same time.  Y is sampled 6 clock cycles
                      00871 ;behind X.  For a 20 MHz clock this is 1.2 uS, for a 4 MHz clock this is 6 uS.
                      00872 ;-----------------------------------------------------------------------------
0232                  00873 SampleXYDelayed
0232   1009           00874     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0233   1489           00875     bsf ADC_CONTROLPORT, ADDR0              ;Set channel to Y
                      00876     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0234   3020               M     movlw BUFFERMIN
0235   0084               M     movwf FSR
0236   0808           00877     movf ADC_DATAPORT, W            ;Sample X
0237   1409           00878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0238   1009           00879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0239   1089           00880     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
023A   0080           00881     movwf INDF                      ;Save to QUEUE
023B   0A84           00882     incf FSR, F                     ;Increment QUEUE pointer
                      00883     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
023C   301F               M     movlw BUFFERSIZE/2-1
023D   00F8               M     movwf cntrc
                      00884     MOVFF sampleRate2, cntra         ;Restore cntra
023E   0875               M     movf sampleRate2, w
023F   00F6               M     movwf cntra
                      00885     MOVFF sampleRate1, cntrb        ;Restore cntrb
0240   0874               M     movf sampleRate1, w
0241   00F7               M     movwf cntrb
0242   2183           00886         call Delay
0243   0000           00887         nop
0244                  00888 SampleXYDelayedLA
0244   0808           00889     movf ADC_DATAPORT, W            ;Sample Y
0245   1409           00890     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0246   1009           00891         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0247   1489           00892         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0248   0080           00893     movwf INDF                      ;Save to QUEUE
0249   0A84           00894     incf FSR, F                     ;Increment QUEUE pointer
024A   0808           00895     movf ADC_DATAPORT, W            ;Sample X
024B   1409           00896         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
024C   1009           00897         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
024D   1089           00898         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
024E   0080           00899     movwf INDF                      ;Save to QUEUE
024F   0A84           00900     incf FSR, F                     ;Increment QUEUE pointer
                      00901     MOVFF sampleRate2, cntra         ;Restore cntra
0250   0875               M     movf sampleRate2, w
0251   00F6               M     movwf cntra
                      00902     MOVFF sampleRate1, cntrb        ;Restore cntrb
0252   0874               M     movf sampleRate1, w
0253   00F7               M     movwf cntrb
0254   2183           00903     call Delay
0255   0BF8           00904     decfsz cntrc, F                     ;Increment counter, 64 samples?
0256   2A44           00905         goto SampleXYDelayedLA
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0257   0000           00906     nop
0258   0808           00907     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
0259   1409           00908     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
025A   1009           00909         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
025B   1489           00910         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
025C   0080           00911     movwf INDF                      ;Save to QUEUE
025D   1784           00912         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
025E   0808           00913     movf ADC_DATAPORT, W            ;Sample X
025F   1409           00914         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0260   1009           00915         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0261   1089           00916         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0262   0080           00917     movwf INDF                      ;Save to QUEUE
0263   0384           00918         decf FSR, f                                             ;Increment QUEUE pointer
                      00919     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
0264   301F               M     movlw BUFFERSIZE/2-1
0265   00F8               M     movwf cntrc
                      00920     MOVFF sampleRate2, cntra         ;Restore cntra
0266   0875               M     movf sampleRate2, w
0267   00F6               M     movwf cntra
                      00921     MOVFF sampleRate1, cntrb        ;Restore cntrb
0268   0874               M     movf sampleRate1, w
0269   00F7               M     movwf cntrb
026A   2183           00922     call Delay
026B   0000           00923         nop
026C                  00924 SampleXYDelayedLB
026C   0808           00925     movf ADC_DATAPORT, W            ;Sample Y
026D   1409           00926     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
026E   1009           00927         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
026F   1489           00928         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0270   0080           00929     movwf INDF                      ;Save to QUEUE
0271   0384           00930     decf FSR, F                     ;Increment QUEUE pointer
0272   0808           00931     movf ADC_DATAPORT, W            ;Sample X
0273   1409           00932         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0274   1009           00933         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0275   1089           00934         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0276   0080           00935     movwf INDF                      ;Save to QUEUE
0277   0384           00936     decf FSR, F                     ;Increment QUEUE pointer
                      00937     MOVFF sampleRate2, cntra         ;Restore cntra
0278   0875               M     movf sampleRate2, w
0279   00F6               M     movwf cntra
                      00938     MOVFF sampleRate1, cntrb        ;Restore cntrb
027A   0874               M     movf sampleRate1, w
027B   00F7               M     movwf cntrb
027C   2183           00939     call Delay
027D   0BF8           00940     decfsz cntrc, F                     ;Increment counter, 64 samples?
027E   2A6C           00941         goto SampleXYDelayedLB
027F   0000           00942     nop
0280   0808           00943     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
0281   1409           00944     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0282   1009           00945         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0283   1489           00946         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0284   0080           00947     movwf INDF                      ;Save to QUEUE
0285   1783           00948         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0286   0808           00949     movf ADC_DATAPORT, W            ;Sample X
0287   1409           00950         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0288   1009           00951         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0289   1089           00952         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
028A   0080           00953     movwf INDF                      ;Save to QUEUE
028B   0A84           00954         incf FSR, f                                             ;Increment QUEUE pointer
                      00955     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
028C   301F               M     movlw BUFFERSIZE/2-1
028D   00F8               M     movwf cntrc
                      00956     MOVFF sampleRate2, cntra         ;Restore cntra
028E   0875               M     movf sampleRate2, w
028F   00F6               M     movwf cntra
                      00957     MOVFF sampleRate1, cntrb        ;Restore cntrb
0290   0874               M     movf sampleRate1, w
0291   00F7               M     movwf cntrb
0292   2183           00958     call Delay
0293   0000           00959         nop
0294                  00960 SampleXYDelayedLC
0294   0808           00961     movf ADC_DATAPORT, W            ;Sample Y
0295   1409           00962     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0296   1009           00963         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0297   1489           00964         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0298   0080           00965     movwf INDF                      ;Save to QUEUE
0299   0A84           00966     incf FSR, F                     ;Increment QUEUE pointer
029A   0808           00967     movf ADC_DATAPORT, W            ;Sample X
029B   1409           00968         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
029C   1009           00969         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
029D   1089           00970         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
029E   0080           00971     movwf INDF                      ;Save to QUEUE
029F   0A84           00972     incf FSR, F                     ;Increment QUEUE pointer
                      00973     MOVFF sampleRate2, cntra         ;Restore cntra
02A0   0875               M     movf sampleRate2, w
02A1   00F6               M     movwf cntra
                      00974     MOVFF sampleRate1, cntrb        ;Restore cntrb
02A2   0874               M     movf sampleRate1, w
02A3   00F7               M     movwf cntrb
02A4   2183           00975     call Delay
02A5   0BF8           00976     decfsz cntrc, F                     ;Increment counter, 64 samples?
02A6   2A94           00977         goto SampleXYDelayedLC
02A7   0000           00978     nop
02A8   0808           00979     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
02A9   1409           00980     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02AA   1009           00981         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02AB   1489           00982         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02AC   0080           00983     movwf INDF                      ;Save to QUEUE
02AD   1384           00984         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
02AE   0808           00985     movf ADC_DATAPORT, W            ;Sample X
02AF   1409           00986         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02B0   1009           00987         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02B1   1089           00988         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02B2   0080           00989     movwf INDF                      ;Save to QUEUE
02B3   0384           00990         decf FSR, f                                             ;Increment QUEUE pointer
                      00991     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02B4   301F               M     movlw BUFFERSIZE/2-1
02B5   00F8               M     movwf cntrc
                      00992     MOVFF sampleRate2, cntra         ;Restore cntra
02B6   0875               M     movf sampleRate2, w
02B7   00F6               M     movwf cntra
                      00993     MOVFF sampleRate1, cntrb        ;Restore cntrb
02B8   0874               M     movf sampleRate1, w
02B9   00F7               M     movwf cntrb
02BA   2183           00994     call Delay
02BB   0000           00995         nop
02BC                  00996 SampleXYDelayedLD
02BC   0808           00997     movf ADC_DATAPORT, W            ;Sample Y
02BD   1409           00998     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02BE   1009           00999         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02BF   1489           01000         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02C0   0080           01001     movwf INDF                      ;Save to QUEUE
02C1   0384           01002     decf FSR, F                     ;Increment QUEUE pointer
02C2   0808           01003     movf ADC_DATAPORT, W            ;Sample X
02C3   1409           01004     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02C4   1009           01005         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02C5   1089           01006         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02C6   0080           01007     movwf INDF                      ;Save to QUEUE
02C7   0384           01008     decf FSR, F                     ;Increment QUEUE pointer
                      01009     MOVFF sampleRate2, cntra         ;Restore cntra
02C8   0875               M     movf sampleRate2, w
02C9   00F6               M     movwf cntra
                      01010     MOVFF sampleRate1, cntrb        ;Restore cntrb
02CA   0874               M     movf sampleRate1, w
02CB   00F7               M     movwf cntrb
02CC   2183           01011     call Delay
02CD   0BF8           01012     decfsz cntrc, F                     ;Increment counter, 64 samples?
02CE   2ABC           01013         goto SampleXYDelayedLD
02CF   0000           01014     nop
02D0   0808           01015     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
02D1   1409           01016     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02D2   118A           01017     bcf PCLATH, 3                                       ;insure correct program memory page
02D3   120A           01018     bcf PCLATH, 4
02D4   298E           01019     goto ADCShutdown
                      01020 
                      01021 ;Fast sample
                      01022 ;Sampling rate = 625 kHz with 20 MHz clock
                      01023 ;Sampling rate = 125 kHz with 4 MHz clock
                      01024 ;-----------------------------------------------------------------------------
02D5                  01025 Sample625k
02D5   1009           01026     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01027     MOVLF BUFFERSIZE-1, cntra               ;Initialize counter
02D6   303F               M     movlw BUFFERSIZE-1
02D7   00F6               M     movwf cntra
                      01028     MOVLF BUFFERMIN, FSR                ;Initialize pointer
02D8   3020               M     movlw BUFFERMIN
02D9   0084               M     movwf FSR
02DA   0000           01029         nop
02DB                  01030 Sample625kLoopA
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02DB   0808           01031     movf ADC_DATAPORT, W                ;Sample
02DC   1409           01032     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02DD   1009           01033     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02DE   0080           01034     movwf INDF                          ;Save to QUEUE
02DF   0A84           01035     incf FSR, F                         ;Increment QUEUE pointer
02E0   0BF6           01036     decfsz cntra, F                      ;Increment counter, 64 samples?
02E1   2ADB           01037         goto Sample625kLoopA
02E2   0000           01038     nop
02E3   0808           01039         movf ADC_DATAPORT, w                            ;Last sample in Bank 1
02E4   1409           01040         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
02E5   1009           01041         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
02E6   0080           01042         movwf INDF                                                      ;Save to QUEUE
02E7   1784           01043         bsf FSR, 7                                                      ;Move QUEUE pointer to Bank 2
                      01044         MOVLF BUFFERSIZE-1, cntra
02E8   303F               M     movlw BUFFERSIZE-1
02E9   00F6               M     movwf cntra
02EA   0000           01045         nop
02EB                  01046 Sample625kLoopB
02EB   0808           01047     movf ADC_DATAPORT, W                ;Sample
02EC   1409           01048     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02ED   1009           01049     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02EE   0080           01050     movwf INDF                          ;Save to QUEUE
02EF   0384           01051     decf FSR, F                         ;Increment QUEUE pointer
02F0   0BF6           01052     decfsz cntra, F                      ;Increment counter, 64 samples?
02F1   2AEB           01053         goto Sample625kLoopB
02F2   0000           01054         nop
02F3   0808           01055         movf ADC_DATAPORT, w                            ;Last sample in Bank 2
02F4   1409           01056         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
02F5   1009           01057         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
02F6   0080           01058         movwf INDF                                                      ;Save to QUEUE
02F7   1783           01059         bsf STATUS, IRP                                         ;Move QUEUE pointer to Bank 4
                      01060         MOVLF BUFFERSIZE-1, cntra
02F8   303F               M     movlw BUFFERSIZE-1
02F9   00F6               M     movwf cntra
02FA   0000           01061         nop
02FB                  01062 Sample625kLoopC
02FB   0808           01063     movf ADC_DATAPORT, W                ;Sample
02FC   1409           01064     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02FD   1009           01065     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02FE   0080           01066     movwf INDF                          ;Save to QUEUE
02FF   0A84           01067     incf FSR, F                         ;Increment QUEUE pointer
0300   0BF6           01068     decfsz cntra, F                      ;Increment counter, 64 samples?
0301   2AFB           01069         goto Sample625kLoopC
0302   0000           01070         nop
0303   0808           01071         movf ADC_DATAPORT, w                            ;Last sample in Bank 4
0304   1409           01072         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
0305   1009           01073         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
0306   0080           01074         movwf INDF                                                      ;Save to QUEUE
0307   1384           01075         bcf FSR, 7                                                      ;Move QUEUE pointer to Bank 3
                      01076         MOVLF BUFFERSIZE-1, cntra
0308   303F               M     movlw BUFFERSIZE-1
0309   00F6               M     movwf cntra
030A   0000           01077         nop
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030B                  01078 Sample625kLoopD
030B   0808           01079     movf ADC_DATAPORT, W                ;Sample
030C   1409           01080     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
030D   1009           01081     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
030E   0080           01082     movwf INDF                          ;Save to QUEUE
030F   0384           01083     decf FSR, F                         ;Increment QUEUE pointer
0310   0BF6           01084     decfsz cntra, F                      ;Increment counter, 64 samples?
0311   2B0B           01085         goto Sample625kLoopD
0312   0000           01086         nop
0313   0808           01087     movf ADC_DATAPORT, W                ;Last sample
0314   1409           01088     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0315   118A           01089     bcf PCLATH, 3                                               ;insure correct program memory page
0316   120A           01090     bcf PCLATH, 4
0317   298E           01091     goto ADCShutdown
                      01092 
                      01093 ;Fast sample
                      01094 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      01095 ;Sampling rate =  83.333 kHz with 4 MHz clock
                      01096 ;or
                      01097 ;Sampling rate = 250 kHz with 20 MHz clock
                      01098 ;Sampling rate =  50 kHz with 4 MHz clock
                      01099 ;-----------------------------------------------------------------------------
0318                  01100 Sample417k250k
0318   1009           01101     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
                      01102     MOVLF BUFFERSIZE - 1, cntra     ;Initialize counter
0319   303F               M     movlw BUFFERSIZE - 1
031A   00F6               M     movwf cntra
                      01103     MOVLF BUFFERMIN, FSR            ;Initialize pointer
031B   3020               M     movlw BUFFERMIN
031C   0084               M     movwf FSR
031D   2B1E           01104         goto $ + 1                                              ;Delay 3
031E   1D70           01105         btfss configLoc1, 2                             ;Choose to delay by 3 more or by 11 more
031F   2B21           01106                 goto Sample417kLoopA
0320   2377           01107         call DelaySeven                                 ;Delay 9 cycles
0321                  01108 Sample417kLoopA
0321   0808           01109     movf ADC_DATAPORT, W            ;Sample
0322   1409           01110     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0323   1009           01111     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0324   0080           01112     movwf INDF                      ;Save to QUEUE
0325   0A84           01113     incf FSR, F                     ;Increment QUEUE pointer
0326   1D70           01114     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0327   2B29           01115         goto Sample417kA            ;Delaying 4 cycles, sample at 417k
0328                  01116 Sample250kA
0328   2377           01117         call DelaySeven                                 ;Delay 9 cycles
0329                  01118 Sample417kA
0329   0000           01119     nop
032A   0BF6           01120     decfsz cntra, F                  ;Increment counter, 64 samples?
032B   2B21           01121         goto Sample417kLoopA
032C   0000           01122     nop
032D   0808           01123         movf ADC_DATAPORT, W                    ;Last sample bank 1
032E   1409           01124     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
032F   1009           01125     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0330   0080           01126     movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0331   1784           01127         bsf FSR, 7                                              ;Goto bank 2
                      01128         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0332   303F               M     movlw BUFFERSIZE - 1
0333   00F6               M     movwf cntra
0334   2B35           01129         goto $ + 1
0335   1D70           01130     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0336   2B38           01131         goto Sample417kLoopB        ;Delaying  cycles, sample at 417k
0337   2377           01132         call DelaySeven                                 ;Delay 9 cycles
0338                  01133 Sample417kLoopB
0338   0808           01134     movf ADC_DATAPORT, W            ;Sample
0339   1409           01135     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
033A   1009           01136     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
033B   0080           01137     movwf INDF                      ;Save to QUEUE
033C   0384           01138     decf FSR, F                     ;Increment QUEUE pointer
033D                  01139 StSample417kLoopB
033D   1D70           01140     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
033E   2B40           01141         goto Sample417kB            ;Delaying 4 cycles, sample at 417k
033F                  01142 Sample250kB
033F   2377           01143         call DelaySeven                                 ;Delay 9 cycles
0340                  01144 Sample417kB
0340   0000           01145     nop
0341   0BF6           01146     decfsz cntra, F                  ;Increment counter, 64 samples?
0342   2B38           01147         goto Sample417kLoopB
0343   0000           01148     nop
0344   0808           01149         movf ADC_DATAPORT, W                    ;Last sample bank 2
0345   1409           01150     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0346   1009           01151     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0347   0080           01152     movwf INDF                      ;Save to QUEUE
0348   1783           01153         bsf STATUS, IRP                                 ;Goto bank 4
                      01154         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0349   303F               M     movlw BUFFERSIZE - 1
034A   00F6               M     movwf cntra
034B   2B4C           01155         goto $ + 1
034C   1D70           01156     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
034D   2B4F           01157         goto Sample417kLoopC        ;Delaying  cycles, sample at 417k
034E   2377           01158         call DelaySeven                                 ;Delay 9 cycles
034F                  01159 Sample417kLoopC
034F   0808           01160     movf ADC_DATAPORT, W            ;Sample
0350   1409           01161     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0351   1009           01162     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0352   0080           01163     movwf INDF                      ;Save to QUEUE
0353   0A84           01164     incf FSR, F                     ;Increment QUEUE pointer
0354                  01165 StSample417kLoopC
0354   1D70           01166     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0355   2B57           01167         goto Sample417kC            ;Delaying 4 cycles, sample at 417k
0356                  01168 Sample250kC
0356   2377           01169         call DelaySeven                                 ;Delay 9 cycles
0357                  01170 Sample417kC
0357   0000           01171     nop
0358   0BF6           01172     decfsz cntra, F                  ;Increment counter, 64 samples?
0359   2B4F           01173         goto Sample417kLoopC
035A   0000           01174     nop
035B   0808           01175         movf ADC_DATAPORT, W                    ;Last sample bank 4
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

035C   1409           01176     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
035D   1009           01177     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
035E   0080           01178     movwf INDF                      ;Save to QUEUE
035F   1384           01179         bcf FSR, 7                                              ;Goto bank 3
                      01180         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0360   303F               M     movlw BUFFERSIZE - 1
0361   00F6               M     movwf cntra
0362   2B63           01181         goto $ + 1
0363   1D70           01182     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0364   2B66           01183         goto Sample417kLoopD        ;Delaying  cycles, sample at 417k
0365   2377           01184         call DelaySeven                                 ;Delay 9 cycles
0366                  01185 Sample417kLoopD
0366   0808           01186     movf ADC_DATAPORT, W            ;Sample
0367   1409           01187     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0368   1009           01188     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0369   0080           01189     movwf INDF                      ;Save to QUEUE
036A   0384           01190     decf FSR, F                     ;Increment QUEUE pointer
036B                  01191 StSample417kLoopD
036B   1D70           01192     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
036C   2B6E           01193         goto Sample417kD            ;Delaying 4 cycles, sample at 417k
036D                  01194 Sample250kD
036D   2377           01195         call DelaySeven                                 ;Delay 9 cycles
036E                  01196 Sample417kD
036E   0000           01197     nop
036F   0BF6           01198     decfsz cntra, F                  ;Increment counter, 64 samples?
0370   2B66           01199         goto Sample417kLoopD
0371   0000           01200     nop
0372   0808           01201     movf ADC_DATAPORT, W            ;Last sample
0373   1409           01202     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0374   118A           01203     bcf PCLATH, 3                                       ;insure correct program memory page
0375   120A           01204     bcf PCLATH, 4
0376   298E           01205     goto ADCShutdown
                      01206 
                      01207 ;Delay Seven Cycles, helper to Sample417k250k
0377                  01208 DelaySeven
0377   2B78           01209         goto $ + 1                                              ;7
                      01210 ;Delay Five Cycles, helper to SampleXY250k192k
0378                  01211 DelayFive
0378   0000           01212         nop                                                             ;5
0379   2B7A           01213         goto $ + 1                                              
                      01214 ;Delay Five Cycles, helper to SampleXY250k192k
037A                  01215 DelayTwo
037A   0008           01216         return                                                  ;2
                      01217 
                      01218 
                      01219 ;Fast sample XY
                      01220 ;Sampling rate = 250 kHz with 20 MHz clock
037B                  01221 SampleXY250k192k
037B   1009           01222     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
037C   1489           01223     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01224     MOVLF BUFFERMIN, FSR            ;Initialize pointer
037D   3020               M     movlw BUFFERMIN
037E   0084               M     movwf FSR
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

037F   0808           01225     movf ADC_DATAPORT, W            ;Sample X
0380   1409           01226         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0381   1009           01227         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0382   1089           01228     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0383   0080           01229     movwf INDF                      ;Save to QUEUE
0384   0A84           01230     incf FSR, F                     ;Increment QUEUE pointer
                      01231     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
0385   301F               M     movlw BUFFERSIZE/2-1
0386   00F8               M     movwf cntrc
0387   1C70           01232     btfss configLoc1, 0                 ;Delay 250k or 192k
0388   2378           01233         call DelayFive                   ;192k
0389   237A           01234         call DelayTwo
038A                  01235 SampleXY250kLA
038A   0808           01236     movf ADC_DATAPORT, W            ;Sample Y
038B   1409           01237     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
038C   1009           01238         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
038D   1489           01239         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
038E   0080           01240     movwf INDF                      ;Save to QUEUE
038F   0A84           01241     incf FSR, F                     ;Increment QUEUE pointer
0390   0808           01242     movf ADC_DATAPORT, W            ;Sample X
0391   1409           01243         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0392   1009           01244         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0393   1089           01245         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0394   0080           01246     movwf INDF                      ;Save to QUEUE
0395   0A84           01247     incf FSR, F                     ;Increment QUEUE pointer
0396   1C70           01248     btfss configLoc1, 0                 ;Delay 250k or 192k
0397   2378           01249         call DelayFive                   ;192k
0398   2B99           01250     goto $ + 1
0399   0000           01251     nop
039A   0BF8           01252     decfsz cntrc, F                     ;Increment counter, 64 samples?
039B   2B8A           01253         goto SampleXY250kLA
039C   0000           01254     nop
039D   0808           01255     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
039E   1409           01256     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
039F   1009           01257         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03A0   1489           01258         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03A1   0080           01259     movwf INDF                      ;Save to QUEUE
03A2   1784           01260         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
03A3   0808           01261     movf ADC_DATAPORT, W            ;Sample X
03A4   1409           01262         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03A5   1009           01263         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03A6   1089           01264         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03A7   0080           01265     movwf INDF                      ;Save to QUEUE
03A8   0384           01266         decf FSR, f                                             ;Increment QUEUE pointer
                      01267     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03A9   301F               M     movlw BUFFERSIZE/2-1
03AA   00F8               M     movwf cntrc
03AB   1C70           01268     btfss configLoc1, 0                 ;Delay 250k or 192k
03AC   2378           01269         call DelayFive                   ;192k
03AD   237A           01270         call DelayTwo
03AE                  01271 SampleXY250kLB
03AE   0808           01272     movf ADC_DATAPORT, W            ;Sample Y
03AF   1409           01273     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03B0   1009           01274         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03B1   1489           01275         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03B2   0080           01276     movwf INDF                      ;Save to QUEUE
03B3   0384           01277     decf FSR, F                     ;Increment QUEUE pointer
03B4   0808           01278     movf ADC_DATAPORT, W            ;Sample X
03B5   1409           01279         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03B6   1009           01280         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03B7   1089           01281         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03B8   0080           01282     movwf INDF                      ;Save to QUEUE
03B9   0384           01283     decf FSR, F                     ;Increment QUEUE pointer
03BA   1C70           01284     btfss configLoc1, 0                 ;Delay 250k or 192k
03BB   2378           01285         call DelayFive                   ;192k
03BC   2BBD           01286     goto $ + 1
03BD   0000           01287         nop
03BE   0BF8           01288     decfsz cntrc, F                     ;Increment counter, 64 samples?
03BF   2BAE           01289         goto SampleXY250kLB
03C0   0000           01290     nop
03C1   0808           01291     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
03C2   1409           01292     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03C3   1009           01293         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03C4   1489           01294         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03C5   0080           01295     movwf INDF                      ;Save to QUEUE
03C6   1783           01296         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
03C7   0808           01297     movf ADC_DATAPORT, W            ;Sample X
03C8   1409           01298         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03C9   1009           01299         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03CA   1089           01300         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03CB   0080           01301     movwf INDF                      ;Save to QUEUE
03CC   0A84           01302         incf FSR, f                                             ;Increment QUEUE pointer
                      01303     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03CD   301F               M     movlw BUFFERSIZE/2-1
03CE   00F8               M     movwf cntrc
03CF   1C70           01304     btfss configLoc1, 0                 ;Delay 250k or 192k
03D0   2378           01305         call DelayFive                   ;192k
03D1   237A           01306         call DelayTwo
03D2                  01307 SampleXY250kLC
03D2   0808           01308     movf ADC_DATAPORT, W            ;Sample Y
03D3   1409           01309     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03D4   1009           01310         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03D5   1489           01311         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03D6   0080           01312     movwf INDF                      ;Save to QUEUE
03D7   0A84           01313     incf FSR, F                     ;Increment QUEUE pointer
03D8   0808           01314     movf ADC_DATAPORT, W            ;Sample X
03D9   1409           01315         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03DA   1009           01316         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03DB   1089           01317         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03DC   0080           01318     movwf INDF                      ;Save to QUEUE
03DD   0A84           01319     incf FSR, F                     ;Increment QUEUE pointer
03DE   1C70           01320     btfss configLoc1, 0                 ;Delay 250k or 192k
03DF   2378           01321         call DelayFive                   ;192k
03E0   2BE1           01322     goto $ + 1
03E1   0000           01323     nop
03E2   0BF8           01324     decfsz cntrc, F                     ;Increment counter, 64 samples?
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03E3   2BD2           01325         goto SampleXY250kLC
03E4   0000           01326     nop
03E5   0808           01327     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
03E6   1409           01328     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03E7   1009           01329         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03E8   1489           01330         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03E9   0080           01331     movwf INDF                      ;Save to QUEUE
03EA   1384           01332         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
03EB   0808           01333     movf ADC_DATAPORT, W            ;Sample X
03EC   1409           01334         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03ED   1009           01335         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03EE   1089           01336         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03EF   0080           01337     movwf INDF                      ;Save to QUEUE
03F0   0384           01338         decf FSR, f                                             ;Increment QUEUE pointer
                      01339     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03F1   301F               M     movlw BUFFERSIZE/2-1
03F2   00F8               M     movwf cntrc
03F3   1C70           01340     btfss configLoc1, 0                 ;Delay 250k or 192k
03F4   2378           01341         call DelayFive                   ;192k
03F5   237A           01342         call DelayTwo
03F6                  01343 SampleXY250kLD
03F6   0808           01344     movf ADC_DATAPORT, W            ;Sample Y
03F7   1409           01345     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03F8   1009           01346         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03F9   1489           01347         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03FA   0080           01348     movwf INDF                      ;Save to QUEUE
03FB   0384           01349     decf FSR, F                     ;Increment QUEUE pointer
03FC   0808           01350     movf ADC_DATAPORT, W            ;Sample X
03FD   1409           01351     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03FE   1009           01352         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03FF   1089           01353         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0400   0080           01354     movwf INDF                      ;Save to QUEUE
0401   0384           01355     decf FSR, F                     ;Increment QUEUE pointer
0402   1C70           01356     btfss configLoc1, 0                 ;Delay 250k or 192k
0403   2378           01357         call DelayFive                   ;192k
0404   2C05           01358     goto $ + 1
0405   0000           01359         nop
0406   0BF8           01360         decfsz cntrc, F                 ;Increment counter, 64 samples?
0407   2BF6           01361         goto SampleXY250kLD
0408   0000           01362     nop
0409   0808           01363     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
040A   1409           01364     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
040B   118A           01365     bcf PCLATH, 3                                       ;insure correct program memory page
040C   120A           01366     bcf PCLATH, 4
040D   298E           01367     goto ADCShutdown
                      01368 
                      01369 ;Fastest sample
                      01370 ;Sampling rate = 1 MHz with 20 MHz clock
                      01371 ;Sampling rate = 200 kHz with 4 MHz clock
                      01372 ;-----------------------------------------------------------------------------
040E                  01373 Sample1M
040E   1009           01374     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01375     MOVLF BUFFERMIN, FSR                ;Initialize pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

040F   3020               M     movlw BUFFERMIN
0410   0084               M     movwf FSR
0411   0000           01376         nop
  0000                01377     local count
  00000001            01378     count = 1
                      01379     while count < BUFFERSIZE
0412   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0413   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0414   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0415   0080           01383         movwf INDF                      ;Save to QUEUE
0416   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01385         count = count + 1
0417   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0418   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0419   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
041A   0080           01383         movwf INDF                      ;Save to QUEUE
041B   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01385         count = count + 1
041C   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
041D   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
041E   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
041F   0080           01383         movwf INDF                      ;Save to QUEUE
0420   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01385         count = count + 1
0421   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0422   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0423   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0424   0080           01383         movwf INDF                      ;Save to QUEUE
0425   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01385         count = count + 1
0426   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0427   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0428   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0429   0080           01383         movwf INDF                      ;Save to QUEUE
042A   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01385         count = count + 1
042B   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
042C   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
042D   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
042E   0080           01383         movwf INDF                      ;Save to QUEUE
042F   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01385         count = count + 1
0430   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0431   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0432   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0433   0080           01383         movwf INDF                      ;Save to QUEUE
0434   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01385         count = count + 1
0435   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0436   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0437   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0438   0080           01383         movwf INDF                      ;Save to QUEUE
0439   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000009            01385         count = count + 1
043A   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
043B   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
043C   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
043D   0080           01383         movwf INDF                      ;Save to QUEUE
043E   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01385         count = count + 1
043F   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0440   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0441   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0442   0080           01383         movwf INDF                      ;Save to QUEUE
0443   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01385         count = count + 1
0444   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0445   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0446   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0447   0080           01383         movwf INDF                      ;Save to QUEUE
0448   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01385         count = count + 1
0449   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
044A   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
044B   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
044C   0080           01383         movwf INDF                      ;Save to QUEUE
044D   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01385         count = count + 1
044E   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
044F   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0450   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0451   0080           01383         movwf INDF                      ;Save to QUEUE
0452   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01385         count = count + 1
0453   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0454   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0455   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0456   0080           01383         movwf INDF                      ;Save to QUEUE
0457   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01385         count = count + 1
0458   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0459   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
045A   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
045B   0080           01383         movwf INDF                      ;Save to QUEUE
045C   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01385         count = count + 1
045D   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
045E   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
045F   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0460   0080           01383         movwf INDF                      ;Save to QUEUE
0461   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01385         count = count + 1
0462   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0463   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0464   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0465   0080           01383         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0466   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01385         count = count + 1
0467   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0468   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0469   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
046A   0080           01383         movwf INDF                      ;Save to QUEUE
046B   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01385         count = count + 1
046C   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
046D   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
046E   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
046F   0080           01383         movwf INDF                      ;Save to QUEUE
0470   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01385         count = count + 1
0471   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0472   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0473   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0474   0080           01383         movwf INDF                      ;Save to QUEUE
0475   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01385         count = count + 1
0476   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0477   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0478   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0479   0080           01383         movwf INDF                      ;Save to QUEUE
047A   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01385         count = count + 1
047B   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
047C   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
047D   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
047E   0080           01383         movwf INDF                      ;Save to QUEUE
047F   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01385         count = count + 1
0480   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0481   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0482   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0483   0080           01383         movwf INDF                      ;Save to QUEUE
0484   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01385         count = count + 1
0485   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0486   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0487   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0488   0080           01383         movwf INDF                      ;Save to QUEUE
0489   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01385         count = count + 1
048A   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
048B   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
048C   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
048D   0080           01383         movwf INDF                      ;Save to QUEUE
048E   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01385         count = count + 1
048F   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0490   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0491   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0492   0080           01383         movwf INDF                      ;Save to QUEUE
0493   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01385         count = count + 1
0494   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0495   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0496   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0497   0080           01383         movwf INDF                      ;Save to QUEUE
0498   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01385         count = count + 1
0499   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
049A   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
049B   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
049C   0080           01383         movwf INDF                      ;Save to QUEUE
049D   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01385         count = count + 1
049E   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
049F   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04A0   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04A1   0080           01383         movwf INDF                      ;Save to QUEUE
04A2   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01385         count = count + 1
04A3   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A4   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04A5   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04A6   0080           01383         movwf INDF                      ;Save to QUEUE
04A7   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01385         count = count + 1
04A8   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A9   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04AA   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04AB   0080           01383         movwf INDF                      ;Save to QUEUE
04AC   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01385         count = count + 1
04AD   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04AE   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04AF   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04B0   0080           01383         movwf INDF                      ;Save to QUEUE
04B1   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01385         count = count + 1
04B2   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B3   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B4   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04B5   0080           01383         movwf INDF                      ;Save to QUEUE
04B6   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01385         count = count + 1
04B7   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B8   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B9   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04BA   0080           01383         movwf INDF                      ;Save to QUEUE
04BB   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01385         count = count + 1
04BC   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04BD   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BE   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04BF   0080           01383         movwf INDF                      ;Save to QUEUE
04C0   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01385         count = count + 1
04C1   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C2   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C3   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04C4   0080           01383         movwf INDF                      ;Save to QUEUE
04C5   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01385         count = count + 1
04C6   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C7   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C8   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04C9   0080           01383         movwf INDF                      ;Save to QUEUE
04CA   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01385         count = count + 1
04CB   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04CC   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04CD   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04CE   0080           01383         movwf INDF                      ;Save to QUEUE
04CF   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01385         count = count + 1
04D0   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D1   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D2   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04D3   0080           01383         movwf INDF                      ;Save to QUEUE
04D4   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01385         count = count + 1
04D5   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D6   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D7   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04D8   0080           01383         movwf INDF                      ;Save to QUEUE
04D9   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01385         count = count + 1
04DA   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04DB   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04DC   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04DD   0080           01383         movwf INDF                      ;Save to QUEUE
04DE   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01385         count = count + 1
04DF   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E0   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E1   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04E2   0080           01383         movwf INDF                      ;Save to QUEUE
04E3   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01385         count = count + 1
04E4   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E5   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E6   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04E7   0080           01383         movwf INDF                      ;Save to QUEUE
04E8   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01385         count = count + 1
04E9   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04EA   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04EB   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04EC   0080           01383         movwf INDF                      ;Save to QUEUE
04ED   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01385         count = count + 1
04EE   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04EF   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04F0   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04F1   0080           01383         movwf INDF                      ;Save to QUEUE
04F2   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01385         count = count + 1
04F3   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F4   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04F5   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04F6   0080           01383         movwf INDF                      ;Save to QUEUE
04F7   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000002F            01385         count = count + 1
04F8   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F9   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04FA   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
04FB   0080           01383         movwf INDF                      ;Save to QUEUE
04FC   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01385         count = count + 1
04FD   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04FE   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04FF   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0500   0080           01383         movwf INDF                      ;Save to QUEUE
0501   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01385         count = count + 1
0502   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0503   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0504   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0505   0080           01383         movwf INDF                      ;Save to QUEUE
0506   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01385         count = count + 1
0507   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0508   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0509   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
050A   0080           01383         movwf INDF                      ;Save to QUEUE
050B   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01385         count = count + 1
050C   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
050D   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
050E   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
050F   0080           01383         movwf INDF                      ;Save to QUEUE
0510   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01385         count = count + 1
0511   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0512   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0513   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0514   0080           01383         movwf INDF                      ;Save to QUEUE
0515   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01385         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0516   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0517   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0518   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0519   0080           01383         movwf INDF                      ;Save to QUEUE
051A   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01385         count = count + 1
051B   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
051C   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
051D   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
051E   0080           01383         movwf INDF                      ;Save to QUEUE
051F   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01385         count = count + 1
0520   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0521   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0522   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0523   0080           01383         movwf INDF                      ;Save to QUEUE
0524   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01385         count = count + 1
0525   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0526   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0527   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0528   0080           01383         movwf INDF                      ;Save to QUEUE
0529   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000039            01385         count = count + 1
052A   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
052B   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
052C   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
052D   0080           01383         movwf INDF                      ;Save to QUEUE
052E   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01385         count = count + 1
052F   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0530   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0531   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0532   0080           01383         movwf INDF                      ;Save to QUEUE
0533   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01385         count = count + 1
0534   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0535   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0536   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0537   0080           01383         movwf INDF                      ;Save to QUEUE
0538   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01385         count = count + 1
0539   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
053A   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
053B   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
053C   0080           01383         movwf INDF                      ;Save to QUEUE
053D   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01385         count = count + 1
053E   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
053F   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0540   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0541   0080           01383         movwf INDF                      ;Save to QUEUE
0542   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003E            01385         count = count + 1
0543   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0544   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0545   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
0546   0080           01383         movwf INDF                      ;Save to QUEUE
0547   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01385         count = count + 1
0548   1409           01380             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0549   1009           01381             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
054A   0808           01382         movf ADC_DATAPORT, W            ;Save Sample
054B   0080           01383         movwf INDF                      ;Save to QUEUE
054C   0A84           01384         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01385         count = count + 1
                      01386     endw
054D   1409           01387     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
054E   1009           01388     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
054F   0808           01389     movf ADC_DATAPORT, W
0550   0080           01390     movwf INDF
0551   1784           01391     bsf FSR, 7                                                  ;goto bank 2
  00000001            01392     count = 1
                      01393     while count < BUFFERSIZE
0552   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0553   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0554   0808           01396         movf ADC_DATAPORT, W            ;Sample
0555   0080           01397         movwf INDF                      ;Save to QUEUE
0556   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01399         count = count + 1
0557   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0558   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0559   0808           01396         movf ADC_DATAPORT, W            ;Sample
055A   0080           01397         movwf INDF                      ;Save to QUEUE
055B   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01399         count = count + 1
055C   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
055D   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
055E   0808           01396         movf ADC_DATAPORT, W            ;Sample
055F   0080           01397         movwf INDF                      ;Save to QUEUE
0560   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01399         count = count + 1
0561   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0562   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0563   0808           01396         movf ADC_DATAPORT, W            ;Sample
0564   0080           01397         movwf INDF                      ;Save to QUEUE
0565   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01399         count = count + 1
0566   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0567   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0568   0808           01396         movf ADC_DATAPORT, W            ;Sample
0569   0080           01397         movwf INDF                      ;Save to QUEUE
056A   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01399         count = count + 1
056B   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
056C   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

056D   0808           01396         movf ADC_DATAPORT, W            ;Sample
056E   0080           01397         movwf INDF                      ;Save to QUEUE
056F   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01399         count = count + 1
0570   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0571   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0572   0808           01396         movf ADC_DATAPORT, W            ;Sample
0573   0080           01397         movwf INDF                      ;Save to QUEUE
0574   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01399         count = count + 1
0575   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0576   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0577   0808           01396         movf ADC_DATAPORT, W            ;Sample
0578   0080           01397         movwf INDF                      ;Save to QUEUE
0579   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01399         count = count + 1
057A   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
057B   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
057C   0808           01396         movf ADC_DATAPORT, W            ;Sample
057D   0080           01397         movwf INDF                      ;Save to QUEUE
057E   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01399         count = count + 1
057F   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0580   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0581   0808           01396         movf ADC_DATAPORT, W            ;Sample
0582   0080           01397         movwf INDF                      ;Save to QUEUE
0583   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01399         count = count + 1
0584   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0585   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0586   0808           01396         movf ADC_DATAPORT, W            ;Sample
0587   0080           01397         movwf INDF                      ;Save to QUEUE
0588   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01399         count = count + 1
0589   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
058A   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
058B   0808           01396         movf ADC_DATAPORT, W            ;Sample
058C   0080           01397         movwf INDF                      ;Save to QUEUE
058D   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01399         count = count + 1
058E   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
058F   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0590   0808           01396         movf ADC_DATAPORT, W            ;Sample
0591   0080           01397         movwf INDF                      ;Save to QUEUE
0592   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01399         count = count + 1
0593   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0594   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0595   0808           01396         movf ADC_DATAPORT, W            ;Sample
0596   0080           01397         movwf INDF                      ;Save to QUEUE
0597   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01399         count = count + 1
0598   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0599   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
059A   0808           01396         movf ADC_DATAPORT, W            ;Sample
059B   0080           01397         movwf INDF                      ;Save to QUEUE
059C   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01399         count = count + 1
059D   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
059E   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
059F   0808           01396         movf ADC_DATAPORT, W            ;Sample
05A0   0080           01397         movwf INDF                      ;Save to QUEUE
05A1   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01399         count = count + 1
05A2   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05A3   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05A4   0808           01396         movf ADC_DATAPORT, W            ;Sample
05A5   0080           01397         movwf INDF                      ;Save to QUEUE
05A6   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01399         count = count + 1
05A7   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05A8   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05A9   0808           01396         movf ADC_DATAPORT, W            ;Sample
05AA   0080           01397         movwf INDF                      ;Save to QUEUE
05AB   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01399         count = count + 1
05AC   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05AD   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05AE   0808           01396         movf ADC_DATAPORT, W            ;Sample
05AF   0080           01397         movwf INDF                      ;Save to QUEUE
05B0   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01399         count = count + 1
05B1   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05B2   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05B3   0808           01396         movf ADC_DATAPORT, W            ;Sample
05B4   0080           01397         movwf INDF                      ;Save to QUEUE
05B5   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01399         count = count + 1
05B6   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05B7   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05B8   0808           01396         movf ADC_DATAPORT, W            ;Sample
05B9   0080           01397         movwf INDF                      ;Save to QUEUE
05BA   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01399         count = count + 1
05BB   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05BC   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05BD   0808           01396         movf ADC_DATAPORT, W            ;Sample
05BE   0080           01397         movwf INDF                      ;Save to QUEUE
05BF   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01399         count = count + 1
05C0   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05C1   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05C2   0808           01396         movf ADC_DATAPORT, W            ;Sample
05C3   0080           01397         movwf INDF                      ;Save to QUEUE
05C4   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01399         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05C5   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05C6   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05C7   0808           01396         movf ADC_DATAPORT, W            ;Sample
05C8   0080           01397         movwf INDF                      ;Save to QUEUE
05C9   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01399         count = count + 1
05CA   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05CB   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05CC   0808           01396         movf ADC_DATAPORT, W            ;Sample
05CD   0080           01397         movwf INDF                      ;Save to QUEUE
05CE   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01399         count = count + 1
05CF   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D0   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D1   0808           01396         movf ADC_DATAPORT, W            ;Sample
05D2   0080           01397         movwf INDF                      ;Save to QUEUE
05D3   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01399         count = count + 1
05D4   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D5   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D6   0808           01396         movf ADC_DATAPORT, W            ;Sample
05D7   0080           01397         movwf INDF                      ;Save to QUEUE
05D8   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01399         count = count + 1
05D9   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05DA   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05DB   0808           01396         movf ADC_DATAPORT, W            ;Sample
05DC   0080           01397         movwf INDF                      ;Save to QUEUE
05DD   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01399         count = count + 1
05DE   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05DF   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E0   0808           01396         movf ADC_DATAPORT, W            ;Sample
05E1   0080           01397         movwf INDF                      ;Save to QUEUE
05E2   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01399         count = count + 1
05E3   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E4   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E5   0808           01396         movf ADC_DATAPORT, W            ;Sample
05E6   0080           01397         movwf INDF                      ;Save to QUEUE
05E7   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01399         count = count + 1
05E8   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E9   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05EA   0808           01396         movf ADC_DATAPORT, W            ;Sample
05EB   0080           01397         movwf INDF                      ;Save to QUEUE
05EC   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01399         count = count + 1
05ED   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05EE   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05EF   0808           01396         movf ADC_DATAPORT, W            ;Sample
05F0   0080           01397         movwf INDF                      ;Save to QUEUE
05F1   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000021            01399         count = count + 1
05F2   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F3   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F4   0808           01396         movf ADC_DATAPORT, W            ;Sample
05F5   0080           01397         movwf INDF                      ;Save to QUEUE
05F6   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01399         count = count + 1
05F7   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F8   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F9   0808           01396         movf ADC_DATAPORT, W            ;Sample
05FA   0080           01397         movwf INDF                      ;Save to QUEUE
05FB   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01399         count = count + 1
05FC   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05FD   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05FE   0808           01396         movf ADC_DATAPORT, W            ;Sample
05FF   0080           01397         movwf INDF                      ;Save to QUEUE
0600   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01399         count = count + 1
0601   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0602   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0603   0808           01396         movf ADC_DATAPORT, W            ;Sample
0604   0080           01397         movwf INDF                      ;Save to QUEUE
0605   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01399         count = count + 1
0606   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0607   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0608   0808           01396         movf ADC_DATAPORT, W            ;Sample
0609   0080           01397         movwf INDF                      ;Save to QUEUE
060A   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01399         count = count + 1
060B   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
060C   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
060D   0808           01396         movf ADC_DATAPORT, W            ;Sample
060E   0080           01397         movwf INDF                      ;Save to QUEUE
060F   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01399         count = count + 1
0610   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0611   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0612   0808           01396         movf ADC_DATAPORT, W            ;Sample
0613   0080           01397         movwf INDF                      ;Save to QUEUE
0614   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01399         count = count + 1
0615   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0616   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0617   0808           01396         movf ADC_DATAPORT, W            ;Sample
0618   0080           01397         movwf INDF                      ;Save to QUEUE
0619   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01399         count = count + 1
061A   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
061B   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
061C   0808           01396         movf ADC_DATAPORT, W            ;Sample
061D   0080           01397         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

061E   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01399         count = count + 1
061F   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0620   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0621   0808           01396         movf ADC_DATAPORT, W            ;Sample
0622   0080           01397         movwf INDF                      ;Save to QUEUE
0623   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01399         count = count + 1
0624   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0625   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0626   0808           01396         movf ADC_DATAPORT, W            ;Sample
0627   0080           01397         movwf INDF                      ;Save to QUEUE
0628   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01399         count = count + 1
0629   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
062A   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
062B   0808           01396         movf ADC_DATAPORT, W            ;Sample
062C   0080           01397         movwf INDF                      ;Save to QUEUE
062D   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01399         count = count + 1
062E   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
062F   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0630   0808           01396         movf ADC_DATAPORT, W            ;Sample
0631   0080           01397         movwf INDF                      ;Save to QUEUE
0632   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01399         count = count + 1
0633   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0634   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0635   0808           01396         movf ADC_DATAPORT, W            ;Sample
0636   0080           01397         movwf INDF                      ;Save to QUEUE
0637   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01399         count = count + 1
0638   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0639   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
063A   0808           01396         movf ADC_DATAPORT, W            ;Sample
063B   0080           01397         movwf INDF                      ;Save to QUEUE
063C   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01399         count = count + 1
063D   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
063E   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
063F   0808           01396         movf ADC_DATAPORT, W            ;Sample
0640   0080           01397         movwf INDF                      ;Save to QUEUE
0641   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01399         count = count + 1
0642   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0643   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0644   0808           01396         movf ADC_DATAPORT, W            ;Sample
0645   0080           01397         movwf INDF                      ;Save to QUEUE
0646   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01399         count = count + 1
0647   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0648   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0649   0808           01396         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064A   0080           01397         movwf INDF                      ;Save to QUEUE
064B   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01399         count = count + 1
064C   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
064D   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
064E   0808           01396         movf ADC_DATAPORT, W            ;Sample
064F   0080           01397         movwf INDF                      ;Save to QUEUE
0650   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01399         count = count + 1
0651   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0652   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0653   0808           01396         movf ADC_DATAPORT, W            ;Sample
0654   0080           01397         movwf INDF                      ;Save to QUEUE
0655   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01399         count = count + 1
0656   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0657   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0658   0808           01396         movf ADC_DATAPORT, W            ;Sample
0659   0080           01397         movwf INDF                      ;Save to QUEUE
065A   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000036            01399         count = count + 1
065B   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
065C   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
065D   0808           01396         movf ADC_DATAPORT, W            ;Sample
065E   0080           01397         movwf INDF                      ;Save to QUEUE
065F   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01399         count = count + 1
0660   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0661   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0662   0808           01396         movf ADC_DATAPORT, W            ;Sample
0663   0080           01397         movwf INDF                      ;Save to QUEUE
0664   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01399         count = count + 1
0665   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0666   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0667   0808           01396         movf ADC_DATAPORT, W            ;Sample
0668   0080           01397         movwf INDF                      ;Save to QUEUE
0669   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01399         count = count + 1
066A   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
066B   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
066C   0808           01396         movf ADC_DATAPORT, W            ;Sample
066D   0080           01397         movwf INDF                      ;Save to QUEUE
066E   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01399         count = count + 1
066F   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0670   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0671   0808           01396         movf ADC_DATAPORT, W            ;Sample
0672   0080           01397         movwf INDF                      ;Save to QUEUE
0673   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01399         count = count + 1
0674   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0675   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0676   0808           01396         movf ADC_DATAPORT, W            ;Sample
0677   0080           01397         movwf INDF                      ;Save to QUEUE
0678   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01399         count = count + 1
0679   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
067A   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
067B   0808           01396         movf ADC_DATAPORT, W            ;Sample
067C   0080           01397         movwf INDF                      ;Save to QUEUE
067D   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01399         count = count + 1
067E   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
067F   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0680   0808           01396         movf ADC_DATAPORT, W            ;Sample
0681   0080           01397         movwf INDF                      ;Save to QUEUE
0682   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01399         count = count + 1
0683   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0684   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0685   0808           01396         movf ADC_DATAPORT, W            ;Sample
0686   0080           01397         movwf INDF                      ;Save to QUEUE
0687   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01399         count = count + 1
0688   1409           01394         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0689   1009           01395         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
068A   0808           01396         movf ADC_DATAPORT, W            ;Sample
068B   0080           01397         movwf INDF                      ;Save to QUEUE
068C   0384           01398         decf FSR, F                     ;Increment QUEUE pointer
  00000040            01399         count = count + 1
                      01400         endw
068D   1409           01401     bsf ADC_CONTROLPORT, RDD
068E   1009           01402     bcf ADC_CONTROLPORT, RDD
068F   0808           01403     movf ADC_DATAPORT, W
0690   0080           01404     movwf INDF
0691   1783           01405     bsf STATUS, IRP                                             ;goto bank 4
  00000001            01406     count = 1
                      01407     while count < BUFFERSIZE
0692   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0693   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0694   0808           01410         movf ADC_DATAPORT, W            ;Sample
0695   0080           01411         movwf INDF                      ;Save to QUEUE
0696   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01413         count = count + 1
0697   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0698   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0699   0808           01410         movf ADC_DATAPORT, W            ;Sample
069A   0080           01411         movwf INDF                      ;Save to QUEUE
069B   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01413         count = count + 1
069C   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
069D   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
069E   0808           01410         movf ADC_DATAPORT, W            ;Sample
069F   0080           01411         movwf INDF                      ;Save to QUEUE
06A0   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01413         count = count + 1
06A1   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A2   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06A3   0808           01410         movf ADC_DATAPORT, W            ;Sample
06A4   0080           01411         movwf INDF                      ;Save to QUEUE
06A5   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01413         count = count + 1
06A6   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A7   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06A8   0808           01410         movf ADC_DATAPORT, W            ;Sample
06A9   0080           01411         movwf INDF                      ;Save to QUEUE
06AA   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01413         count = count + 1
06AB   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06AC   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06AD   0808           01410         movf ADC_DATAPORT, W            ;Sample
06AE   0080           01411         movwf INDF                      ;Save to QUEUE
06AF   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01413         count = count + 1
06B0   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B1   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B2   0808           01410         movf ADC_DATAPORT, W            ;Sample
06B3   0080           01411         movwf INDF                      ;Save to QUEUE
06B4   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01413         count = count + 1
06B5   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B6   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B7   0808           01410         movf ADC_DATAPORT, W            ;Sample
06B8   0080           01411         movwf INDF                      ;Save to QUEUE
06B9   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01413         count = count + 1
06BA   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06BB   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06BC   0808           01410         movf ADC_DATAPORT, W            ;Sample
06BD   0080           01411         movwf INDF                      ;Save to QUEUE
06BE   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01413         count = count + 1
06BF   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C0   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C1   0808           01410         movf ADC_DATAPORT, W            ;Sample
06C2   0080           01411         movwf INDF                      ;Save to QUEUE
06C3   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01413         count = count + 1
06C4   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C5   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C6   0808           01410         movf ADC_DATAPORT, W            ;Sample
06C7   0080           01411         movwf INDF                      ;Save to QUEUE
06C8   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01413         count = count + 1
06C9   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06CA   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06CB   0808           01410         movf ADC_DATAPORT, W            ;Sample
06CC   0080           01411         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06CD   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01413         count = count + 1
06CE   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06CF   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D0   0808           01410         movf ADC_DATAPORT, W            ;Sample
06D1   0080           01411         movwf INDF                      ;Save to QUEUE
06D2   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01413         count = count + 1
06D3   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D4   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D5   0808           01410         movf ADC_DATAPORT, W            ;Sample
06D6   0080           01411         movwf INDF                      ;Save to QUEUE
06D7   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01413         count = count + 1
06D8   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D9   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06DA   0808           01410         movf ADC_DATAPORT, W            ;Sample
06DB   0080           01411         movwf INDF                      ;Save to QUEUE
06DC   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01413         count = count + 1
06DD   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06DE   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06DF   0808           01410         movf ADC_DATAPORT, W            ;Sample
06E0   0080           01411         movwf INDF                      ;Save to QUEUE
06E1   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01413         count = count + 1
06E2   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E3   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E4   0808           01410         movf ADC_DATAPORT, W            ;Sample
06E5   0080           01411         movwf INDF                      ;Save to QUEUE
06E6   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01413         count = count + 1
06E7   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E8   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E9   0808           01410         movf ADC_DATAPORT, W            ;Sample
06EA   0080           01411         movwf INDF                      ;Save to QUEUE
06EB   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01413         count = count + 1
06EC   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06ED   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06EE   0808           01410         movf ADC_DATAPORT, W            ;Sample
06EF   0080           01411         movwf INDF                      ;Save to QUEUE
06F0   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01413         count = count + 1
06F1   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F2   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F3   0808           01410         movf ADC_DATAPORT, W            ;Sample
06F4   0080           01411         movwf INDF                      ;Save to QUEUE
06F5   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01413         count = count + 1
06F6   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F7   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F8   0808           01410         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06F9   0080           01411         movwf INDF                      ;Save to QUEUE
06FA   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01413         count = count + 1
06FB   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06FC   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06FD   0808           01410         movf ADC_DATAPORT, W            ;Sample
06FE   0080           01411         movwf INDF                      ;Save to QUEUE
06FF   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01413         count = count + 1
0700   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0701   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0702   0808           01410         movf ADC_DATAPORT, W            ;Sample
0703   0080           01411         movwf INDF                      ;Save to QUEUE
0704   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01413         count = count + 1
0705   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0706   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0707   0808           01410         movf ADC_DATAPORT, W            ;Sample
0708   0080           01411         movwf INDF                      ;Save to QUEUE
0709   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01413         count = count + 1
070A   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
070B   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
070C   0808           01410         movf ADC_DATAPORT, W            ;Sample
070D   0080           01411         movwf INDF                      ;Save to QUEUE
070E   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01413         count = count + 1
070F   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0710   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0711   0808           01410         movf ADC_DATAPORT, W            ;Sample
0712   0080           01411         movwf INDF                      ;Save to QUEUE
0713   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01413         count = count + 1
0714   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0715   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0716   0808           01410         movf ADC_DATAPORT, W            ;Sample
0717   0080           01411         movwf INDF                      ;Save to QUEUE
0718   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01413         count = count + 1
0719   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
071A   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
071B   0808           01410         movf ADC_DATAPORT, W            ;Sample
071C   0080           01411         movwf INDF                      ;Save to QUEUE
071D   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01413         count = count + 1
071E   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
071F   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0720   0808           01410         movf ADC_DATAPORT, W            ;Sample
0721   0080           01411         movwf INDF                      ;Save to QUEUE
0722   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01413         count = count + 1
0723   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0724   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0725   0808           01410         movf ADC_DATAPORT, W            ;Sample
0726   0080           01411         movwf INDF                      ;Save to QUEUE
0727   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01413         count = count + 1
0728   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0729   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
072A   0808           01410         movf ADC_DATAPORT, W            ;Sample
072B   0080           01411         movwf INDF                      ;Save to QUEUE
072C   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01413         count = count + 1
072D   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
072E   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
072F   0808           01410         movf ADC_DATAPORT, W            ;Sample
0730   0080           01411         movwf INDF                      ;Save to QUEUE
0731   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01413         count = count + 1
0732   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0733   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0734   0808           01410         movf ADC_DATAPORT, W            ;Sample
0735   0080           01411         movwf INDF                      ;Save to QUEUE
0736   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01413         count = count + 1
0737   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0738   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0739   0808           01410         movf ADC_DATAPORT, W            ;Sample
073A   0080           01411         movwf INDF                      ;Save to QUEUE
073B   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01413         count = count + 1
073C   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
073D   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
073E   0808           01410         movf ADC_DATAPORT, W            ;Sample
073F   0080           01411         movwf INDF                      ;Save to QUEUE
0740   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01413         count = count + 1
0741   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0742   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0743   0808           01410         movf ADC_DATAPORT, W            ;Sample
0744   0080           01411         movwf INDF                      ;Save to QUEUE
0745   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01413         count = count + 1
0746   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0747   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0748   0808           01410         movf ADC_DATAPORT, W            ;Sample
0749   0080           01411         movwf INDF                      ;Save to QUEUE
074A   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01413         count = count + 1
074B   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
074C   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
074D   0808           01410         movf ADC_DATAPORT, W            ;Sample
074E   0080           01411         movwf INDF                      ;Save to QUEUE
074F   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01413         count = count + 1
0750   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0751   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0752   0808           01410         movf ADC_DATAPORT, W            ;Sample
0753   0080           01411         movwf INDF                      ;Save to QUEUE
0754   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01413         count = count + 1
0755   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0756   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0757   0808           01410         movf ADC_DATAPORT, W            ;Sample
0758   0080           01411         movwf INDF                      ;Save to QUEUE
0759   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01413         count = count + 1
075A   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
075B   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
075C   0808           01410         movf ADC_DATAPORT, W            ;Sample
075D   0080           01411         movwf INDF                      ;Save to QUEUE
075E   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01413         count = count + 1
075F   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0760   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0761   0808           01410         movf ADC_DATAPORT, W            ;Sample
0762   0080           01411         movwf INDF                      ;Save to QUEUE
0763   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01413         count = count + 1
0764   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0765   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0766   0808           01410         movf ADC_DATAPORT, W            ;Sample
0767   0080           01411         movwf INDF                      ;Save to QUEUE
0768   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01413         count = count + 1
0769   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
076A   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
076B   0808           01410         movf ADC_DATAPORT, W            ;Sample
076C   0080           01411         movwf INDF                      ;Save to QUEUE
076D   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01413         count = count + 1
076E   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
076F   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0770   0808           01410         movf ADC_DATAPORT, W            ;Sample
0771   0080           01411         movwf INDF                      ;Save to QUEUE
0772   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01413         count = count + 1
0773   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0774   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0775   0808           01410         movf ADC_DATAPORT, W            ;Sample
0776   0080           01411         movwf INDF                      ;Save to QUEUE
0777   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000002F            01413         count = count + 1
0778   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0779   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
077A   0808           01410         movf ADC_DATAPORT, W            ;Sample
077B   0080           01411         movwf INDF                      ;Save to QUEUE
077C   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01413         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

077D   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
077E   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
077F   0808           01410         movf ADC_DATAPORT, W            ;Sample
0780   0080           01411         movwf INDF                      ;Save to QUEUE
0781   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01413         count = count + 1
0782   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0783   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0784   0808           01410         movf ADC_DATAPORT, W            ;Sample
0785   0080           01411         movwf INDF                      ;Save to QUEUE
0786   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01413         count = count + 1
0787   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0788   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0789   0808           01410         movf ADC_DATAPORT, W            ;Sample
078A   0080           01411         movwf INDF                      ;Save to QUEUE
078B   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01413         count = count + 1
078C   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
078D   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
078E   0808           01410         movf ADC_DATAPORT, W            ;Sample
078F   0080           01411         movwf INDF                      ;Save to QUEUE
0790   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01413         count = count + 1
0791   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0792   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0793   0808           01410         movf ADC_DATAPORT, W            ;Sample
0794   0080           01411         movwf INDF                      ;Save to QUEUE
0795   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01413         count = count + 1
0796   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0797   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0798   0808           01410         movf ADC_DATAPORT, W            ;Sample
0799   0080           01411         movwf INDF                      ;Save to QUEUE
079A   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01413         count = count + 1
079B   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
079C   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
079D   0808           01410         movf ADC_DATAPORT, W            ;Sample
079E   0080           01411         movwf INDF                      ;Save to QUEUE
079F   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01413         count = count + 1
07A0   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A1   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A2   0808           01410         movf ADC_DATAPORT, W            ;Sample
07A3   0080           01411         movwf INDF                      ;Save to QUEUE
07A4   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01413         count = count + 1
07A5   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A6   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A7   0808           01410         movf ADC_DATAPORT, W            ;Sample
07A8   0080           01411         movwf INDF                      ;Save to QUEUE
07A9   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000039            01413         count = count + 1
07AA   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07AB   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07AC   0808           01410         movf ADC_DATAPORT, W            ;Sample
07AD   0080           01411         movwf INDF                      ;Save to QUEUE
07AE   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01413         count = count + 1
07AF   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07B0   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07B1   0808           01410         movf ADC_DATAPORT, W            ;Sample
07B2   0080           01411         movwf INDF                      ;Save to QUEUE
07B3   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01413         count = count + 1
07B4   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07B5   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07B6   0808           01410         movf ADC_DATAPORT, W            ;Sample
07B7   0080           01411         movwf INDF                      ;Save to QUEUE
07B8   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01413         count = count + 1
07B9   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07BA   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07BB   0808           01410         movf ADC_DATAPORT, W            ;Sample
07BC   0080           01411         movwf INDF                      ;Save to QUEUE
07BD   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01413         count = count + 1
07BE   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07BF   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C0   0808           01410         movf ADC_DATAPORT, W            ;Sample
07C1   0080           01411         movwf INDF                      ;Save to QUEUE
07C2   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003E            01413         count = count + 1
07C3   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C4   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C5   0808           01410         movf ADC_DATAPORT, W            ;Sample
07C6   0080           01411         movwf INDF                      ;Save to QUEUE
07C7   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01413         count = count + 1
07C8   1409           01408         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C9   1009           01409         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07CA   0808           01410         movf ADC_DATAPORT, W            ;Sample
07CB   0080           01411         movwf INDF                      ;Save to QUEUE
07CC   0A84           01412         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01413         count = count + 1
                      01414         endw
07CD   1409           01415     bsf ADC_CONTROLPORT, RDD
07CE   1009           01416     bcf ADC_CONTROLPORT, RDD
07CF   0808           01417     movf ADC_DATAPORT, W            ;Sample
07D0   0080           01418     movwf INDF
07D1   1384           01419     bcf FSR, 7                                                  ;goto bank 3
  00000001            01420     count = 1
                      01421     while count < D'14'
07D2   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D3   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07D4   0808           01424             movf ADC_DATAPORT, W
07D5   0080           01425         movwf INDF                      ;Save to QUEUE
07D6   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01427         count = count + 1
07D7   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D8   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07D9   0808           01424             movf ADC_DATAPORT, W
07DA   0080           01425         movwf INDF                      ;Save to QUEUE
07DB   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01427         count = count + 1
07DC   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07DD   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07DE   0808           01424             movf ADC_DATAPORT, W
07DF   0080           01425         movwf INDF                      ;Save to QUEUE
07E0   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01427         count = count + 1
07E1   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07E2   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E3   0808           01424             movf ADC_DATAPORT, W
07E4   0080           01425         movwf INDF                      ;Save to QUEUE
07E5   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01427         count = count + 1
07E6   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07E7   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E8   0808           01424             movf ADC_DATAPORT, W
07E9   0080           01425         movwf INDF                      ;Save to QUEUE
07EA   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01427         count = count + 1
07EB   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07EC   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07ED   0808           01424             movf ADC_DATAPORT, W
07EE   0080           01425         movwf INDF                      ;Save to QUEUE
07EF   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01427         count = count + 1
07F0   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F1   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F2   0808           01424             movf ADC_DATAPORT, W
07F3   0080           01425         movwf INDF                      ;Save to QUEUE
07F4   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01427         count = count + 1
07F5   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F6   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F7   0808           01424             movf ADC_DATAPORT, W
07F8   0080           01425         movwf INDF                      ;Save to QUEUE
07F9   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01427         count = count + 1
07FA   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07FB   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07FC   0808           01424             movf ADC_DATAPORT, W
07FD   0080           01425         movwf INDF                      ;Save to QUEUE
07FE   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01427         count = count + 1
07FF   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0800   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0801   0808           01424             movf ADC_DATAPORT, W
0802   0080           01425         movwf INDF                      ;Save to QUEUE
0803   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01427         count = count + 1
0804   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0805   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0806   0808           01424             movf ADC_DATAPORT, W
0807   0080           01425         movwf INDF                      ;Save to QUEUE
0808   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01427         count = count + 1
0809   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
080A   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
080B   0808           01424             movf ADC_DATAPORT, W
080C   0080           01425         movwf INDF                      ;Save to QUEUE
080D   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01427         count = count + 1
080E   1409           01422         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
080F   1009           01423         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0810   0808           01424             movf ADC_DATAPORT, W
0811   0080           01425         movwf INDF                      ;Save to QUEUE
0812   0384           01426         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01427         count = count + 1
                      01428         endw
0813                  01429 Sample1MhzEnd
                      01430     while count < BUFFERSIZE
0813   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0814   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0815   0808           01433             movf ADC_DATAPORT, W
0816   0080           01434         movwf INDF                      ;Save to QUEUE
0817   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01436         count = count + 1
0818   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0819   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
081A   0808           01433             movf ADC_DATAPORT, W
081B   0080           01434         movwf INDF                      ;Save to QUEUE
081C   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01436         count = count + 1
081D   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
081E   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
081F   0808           01433             movf ADC_DATAPORT, W
0820   0080           01434         movwf INDF                      ;Save to QUEUE
0821   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01436         count = count + 1
0822   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0823   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0824   0808           01433             movf ADC_DATAPORT, W
0825   0080           01434         movwf INDF                      ;Save to QUEUE
0826   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01436         count = count + 1
0827   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0828   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0829   0808           01433             movf ADC_DATAPORT, W
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

082A   0080           01434         movwf INDF                      ;Save to QUEUE
082B   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01436         count = count + 1
082C   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
082D   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
082E   0808           01433             movf ADC_DATAPORT, W
082F   0080           01434         movwf INDF                      ;Save to QUEUE
0830   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01436         count = count + 1
0831   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0832   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0833   0808           01433             movf ADC_DATAPORT, W
0834   0080           01434         movwf INDF                      ;Save to QUEUE
0835   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01436         count = count + 1
0836   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0837   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0838   0808           01433             movf ADC_DATAPORT, W
0839   0080           01434         movwf INDF                      ;Save to QUEUE
083A   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01436         count = count + 1
083B   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
083C   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
083D   0808           01433             movf ADC_DATAPORT, W
083E   0080           01434         movwf INDF                      ;Save to QUEUE
083F   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01436         count = count + 1
0840   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0841   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0842   0808           01433             movf ADC_DATAPORT, W
0843   0080           01434         movwf INDF                      ;Save to QUEUE
0844   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01436         count = count + 1
0845   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0846   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0847   0808           01433             movf ADC_DATAPORT, W
0848   0080           01434         movwf INDF                      ;Save to QUEUE
0849   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01436         count = count + 1
084A   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
084B   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
084C   0808           01433             movf ADC_DATAPORT, W
084D   0080           01434         movwf INDF                      ;Save to QUEUE
084E   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01436         count = count + 1
084F   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0850   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0851   0808           01433             movf ADC_DATAPORT, W
0852   0080           01434         movwf INDF                      ;Save to QUEUE
0853   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01436         count = count + 1
0854   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0855   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0856   0808           01433             movf ADC_DATAPORT, W
0857   0080           01434         movwf INDF                      ;Save to QUEUE
0858   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01436         count = count + 1
0859   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
085A   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
085B   0808           01433             movf ADC_DATAPORT, W
085C   0080           01434         movwf INDF                      ;Save to QUEUE
085D   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01436         count = count + 1
085E   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
085F   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0860   0808           01433             movf ADC_DATAPORT, W
0861   0080           01434         movwf INDF                      ;Save to QUEUE
0862   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01436         count = count + 1
0863   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0864   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0865   0808           01433             movf ADC_DATAPORT, W
0866   0080           01434         movwf INDF                      ;Save to QUEUE
0867   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01436         count = count + 1
0868   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0869   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
086A   0808           01433             movf ADC_DATAPORT, W
086B   0080           01434         movwf INDF                      ;Save to QUEUE
086C   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01436         count = count + 1
086D   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
086E   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
086F   0808           01433             movf ADC_DATAPORT, W
0870   0080           01434         movwf INDF                      ;Save to QUEUE
0871   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01436         count = count + 1
0872   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0873   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0874   0808           01433             movf ADC_DATAPORT, W
0875   0080           01434         movwf INDF                      ;Save to QUEUE
0876   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01436         count = count + 1
0877   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0878   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0879   0808           01433             movf ADC_DATAPORT, W
087A   0080           01434         movwf INDF                      ;Save to QUEUE
087B   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01436         count = count + 1
087C   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
087D   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
087E   0808           01433             movf ADC_DATAPORT, W
087F   0080           01434         movwf INDF                      ;Save to QUEUE
0880   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01436         count = count + 1
0881   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0882   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0883   0808           01433             movf ADC_DATAPORT, W
0884   0080           01434         movwf INDF                      ;Save to QUEUE
0885   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01436         count = count + 1
0886   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0887   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0888   0808           01433             movf ADC_DATAPORT, W
0889   0080           01434         movwf INDF                      ;Save to QUEUE
088A   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01436         count = count + 1
088B   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
088C   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
088D   0808           01433             movf ADC_DATAPORT, W
088E   0080           01434         movwf INDF                      ;Save to QUEUE
088F   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01436         count = count + 1
0890   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0891   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0892   0808           01433             movf ADC_DATAPORT, W
0893   0080           01434         movwf INDF                      ;Save to QUEUE
0894   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01436         count = count + 1
0895   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0896   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0897   0808           01433             movf ADC_DATAPORT, W
0898   0080           01434         movwf INDF                      ;Save to QUEUE
0899   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01436         count = count + 1
089A   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
089B   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
089C   0808           01433             movf ADC_DATAPORT, W
089D   0080           01434         movwf INDF                      ;Save to QUEUE
089E   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01436         count = count + 1
089F   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A0   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A1   0808           01433             movf ADC_DATAPORT, W
08A2   0080           01434         movwf INDF                      ;Save to QUEUE
08A3   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01436         count = count + 1
08A4   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A5   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A6   0808           01433             movf ADC_DATAPORT, W
08A7   0080           01434         movwf INDF                      ;Save to QUEUE
08A8   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01436         count = count + 1
08A9   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08AA   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08AB   0808           01433             movf ADC_DATAPORT, W
08AC   0080           01434         movwf INDF                      ;Save to QUEUE
08AD   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01436         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08AE   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08AF   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B0   0808           01433             movf ADC_DATAPORT, W
08B1   0080           01434         movwf INDF                      ;Save to QUEUE
08B2   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01436         count = count + 1
08B3   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B4   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B5   0808           01433             movf ADC_DATAPORT, W
08B6   0080           01434         movwf INDF                      ;Save to QUEUE
08B7   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01436         count = count + 1
08B8   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B9   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08BA   0808           01433             movf ADC_DATAPORT, W
08BB   0080           01434         movwf INDF                      ;Save to QUEUE
08BC   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01436         count = count + 1
08BD   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08BE   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08BF   0808           01433             movf ADC_DATAPORT, W
08C0   0080           01434         movwf INDF                      ;Save to QUEUE
08C1   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01436         count = count + 1
08C2   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C3   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C4   0808           01433             movf ADC_DATAPORT, W
08C5   0080           01434         movwf INDF                      ;Save to QUEUE
08C6   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01436         count = count + 1
08C7   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C8   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C9   0808           01433             movf ADC_DATAPORT, W
08CA   0080           01434         movwf INDF                      ;Save to QUEUE
08CB   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01436         count = count + 1
08CC   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08CD   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08CE   0808           01433             movf ADC_DATAPORT, W
08CF   0080           01434         movwf INDF                      ;Save to QUEUE
08D0   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01436         count = count + 1
08D1   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D2   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D3   0808           01433             movf ADC_DATAPORT, W
08D4   0080           01434         movwf INDF                      ;Save to QUEUE
08D5   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01436         count = count + 1
08D6   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D7   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D8   0808           01433             movf ADC_DATAPORT, W
08D9   0080           01434         movwf INDF                      ;Save to QUEUE
08DA   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000036            01436         count = count + 1
08DB   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08DC   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08DD   0808           01433             movf ADC_DATAPORT, W
08DE   0080           01434         movwf INDF                      ;Save to QUEUE
08DF   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01436         count = count + 1
08E0   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E1   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E2   0808           01433             movf ADC_DATAPORT, W
08E3   0080           01434         movwf INDF                      ;Save to QUEUE
08E4   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01436         count = count + 1
08E5   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E6   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E7   0808           01433             movf ADC_DATAPORT, W
08E8   0080           01434         movwf INDF                      ;Save to QUEUE
08E9   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01436         count = count + 1
08EA   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08EB   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08EC   0808           01433             movf ADC_DATAPORT, W
08ED   0080           01434         movwf INDF                      ;Save to QUEUE
08EE   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01436         count = count + 1
08EF   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08F0   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08F1   0808           01433             movf ADC_DATAPORT, W
08F2   0080           01434         movwf INDF                      ;Save to QUEUE
08F3   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01436         count = count + 1
08F4   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08F5   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08F6   0808           01433             movf ADC_DATAPORT, W
08F7   0080           01434         movwf INDF                      ;Save to QUEUE
08F8   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01436         count = count + 1
08F9   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08FA   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08FB   0808           01433             movf ADC_DATAPORT, W
08FC   0080           01434         movwf INDF                      ;Save to QUEUE
08FD   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01436         count = count + 1
08FE   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08FF   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0900   0808           01433             movf ADC_DATAPORT, W
0901   0080           01434         movwf INDF                      ;Save to QUEUE
0902   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01436         count = count + 1
0903   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0904   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0905   0808           01433             movf ADC_DATAPORT, W
0906   0080           01434         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0907   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01436         count = count + 1
0908   1409           01431         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0909   1009           01432         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
090A   0808           01433             movf ADC_DATAPORT, W
090B   0080           01434         movwf INDF                      ;Save to QUEUE
090C   0384           01435         decf FSR, F                     ;Increment QUEUE pointer
  00000040            01436         count = count + 1
                      01437         endw
090D   1409           01438     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
090E   0808           01439     movf ADC_DATAPORT, W                ;Sample
090F   118A           01440     bcf PCLATH, 3                                               ;insure correct program memory page
0910   120A           01441     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
0911   298E           01442     goto ADCShutdown
                      01443 
                      01444 ;Fastest XY sample
                      01445 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      01446 ;Sampling rate =  83.333 kHz with 4 MHz clock
0912                  01447 SampleXY417k
0912   1009           01448     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0913   1489           01449     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01450     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0914   3020               M     movlw BUFFERMIN
0915   0084               M     movwf FSR
0916   0808           01451     movf ADC_DATAPORT, W            ;Sample X
0917   1409           01452         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0918   1009           01453         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0919   1089           01454     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
091A   0080           01455     movwf INDF                      ;Save to QUEUE
091B   0A84           01456     incf FSR, F                     ;Increment QUEUE pointer
  00000001            01457     count = 1
                      01458     while count < BUFFERSIZE / 2
091C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
091D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
091E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
091F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0920   0080           01463                 movwf INDF                      ;Save to QUEUE
0921   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0922   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0923   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0924   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0925   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0926   0080           01469                 movwf INDF                      ;Save to QUEUE
0927   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01471                 count = count + 1
0928   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0929   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
092A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
092B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
092C   0080           01463                 movwf INDF                      ;Save to QUEUE
092D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
092E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

092F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0930   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0931   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0932   0080           01469                 movwf INDF                      ;Save to QUEUE
0933   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01471                 count = count + 1
0934   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0935   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0936   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0937   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0938   0080           01463                 movwf INDF                      ;Save to QUEUE
0939   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
093A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
093B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
093C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
093D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
093E   0080           01469                 movwf INDF                      ;Save to QUEUE
093F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01471                 count = count + 1
0940   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0941   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0942   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0943   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0944   0080           01463                 movwf INDF                      ;Save to QUEUE
0945   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0946   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0947   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0948   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0949   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
094A   0080           01469                 movwf INDF                      ;Save to QUEUE
094B   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01471                 count = count + 1
094C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
094D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
094E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
094F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0950   0080           01463                 movwf INDF                      ;Save to QUEUE
0951   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0952   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0953   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0954   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0955   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0956   0080           01469                 movwf INDF                      ;Save to QUEUE
0957   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01471                 count = count + 1
0958   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0959   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
095A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
095B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
095C   0080           01463                 movwf INDF                      ;Save to QUEUE
095D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
095E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
095F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0960   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0961   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0962   0080           01469                 movwf INDF                      ;Save to QUEUE
0963   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01471                 count = count + 1
0964   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0965   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0966   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0967   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0968   0080           01463                 movwf INDF                      ;Save to QUEUE
0969   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
096A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
096B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
096C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
096D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
096E   0080           01469                 movwf INDF                      ;Save to QUEUE
096F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01471                 count = count + 1
0970   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0971   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0972   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0973   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0974   0080           01463                 movwf INDF                      ;Save to QUEUE
0975   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0976   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0977   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0978   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0979   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
097A   0080           01469                 movwf INDF                      ;Save to QUEUE
097B   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01471                 count = count + 1
097C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
097D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
097E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
097F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0980   0080           01463                 movwf INDF                      ;Save to QUEUE
0981   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0982   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0983   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0984   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0985   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0986   0080           01469                 movwf INDF                      ;Save to QUEUE
0987   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01471                 count = count + 1
0988   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0989   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
098A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
098B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
098C   0080           01463                 movwf INDF                      ;Save to QUEUE
098D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
098E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
098F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0990   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0991   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0992   0080           01469                 movwf INDF                      ;Save to QUEUE
0993   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01471                 count = count + 1
0994   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0995   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0996   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0997   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0998   0080           01463                 movwf INDF                      ;Save to QUEUE
0999   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
099A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
099B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
099C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
099D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
099E   0080           01469                 movwf INDF                      ;Save to QUEUE
099F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01471                 count = count + 1
09A0   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09A1   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09A2   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09A3   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09A4   0080           01463                 movwf INDF                      ;Save to QUEUE
09A5   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09A6   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09A7   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09A8   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09A9   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09AA   0080           01469                 movwf INDF                      ;Save to QUEUE
09AB   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01471                 count = count + 1
09AC   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09AD   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09AE   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09AF   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09B0   0080           01463                 movwf INDF                      ;Save to QUEUE
09B1   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09B2   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09B3   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09B4   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09B5   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09B6   0080           01469                 movwf INDF                      ;Save to QUEUE
09B7   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01471                 count = count + 1
09B8   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09B9   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09BA   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09BB   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09BC   0080           01463                 movwf INDF                      ;Save to QUEUE
09BD   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09BE   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09BF   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09C0   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09C1   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09C2   0080           01469                 movwf INDF                      ;Save to QUEUE
09C3   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01471                 count = count + 1
09C4   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09C5   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09C6   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09C7   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09C8   0080           01463                 movwf INDF                      ;Save to QUEUE
09C9   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09CA   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09CB   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09CC   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09CD   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09CE   0080           01469                 movwf INDF                      ;Save to QUEUE
09CF   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01471                 count = count + 1
09D0   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09D1   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09D2   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09D3   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09D4   0080           01463                 movwf INDF                      ;Save to QUEUE
09D5   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09D6   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09D7   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09D8   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09D9   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09DA   0080           01469                 movwf INDF                      ;Save to QUEUE
09DB   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01471                 count = count + 1
09DC   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09DD   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09DE   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09DF   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09E0   0080           01463                 movwf INDF                      ;Save to QUEUE
09E1   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09E2   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09E3   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09E4   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09E5   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09E6   0080           01469                 movwf INDF                      ;Save to QUEUE
09E7   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01471                 count = count + 1
09E8   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09E9   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09EA   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09EB   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09EC   0080           01463                 movwf INDF                      ;Save to QUEUE
09ED   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09EE   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09EF   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09F0   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09F1   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09F2   0080           01469                 movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09F3   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01471                 count = count + 1
09F4   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
09F5   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09F6   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09F7   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09F8   0080           01463                 movwf INDF                      ;Save to QUEUE
09F9   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
09FA   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
09FB   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09FC   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09FD   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09FE   0080           01469                 movwf INDF                      ;Save to QUEUE
09FF   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01471                 count = count + 1
0A00   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A01   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A02   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A03   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A04   0080           01463                 movwf INDF                      ;Save to QUEUE
0A05   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A06   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A07   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A08   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A09   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A0A   0080           01469                 movwf INDF                      ;Save to QUEUE
0A0B   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01471                 count = count + 1
0A0C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A0D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A0E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A0F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A10   0080           01463                 movwf INDF                      ;Save to QUEUE
0A11   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A12   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A13   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A14   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A15   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A16   0080           01469                 movwf INDF                      ;Save to QUEUE
0A17   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01471                 count = count + 1
0A18   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A19   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A1A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A1B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A1C   0080           01463                 movwf INDF                      ;Save to QUEUE
0A1D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A1E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A1F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A20   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A21   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A22   0080           01469                 movwf INDF                      ;Save to QUEUE
0A23   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000017            01471                 count = count + 1
0A24   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A25   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A26   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A27   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A28   0080           01463                 movwf INDF                      ;Save to QUEUE
0A29   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A2A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A2B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A2C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A2D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A2E   0080           01469                 movwf INDF                      ;Save to QUEUE
0A2F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01471                 count = count + 1
0A30   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A31   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A32   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A33   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A34   0080           01463                 movwf INDF                      ;Save to QUEUE
0A35   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A36   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A37   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A38   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A39   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A3A   0080           01469                 movwf INDF                      ;Save to QUEUE
0A3B   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01471                 count = count + 1
0A3C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A3D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A3E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A3F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A40   0080           01463                 movwf INDF                      ;Save to QUEUE
0A41   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A42   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A43   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A44   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A45   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A46   0080           01469                 movwf INDF                      ;Save to QUEUE
0A47   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01471                 count = count + 1
0A48   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A49   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A4A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A4B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A4C   0080           01463                 movwf INDF                      ;Save to QUEUE
0A4D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A4E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A4F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A50   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A51   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A52   0080           01469                 movwf INDF                      ;Save to QUEUE
0A53   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01471                 count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A54   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A55   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A56   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A57   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A58   0080           01463                 movwf INDF                      ;Save to QUEUE
0A59   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A5A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A5B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A5C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A5D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A5E   0080           01469                 movwf INDF                      ;Save to QUEUE
0A5F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01471                 count = count + 1
0A60   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A61   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A62   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A63   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A64   0080           01463                 movwf INDF                      ;Save to QUEUE
0A65   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A66   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A67   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A68   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A69   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A6A   0080           01469                 movwf INDF                      ;Save to QUEUE
0A6B   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01471                 count = count + 1
0A6C   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A6D   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A6E   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A6F   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A70   0080           01463                 movwf INDF                      ;Save to QUEUE
0A71   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A72   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A73   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A74   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A75   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A76   0080           01469                 movwf INDF                      ;Save to QUEUE
0A77   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01471                 count = count + 1
0A78   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
0A79   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A7A   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A7B   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A7C   0080           01463                 movwf INDF                      ;Save to QUEUE
0A7D   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A7E   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A7F   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A80   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A81   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A82   0080           01469                 movwf INDF                      ;Save to QUEUE
0A83   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01471                 count = count + 1
0A84   0808           01459                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A85   1409           01460                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A86   1009           01461                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A87   1489           01462                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A88   0080           01463                 movwf INDF                      ;Save to QUEUE
0A89   0A84           01464                 incf FSR, F                     ;Increment QUEUE pointer
0A8A   0808           01465                 movf ADC_DATAPORT, W            ;Sample X
0A8B   1409           01466                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A8C   1009           01467                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A8D   1089           01468                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A8E   0080           01469                 movwf INDF                      ;Save to QUEUE
0A8F   0A84           01470                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01471                 count = count + 1
                      01472         endw
0A90   0808           01473     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
0A91   1409           01474     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A92   1009           01475         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A93   1489           01476         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A94   0080           01477     movwf INDF                      ;Save to QUEUE
0A95   1784           01478         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0A96   0808           01479     movf ADC_DATAPORT, W            ;Sample X
0A97   1409           01480         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A98   1009           01481         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A99   1089           01482         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A9A   0080           01483     movwf INDF                      ;Save to QUEUE
0A9B   0384           01484         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01485     count = 1
                      01486     while count < BUFFERSIZE / 2
0A9C   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0A9D   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A9E   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A9F   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AA0   0080           01491                 movwf INDF                      ;Save to QUEUE
0AA1   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AA2   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AA3   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AA4   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AA5   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AA6   0080           01497                 movwf INDF                      ;Save to QUEUE
0AA7   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01499                 count = count + 1
0AA8   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AA9   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AAA   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AAB   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AAC   0080           01491                 movwf INDF                      ;Save to QUEUE
0AAD   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AAE   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AAF   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AB0   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AB1   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AB2   0080           01497                 movwf INDF                      ;Save to QUEUE
0AB3   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01499                 count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AB4   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AB5   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AB6   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AB7   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AB8   0080           01491                 movwf INDF                      ;Save to QUEUE
0AB9   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0ABA   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0ABB   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ABC   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ABD   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ABE   0080           01497                 movwf INDF                      ;Save to QUEUE
0ABF   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01499                 count = count + 1
0AC0   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AC1   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AC2   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AC3   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AC4   0080           01491                 movwf INDF                      ;Save to QUEUE
0AC5   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AC6   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AC7   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AC8   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AC9   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ACA   0080           01497                 movwf INDF                      ;Save to QUEUE
0ACB   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01499                 count = count + 1
0ACC   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0ACD   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ACE   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ACF   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AD0   0080           01491                 movwf INDF                      ;Save to QUEUE
0AD1   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AD2   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AD3   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AD4   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AD5   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AD6   0080           01497                 movwf INDF                      ;Save to QUEUE
0AD7   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01499                 count = count + 1
0AD8   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AD9   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ADA   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ADB   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ADC   0080           01491                 movwf INDF                      ;Save to QUEUE
0ADD   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0ADE   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0ADF   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AE0   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AE1   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AE2   0080           01497                 movwf INDF                      ;Save to QUEUE
0AE3   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01499                 count = count + 1
0AE4   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AE5   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AE6   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AE7   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AE8   0080           01491                 movwf INDF                      ;Save to QUEUE
0AE9   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AEA   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AEB   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AEC   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AED   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AEE   0080           01497                 movwf INDF                      ;Save to QUEUE
0AEF   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01499                 count = count + 1
0AF0   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AF1   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AF2   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AF3   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AF4   0080           01491                 movwf INDF                      ;Save to QUEUE
0AF5   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0AF6   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0AF7   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AF8   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AF9   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AFA   0080           01497                 movwf INDF                      ;Save to QUEUE
0AFB   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01499                 count = count + 1
0AFC   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0AFD   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AFE   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AFF   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B00   0080           01491                 movwf INDF                      ;Save to QUEUE
0B01   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B02   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B03   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B04   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B05   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B06   0080           01497                 movwf INDF                      ;Save to QUEUE
0B07   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01499                 count = count + 1
0B08   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B09   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B0A   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B0B   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B0C   0080           01491                 movwf INDF                      ;Save to QUEUE
0B0D   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B0E   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B0F   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B10   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B11   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B12   0080           01497                 movwf INDF                      ;Save to QUEUE
0B13   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01499                 count = count + 1
0B14   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B15   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B16   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B17   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B18   0080           01491                 movwf INDF                      ;Save to QUEUE
0B19   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B1A   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B1B   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B1C   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B1D   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B1E   0080           01497                 movwf INDF                      ;Save to QUEUE
0B1F   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01499                 count = count + 1
0B20   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B21   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B22   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B23   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B24   0080           01491                 movwf INDF                      ;Save to QUEUE
0B25   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B26   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B27   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B28   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B29   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B2A   0080           01497                 movwf INDF                      ;Save to QUEUE
0B2B   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01499                 count = count + 1
0B2C   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B2D   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B2E   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B2F   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B30   0080           01491                 movwf INDF                      ;Save to QUEUE
0B31   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B32   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B33   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B34   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B35   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B36   0080           01497                 movwf INDF                      ;Save to QUEUE
0B37   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01499                 count = count + 1
0B38   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B39   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B3A   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B3B   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B3C   0080           01491                 movwf INDF                      ;Save to QUEUE
0B3D   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B3E   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B3F   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B40   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B41   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B42   0080           01497                 movwf INDF                      ;Save to QUEUE
0B43   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01499                 count = count + 1
0B44   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B45   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B46   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B47   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B48   0080           01491                 movwf INDF                      ;Save to QUEUE
0B49   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B4A   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B4B   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B4C   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B4D   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B4E   0080           01497                 movwf INDF                      ;Save to QUEUE
0B4F   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01499                 count = count + 1
0B50   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B51   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B52   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B53   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B54   0080           01491                 movwf INDF                      ;Save to QUEUE
0B55   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B56   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B57   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B58   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B59   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B5A   0080           01497                 movwf INDF                      ;Save to QUEUE
0B5B   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01499                 count = count + 1
0B5C   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B5D   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B5E   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B5F   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B60   0080           01491                 movwf INDF                      ;Save to QUEUE
0B61   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B62   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B63   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B64   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B65   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B66   0080           01497                 movwf INDF                      ;Save to QUEUE
0B67   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01499                 count = count + 1
0B68   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B69   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B6A   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B6B   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B6C   0080           01491                 movwf INDF                      ;Save to QUEUE
0B6D   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B6E   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B6F   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B70   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B71   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B72   0080           01497                 movwf INDF                      ;Save to QUEUE
0B73   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01499                 count = count + 1
0B74   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B75   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B76   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B77   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B78   0080           01491                 movwf INDF                      ;Save to QUEUE
0B79   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B7A   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B7B   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B7C   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B7D   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B7E   0080           01497                 movwf INDF                      ;Save to QUEUE
0B7F   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01499                 count = count + 1
0B80   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B81   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B82   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B83   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B84   0080           01491                 movwf INDF                      ;Save to QUEUE
0B85   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B86   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B87   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B88   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B89   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B8A   0080           01497                 movwf INDF                      ;Save to QUEUE
0B8B   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01499                 count = count + 1
0B8C   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B8D   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B8E   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B8F   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B90   0080           01491                 movwf INDF                      ;Save to QUEUE
0B91   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B92   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B93   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B94   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B95   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B96   0080           01497                 movwf INDF                      ;Save to QUEUE
0B97   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01499                 count = count + 1
0B98   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0B99   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B9A   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B9B   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B9C   0080           01491                 movwf INDF                      ;Save to QUEUE
0B9D   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0B9E   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0B9F   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BA0   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BA1   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BA2   0080           01497                 movwf INDF                      ;Save to QUEUE
0BA3   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01499                 count = count + 1
0BA4   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BA5   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BA6   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BA7   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BA8   0080           01491                 movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BA9   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BAA   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BAB   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BAC   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BAD   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BAE   0080           01497                 movwf INDF                      ;Save to QUEUE
0BAF   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01499                 count = count + 1
0BB0   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BB1   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BB2   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BB3   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BB4   0080           01491                 movwf INDF                      ;Save to QUEUE
0BB5   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BB6   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BB7   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BB8   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BB9   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BBA   0080           01497                 movwf INDF                      ;Save to QUEUE
0BBB   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01499                 count = count + 1
0BBC   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BBD   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BBE   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BBF   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BC0   0080           01491                 movwf INDF                      ;Save to QUEUE
0BC1   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BC2   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BC3   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BC4   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BC5   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BC6   0080           01497                 movwf INDF                      ;Save to QUEUE
0BC7   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01499                 count = count + 1
0BC8   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BC9   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BCA   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BCB   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BCC   0080           01491                 movwf INDF                      ;Save to QUEUE
0BCD   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BCE   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BCF   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BD0   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BD1   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BD2   0080           01497                 movwf INDF                      ;Save to QUEUE
0BD3   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01499                 count = count + 1
0BD4   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BD5   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BD6   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BD7   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BD8   0080           01491                 movwf INDF                      ;Save to QUEUE
0BD9   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BDA   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BDB   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BDC   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BDD   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BDE   0080           01497                 movwf INDF                      ;Save to QUEUE
0BDF   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01499                 count = count + 1
0BE0   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BE1   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BE2   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BE3   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BE4   0080           01491                 movwf INDF                      ;Save to QUEUE
0BE5   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BE6   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BE7   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BE8   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BE9   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BEA   0080           01497                 movwf INDF                      ;Save to QUEUE
0BEB   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01499                 count = count + 1
0BEC   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BED   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BEE   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BEF   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BF0   0080           01491                 movwf INDF                      ;Save to QUEUE
0BF1   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BF2   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BF3   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BF4   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BF5   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BF6   0080           01497                 movwf INDF                      ;Save to QUEUE
0BF7   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01499                 count = count + 1
0BF8   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0BF9   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BFA   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BFB   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BFC   0080           01491                 movwf INDF                      ;Save to QUEUE
0BFD   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0BFE   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
0BFF   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C00   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C01   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C02   0080           01497                 movwf INDF                      ;Save to QUEUE
0C03   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01499                 count = count + 1
0C04   0808           01487                 movf ADC_DATAPORT, W            ;Sample Y
0C05   1409           01488                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C06   1009           01489                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C07   1489           01490                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C08   0080           01491                 movwf INDF                      ;Save to QUEUE
0C09   0384           01492                 decf FSR, F                     ;Increment QUEUE pointer
0C0A   0808           01493                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C0B   1409           01494                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C0C   1009           01495                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C0D   1089           01496                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C0E   0080           01497                 movwf INDF                      ;Save to QUEUE
0C0F   0384           01498                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01499                 count = count + 1
                      01500         endw
0C10   0808           01501     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
0C11   1409           01502     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C12   1009           01503         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C13   1489           01504         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C14   0080           01505     movwf INDF                      ;Save to QUEUE
0C15   1783           01506         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
0C16   0808           01507     movf ADC_DATAPORT, W            ;Sample X
0C17   1409           01508         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C18   1009           01509         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C19   1089           01510         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C1A   0080           01511     movwf INDF                      ;Save to QUEUE
0C1B   0A84           01512         incf FSR, f                                             ;Increment QUEUE pointer
  00000001            01513     count = 1
                      01514     while count < BUFFERSIZE / 2
0C1C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C1D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C1E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C1F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C20   0080           01519                 movwf INDF                      ;Save to QUEUE
0C21   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C22   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C23   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C24   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C25   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C26   0080           01525                 movwf INDF                      ;Save to QUEUE
0C27   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01527                 count = count + 1
0C28   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C29   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C2A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C2B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C2C   0080           01519                 movwf INDF                      ;Save to QUEUE
0C2D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C2E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C2F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C30   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C31   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C32   0080           01525                 movwf INDF                      ;Save to QUEUE
0C33   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01527                 count = count + 1
0C34   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C35   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C36   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C37   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C38   0080           01519                 movwf INDF                      ;Save to QUEUE
0C39   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C3A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C3B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C3C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C3D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C3E   0080           01525                 movwf INDF                      ;Save to QUEUE
0C3F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01527                 count = count + 1
0C40   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C41   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C42   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C43   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C44   0080           01519                 movwf INDF                      ;Save to QUEUE
0C45   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C46   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C47   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C48   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C49   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C4A   0080           01525                 movwf INDF                      ;Save to QUEUE
0C4B   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01527                 count = count + 1
0C4C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C4D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C4E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C4F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C50   0080           01519                 movwf INDF                      ;Save to QUEUE
0C51   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C52   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C53   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C54   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C55   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C56   0080           01525                 movwf INDF                      ;Save to QUEUE
0C57   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01527                 count = count + 1
0C58   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C59   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C5A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C5B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C5C   0080           01519                 movwf INDF                      ;Save to QUEUE
0C5D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C5E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C5F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C60   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C61   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C62   0080           01525                 movwf INDF                      ;Save to QUEUE
0C63   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01527                 count = count + 1
0C64   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C65   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C66   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C67   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C68   0080           01519                 movwf INDF                      ;Save to QUEUE
0C69   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C6A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C6B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C6C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C6D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C6E   0080           01525                 movwf INDF                      ;Save to QUEUE
0C6F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01527                 count = count + 1
0C70   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C71   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C72   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C73   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C74   0080           01519                 movwf INDF                      ;Save to QUEUE
0C75   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C76   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C77   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C78   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C79   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C7A   0080           01525                 movwf INDF                      ;Save to QUEUE
0C7B   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01527                 count = count + 1
0C7C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C7D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C7E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C7F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C80   0080           01519                 movwf INDF                      ;Save to QUEUE
0C81   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C82   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C83   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C84   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C85   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C86   0080           01525                 movwf INDF                      ;Save to QUEUE
0C87   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01527                 count = count + 1
0C88   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C89   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C8A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C8B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C8C   0080           01519                 movwf INDF                      ;Save to QUEUE
0C8D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C8E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C8F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C90   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C91   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C92   0080           01525                 movwf INDF                      ;Save to QUEUE
0C93   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01527                 count = count + 1
0C94   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0C95   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C96   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C97   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C98   0080           01519                 movwf INDF                      ;Save to QUEUE
0C99   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0C9A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0C9B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C9C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C9D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C9E   0080           01525                 movwf INDF                      ;Save to QUEUE
0C9F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01527                 count = count + 1
0CA0   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CA1   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CA2   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CA3   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CA4   0080           01519                 movwf INDF                      ;Save to QUEUE
0CA5   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CA6   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CA7   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CA8   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CA9   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CAA   0080           01525                 movwf INDF                      ;Save to QUEUE
0CAB   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01527                 count = count + 1
0CAC   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CAD   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CAE   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CAF   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CB0   0080           01519                 movwf INDF                      ;Save to QUEUE
0CB1   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CB2   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CB3   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CB4   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CB5   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CB6   0080           01525                 movwf INDF                      ;Save to QUEUE
0CB7   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01527                 count = count + 1
0CB8   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CB9   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CBA   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CBB   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CBC   0080           01519                 movwf INDF                      ;Save to QUEUE
0CBD   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CBE   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CBF   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CC0   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CC1   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CC2   0080           01525                 movwf INDF                      ;Save to QUEUE
0CC3   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01527                 count = count + 1
0CC4   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CC5   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CC6   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CC7   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CC8   0080           01519                 movwf INDF                      ;Save to QUEUE
0CC9   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CCA   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CCB   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CCC   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CCD   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CCE   0080           01525                 movwf INDF                      ;Save to QUEUE
0CCF   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01527                 count = count + 1
0CD0   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CD1   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CD2   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CD3   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CD4   0080           01519                 movwf INDF                      ;Save to QUEUE
0CD5   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CD6   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CD7   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CD8   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CD9   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CDA   0080           01525                 movwf INDF                      ;Save to QUEUE
0CDB   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01527                 count = count + 1
0CDC   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CDD   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CDE   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CDF   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CE0   0080           01519                 movwf INDF                      ;Save to QUEUE
0CE1   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CE2   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CE3   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CE4   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CE5   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CE6   0080           01525                 movwf INDF                      ;Save to QUEUE
0CE7   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01527                 count = count + 1
0CE8   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CE9   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CEA   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CEB   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CEC   0080           01519                 movwf INDF                      ;Save to QUEUE
0CED   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CEE   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CEF   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CF0   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CF1   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CF2   0080           01525                 movwf INDF                      ;Save to QUEUE
0CF3   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01527                 count = count + 1
0CF4   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0CF5   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CF6   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CF7   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CF8   0080           01519                 movwf INDF                      ;Save to QUEUE
0CF9   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0CFA   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0CFB   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CFC   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CFD   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CFE   0080           01525                 movwf INDF                      ;Save to QUEUE
0CFF   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01527                 count = count + 1
0D00   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D01   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D02   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D03   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D04   0080           01519                 movwf INDF                      ;Save to QUEUE
0D05   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D06   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D07   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D08   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D09   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D0A   0080           01525                 movwf INDF                      ;Save to QUEUE
0D0B   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01527                 count = count + 1
0D0C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D0D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D0E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D0F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D10   0080           01519                 movwf INDF                      ;Save to QUEUE
0D11   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D12   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D13   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D14   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D15   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D16   0080           01525                 movwf INDF                      ;Save to QUEUE
0D17   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01527                 count = count + 1
0D18   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D19   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D1A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D1B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D1C   0080           01519                 movwf INDF                      ;Save to QUEUE
0D1D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D1E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D1F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D20   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D21   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D22   0080           01525                 movwf INDF                      ;Save to QUEUE
0D23   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01527                 count = count + 1
0D24   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D25   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D26   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D27   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D28   0080           01519                 movwf INDF                      ;Save to QUEUE
0D29   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D2A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D2B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D2C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D2D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D2E   0080           01525                 movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D2F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01527                 count = count + 1
0D30   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D31   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D32   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D33   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D34   0080           01519                 movwf INDF                      ;Save to QUEUE
0D35   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D36   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D37   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D38   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D39   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D3A   0080           01525                 movwf INDF                      ;Save to QUEUE
0D3B   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01527                 count = count + 1
0D3C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D3D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D3E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D3F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D40   0080           01519                 movwf INDF                      ;Save to QUEUE
0D41   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D42   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D43   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D44   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D45   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D46   0080           01525                 movwf INDF                      ;Save to QUEUE
0D47   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01527                 count = count + 1
0D48   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D49   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D4A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D4B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D4C   0080           01519                 movwf INDF                      ;Save to QUEUE
0D4D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D4E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D4F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D50   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D51   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D52   0080           01525                 movwf INDF                      ;Save to QUEUE
0D53   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01527                 count = count + 1
0D54   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D55   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D56   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D57   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D58   0080           01519                 movwf INDF                      ;Save to QUEUE
0D59   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D5A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D5B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D5C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D5D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D5E   0080           01525                 movwf INDF                      ;Save to QUEUE
0D5F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001C            01527                 count = count + 1
0D60   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D61   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D62   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D63   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D64   0080           01519                 movwf INDF                      ;Save to QUEUE
0D65   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D66   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D67   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D68   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D69   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D6A   0080           01525                 movwf INDF                      ;Save to QUEUE
0D6B   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01527                 count = count + 1
0D6C   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D6D   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D6E   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D6F   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D70   0080           01519                 movwf INDF                      ;Save to QUEUE
0D71   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D72   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D73   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D74   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D75   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D76   0080           01525                 movwf INDF                      ;Save to QUEUE
0D77   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01527                 count = count + 1
0D78   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D79   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D7A   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D7B   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D7C   0080           01519                 movwf INDF                      ;Save to QUEUE
0D7D   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D7E   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D7F   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D80   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D81   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D82   0080           01525                 movwf INDF                      ;Save to QUEUE
0D83   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01527                 count = count + 1
0D84   0808           01515                 movf ADC_DATAPORT, W            ;Sample Y
0D85   1409           01516                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D86   1009           01517                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D87   1489           01518                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D88   0080           01519                 movwf INDF                      ;Save to QUEUE
0D89   0A84           01520                 incf FSR, F                     ;Increment QUEUE pointer
0D8A   0808           01521                 movf ADC_DATAPORT, W            ;Sample X
0D8B   1409           01522                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D8C   1009           01523                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D8D   1089           01524                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D8E   0080           01525                 movwf INDF                      ;Save to QUEUE
0D8F   0A84           01526                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01527                 count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01528         endw
0D90   0808           01529     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
0D91   1409           01530     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D92   1009           01531         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D93   1489           01532         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D94   0080           01533     movwf INDF                      ;Save to QUEUE
0D95   1384           01534         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
0D96   0808           01535     movf ADC_DATAPORT, W            ;Sample X
0D97   1409           01536         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D98   1009           01537         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D99   1089           01538         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D9A   0080           01539     movwf INDF                      ;Save to QUEUE
0D9B   0384           01540         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01541     count = 1
                      01542     while count < BUFFERSIZE / 2
0D9C   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0D9D   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D9E   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D9F   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DA0   0080           01547                 movwf INDF                      ;Save to QUEUE
0DA1   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DA2   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DA3   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DA4   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DA5   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DA6   0080           01553                 movwf INDF                      ;Save to QUEUE
0DA7   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01555                 count = count + 1
0DA8   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DA9   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DAA   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DAB   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DAC   0080           01547                 movwf INDF                      ;Save to QUEUE
0DAD   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DAE   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DAF   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DB0   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DB1   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DB2   0080           01553                 movwf INDF                      ;Save to QUEUE
0DB3   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01555                 count = count + 1
0DB4   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DB5   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DB6   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DB7   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DB8   0080           01547                 movwf INDF                      ;Save to QUEUE
0DB9   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DBA   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DBB   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DBC   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DBD   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DBE   0080           01553                 movwf INDF                      ;Save to QUEUE
0DBF   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01555                 count = count + 1
0DC0   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DC1   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DC2   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DC3   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DC4   0080           01547                 movwf INDF                      ;Save to QUEUE
0DC5   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DC6   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DC7   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DC8   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DC9   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DCA   0080           01553                 movwf INDF                      ;Save to QUEUE
0DCB   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01555                 count = count + 1
0DCC   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DCD   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DCE   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DCF   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DD0   0080           01547                 movwf INDF                      ;Save to QUEUE
0DD1   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DD2   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DD3   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DD4   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DD5   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DD6   0080           01553                 movwf INDF                      ;Save to QUEUE
0DD7   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01555                 count = count + 1
0DD8   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DD9   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DDA   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DDB   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DDC   0080           01547                 movwf INDF                      ;Save to QUEUE
0DDD   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DDE   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DDF   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DE0   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DE1   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DE2   0080           01553                 movwf INDF                      ;Save to QUEUE
0DE3   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01555                 count = count + 1
0DE4   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DE5   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DE6   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DE7   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DE8   0080           01547                 movwf INDF                      ;Save to QUEUE
0DE9   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DEA   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DEB   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DEC   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DED   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DEE   0080           01553                 movwf INDF                      ;Save to QUEUE
0DEF   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01555                 count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0DF0   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DF1   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DF2   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DF3   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DF4   0080           01547                 movwf INDF                      ;Save to QUEUE
0DF5   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0DF6   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0DF7   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DF8   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DF9   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DFA   0080           01553                 movwf INDF                      ;Save to QUEUE
0DFB   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01555                 count = count + 1
0DFC   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0DFD   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DFE   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DFF   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E00   0080           01547                 movwf INDF                      ;Save to QUEUE
0E01   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E02   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E03   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E04   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E05   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E06   0080           01553                 movwf INDF                      ;Save to QUEUE
0E07   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01555                 count = count + 1
0E08   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E09   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E0A   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E0B   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E0C   0080           01547                 movwf INDF                      ;Save to QUEUE
0E0D   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E0E   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E0F   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E10   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E11   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E12   0080           01553                 movwf INDF                      ;Save to QUEUE
0E13   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01555                 count = count + 1
0E14   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E15   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E16   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E17   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E18   0080           01547                 movwf INDF                      ;Save to QUEUE
0E19   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E1A   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E1B   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E1C   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E1D   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E1E   0080           01553                 movwf INDF                      ;Save to QUEUE
0E1F   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01555                 count = count + 1
0E20   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E21   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E22   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E23   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E24   0080           01547                 movwf INDF                      ;Save to QUEUE
0E25   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E26   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E27   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E28   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E29   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E2A   0080           01553                 movwf INDF                      ;Save to QUEUE
0E2B   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01555                 count = count + 1
0E2C   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E2D   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E2E   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E2F   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E30   0080           01547                 movwf INDF                      ;Save to QUEUE
0E31   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E32   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E33   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E34   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E35   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E36   0080           01553                 movwf INDF                      ;Save to QUEUE
0E37   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01555                 count = count + 1
0E38   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E39   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E3A   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E3B   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E3C   0080           01547                 movwf INDF                      ;Save to QUEUE
0E3D   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E3E   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E3F   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E40   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E41   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E42   0080           01553                 movwf INDF                      ;Save to QUEUE
0E43   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01555                 count = count + 1
0E44   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E45   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E46   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E47   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E48   0080           01547                 movwf INDF                      ;Save to QUEUE
0E49   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E4A   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E4B   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E4C   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E4D   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E4E   0080           01553                 movwf INDF                      ;Save to QUEUE
0E4F   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01555                 count = count + 1
0E50   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E51   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E52   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E53   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E54   0080           01547                 movwf INDF                      ;Save to QUEUE
0E55   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E56   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E57   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E58   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E59   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E5A   0080           01553                 movwf INDF                      ;Save to QUEUE
0E5B   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01555                 count = count + 1
0E5C   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E5D   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E5E   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E5F   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E60   0080           01547                 movwf INDF                      ;Save to QUEUE
0E61   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E62   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E63   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E64   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E65   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E66   0080           01553                 movwf INDF                      ;Save to QUEUE
0E67   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01555                 count = count + 1
0E68   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E69   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E6A   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E6B   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E6C   0080           01547                 movwf INDF                      ;Save to QUEUE
0E6D   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E6E   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E6F   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E70   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E71   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E72   0080           01553                 movwf INDF                      ;Save to QUEUE
0E73   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01555                 count = count + 1
0E74   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E75   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E76   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E77   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E78   0080           01547                 movwf INDF                      ;Save to QUEUE
0E79   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E7A   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E7B   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E7C   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E7D   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E7E   0080           01553                 movwf INDF                      ;Save to QUEUE
0E7F   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01555                 count = count + 1
0E80   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E81   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E82   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E83   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E84   0080           01547                 movwf INDF                      ;Save to QUEUE
0E85   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E86   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E87   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E88   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E89   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E8A   0080           01553                 movwf INDF                      ;Save to QUEUE
0E8B   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01555                 count = count + 1
0E8C   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E8D   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E8E   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E8F   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E90   0080           01547                 movwf INDF                      ;Save to QUEUE
0E91   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E92   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E93   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E94   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E95   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E96   0080           01553                 movwf INDF                      ;Save to QUEUE
0E97   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01555                 count = count + 1
0E98   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0E99   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E9A   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E9B   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E9C   0080           01547                 movwf INDF                      ;Save to QUEUE
0E9D   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0E9E   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0E9F   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA0   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EA1   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EA2   0080           01553                 movwf INDF                      ;Save to QUEUE
0EA3   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01555                 count = count + 1
0EA4   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EA5   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA6   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EA7   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EA8   0080           01547                 movwf INDF                      ;Save to QUEUE
0EA9   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EAA   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EAB   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EAC   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EAD   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EAE   0080           01553                 movwf INDF                      ;Save to QUEUE
0EAF   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01555                 count = count + 1
0EB0   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EB1   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EB2   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EB3   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EB4   0080           01547                 movwf INDF                      ;Save to QUEUE
0EB5   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EB6   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EB7   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EB8   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EB9   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EBA   0080           01553                 movwf INDF                      ;Save to QUEUE
0EBB   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01555                 count = count + 1
0EBC   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EBD   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EBE   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EBF   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EC0   0080           01547                 movwf INDF                      ;Save to QUEUE
0EC1   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EC2   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EC3   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EC4   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EC5   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EC6   0080           01553                 movwf INDF                      ;Save to QUEUE
0EC7   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01555                 count = count + 1
0EC8   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EC9   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ECA   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ECB   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ECC   0080           01547                 movwf INDF                      ;Save to QUEUE
0ECD   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0ECE   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0ECF   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED0   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ED1   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ED2   0080           01553                 movwf INDF                      ;Save to QUEUE
0ED3   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01555                 count = count + 1
0ED4   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0ED5   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED6   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ED7   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ED8   0080           01547                 movwf INDF                      ;Save to QUEUE
0ED9   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EDA   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EDB   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EDC   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EDD   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EDE   0080           01553                 movwf INDF                      ;Save to QUEUE
0EDF   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01555                 count = count + 1
0EE0   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EE1   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EE2   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EE3   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EE4   0080           01547                 movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EE5   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EE6   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EE7   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EE8   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EE9   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EEA   0080           01553                 movwf INDF                      ;Save to QUEUE
0EEB   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01555                 count = count + 1
0EEC   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EED   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EEE   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EEF   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EF0   0080           01547                 movwf INDF                      ;Save to QUEUE
0EF1   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EF2   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EF3   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EF4   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EF5   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EF6   0080           01553                 movwf INDF                      ;Save to QUEUE
0EF7   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01555                 count = count + 1
0EF8   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0EF9   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EFA   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EFB   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EFC   0080           01547                 movwf INDF                      ;Save to QUEUE
0EFD   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0EFE   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0EFF   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F00   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F01   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F02   0080           01553                 movwf INDF                      ;Save to QUEUE
0F03   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01555                 count = count + 1
0F04   0808           01543                 movf ADC_DATAPORT, W            ;Sample Y
0F05   1409           01544                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F06   1009           01545                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F07   1489           01546                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F08   0080           01547                 movwf INDF                      ;Save to QUEUE
0F09   0384           01548                 decf FSR, F                     ;Increment QUEUE pointer
0F0A   0808           01549                 movf ADC_DATAPORT, W            ;Sample X
0F0B   1409           01550                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F0C   1009           01551                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F0D   1089           01552                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F0E   0080           01553                 movwf INDF                      ;Save to QUEUE
0F0F   0384           01554                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01555                 count = count + 1
                      01556         endw
0F10   0808           01557     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
0F11   1409           01558     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F12   118A           01559     bcf PCLATH, 3                                       ;insure correct program memory page
0F13   120A           01560     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F14   298E           01561         goto ADCShutdown
                      01562         
                      01563 ;Fast sample
                      01564 ;Sampling rate = 833.333 kHz with 20 MHz clock
                      01565 ;Sampling rate = 166.667 kHz with 4 MHz clock
                      01566 ;-----------------------------------------------------------------------------
0F15                  01567 Sample833k
0F15   1009           01568     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01569     MOVLF BUFFERMIN, FSR                ;Initialize pointer
0F16   3020               M     movlw BUFFERMIN
0F17   0084               M     movwf FSR
0F18   0000           01570     nop
  0000                01571     local count
  00000001            01572     count = 1
                      01573     while count < BUFFERSIZE
0F19   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F1A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F1B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F1C   0080           01577         movwf INDF                      ;Save to QUEUE
0F1D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F1E   0000           01579         nop                             ;Wait a cycle
  00000002            01580         count = count + 1
0F1F   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F20   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F21   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F22   0080           01577         movwf INDF                      ;Save to QUEUE
0F23   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F24   0000           01579         nop                             ;Wait a cycle
  00000003            01580         count = count + 1
0F25   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F26   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F27   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F28   0080           01577         movwf INDF                      ;Save to QUEUE
0F29   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F2A   0000           01579         nop                             ;Wait a cycle
  00000004            01580         count = count + 1
0F2B   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F2C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F2D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F2E   0080           01577         movwf INDF                      ;Save to QUEUE
0F2F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F30   0000           01579         nop                             ;Wait a cycle
  00000005            01580         count = count + 1
0F31   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F32   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F33   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F34   0080           01577         movwf INDF                      ;Save to QUEUE
0F35   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F36   0000           01579         nop                             ;Wait a cycle
  00000006            01580         count = count + 1
0F37   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F38   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F39   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F3A   0080           01577         movwf INDF                      ;Save to QUEUE
0F3B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F3C   0000           01579         nop                             ;Wait a cycle
  00000007            01580         count = count + 1
0F3D   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F3E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F3F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F40   0080           01577         movwf INDF                      ;Save to QUEUE
0F41   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F42   0000           01579         nop                             ;Wait a cycle
  00000008            01580         count = count + 1
0F43   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F44   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F45   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F46   0080           01577         movwf INDF                      ;Save to QUEUE
0F47   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F48   0000           01579         nop                             ;Wait a cycle
  00000009            01580         count = count + 1
0F49   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F4A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F4B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F4C   0080           01577         movwf INDF                      ;Save to QUEUE
0F4D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F4E   0000           01579         nop                             ;Wait a cycle
  0000000A            01580         count = count + 1
0F4F   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F50   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F51   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F52   0080           01577         movwf INDF                      ;Save to QUEUE
0F53   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F54   0000           01579         nop                             ;Wait a cycle
  0000000B            01580         count = count + 1
0F55   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F56   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F57   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F58   0080           01577         movwf INDF                      ;Save to QUEUE
0F59   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F5A   0000           01579         nop                             ;Wait a cycle
  0000000C            01580         count = count + 1
0F5B   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F5C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F5D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F5E   0080           01577         movwf INDF                      ;Save to QUEUE
0F5F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F60   0000           01579         nop                             ;Wait a cycle
  0000000D            01580         count = count + 1
0F61   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F62   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F63   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F64   0080           01577         movwf INDF                      ;Save to QUEUE
0F65   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F66   0000           01579         nop                             ;Wait a cycle
  0000000E            01580         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F67   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F68   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F69   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F6A   0080           01577         movwf INDF                      ;Save to QUEUE
0F6B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F6C   0000           01579         nop                             ;Wait a cycle
  0000000F            01580         count = count + 1
0F6D   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F6E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F6F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F70   0080           01577         movwf INDF                      ;Save to QUEUE
0F71   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F72   0000           01579         nop                             ;Wait a cycle
  00000010            01580         count = count + 1
0F73   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F74   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F75   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F76   0080           01577         movwf INDF                      ;Save to QUEUE
0F77   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F78   0000           01579         nop                             ;Wait a cycle
  00000011            01580         count = count + 1
0F79   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F7A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F7B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F7C   0080           01577         movwf INDF                      ;Save to QUEUE
0F7D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F7E   0000           01579         nop                             ;Wait a cycle
  00000012            01580         count = count + 1
0F7F   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F80   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F81   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F82   0080           01577         movwf INDF                      ;Save to QUEUE
0F83   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F84   0000           01579         nop                             ;Wait a cycle
  00000013            01580         count = count + 1
0F85   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F86   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F87   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F88   0080           01577         movwf INDF                      ;Save to QUEUE
0F89   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F8A   0000           01579         nop                             ;Wait a cycle
  00000014            01580         count = count + 1
0F8B   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F8C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F8D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F8E   0080           01577         movwf INDF                      ;Save to QUEUE
0F8F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F90   0000           01579         nop                             ;Wait a cycle
  00000015            01580         count = count + 1
0F91   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F92   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F93   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F94   0080           01577         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F95   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F96   0000           01579         nop                             ;Wait a cycle
  00000016            01580         count = count + 1
0F97   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F98   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F99   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F9A   0080           01577         movwf INDF                      ;Save to QUEUE
0F9B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0F9C   0000           01579         nop                             ;Wait a cycle
  00000017            01580         count = count + 1
0F9D   0808           01574         movf ADC_DATAPORT, W            ;Sample
0F9E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F9F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA0   0080           01577         movwf INDF                      ;Save to QUEUE
0FA1   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FA2   0000           01579         nop                             ;Wait a cycle
  00000018            01580         count = count + 1
0FA3   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FA4   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FA5   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA6   0080           01577         movwf INDF                      ;Save to QUEUE
0FA7   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FA8   0000           01579         nop                             ;Wait a cycle
  00000019            01580         count = count + 1
0FA9   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FAA   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FAB   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FAC   0080           01577         movwf INDF                      ;Save to QUEUE
0FAD   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FAE   0000           01579         nop                             ;Wait a cycle
  0000001A            01580         count = count + 1
0FAF   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FB0   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB1   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB2   0080           01577         movwf INDF                      ;Save to QUEUE
0FB3   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FB4   0000           01579         nop                             ;Wait a cycle
  0000001B            01580         count = count + 1
0FB5   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FB6   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB7   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB8   0080           01577         movwf INDF                      ;Save to QUEUE
0FB9   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FBA   0000           01579         nop                             ;Wait a cycle
  0000001C            01580         count = count + 1
0FBB   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FBC   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FBD   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FBE   0080           01577         movwf INDF                      ;Save to QUEUE
0FBF   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FC0   0000           01579         nop                             ;Wait a cycle
  0000001D            01580         count = count + 1
0FC1   0808           01574         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FC2   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FC3   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FC4   0080           01577         movwf INDF                      ;Save to QUEUE
0FC5   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FC6   0000           01579         nop                             ;Wait a cycle
  0000001E            01580         count = count + 1
0FC7   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FC8   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FC9   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FCA   0080           01577         movwf INDF                      ;Save to QUEUE
0FCB   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FCC   0000           01579         nop                             ;Wait a cycle
  0000001F            01580         count = count + 1
0FCD   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FCE   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FCF   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD0   0080           01577         movwf INDF                      ;Save to QUEUE
0FD1   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FD2   0000           01579         nop                             ;Wait a cycle
  00000020            01580         count = count + 1
0FD3   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FD4   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FD5   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD6   0080           01577         movwf INDF                      ;Save to QUEUE
0FD7   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FD8   0000           01579         nop                             ;Wait a cycle
  00000021            01580         count = count + 1
0FD9   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FDA   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FDB   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FDC   0080           01577         movwf INDF                      ;Save to QUEUE
0FDD   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FDE   0000           01579         nop                             ;Wait a cycle
  00000022            01580         count = count + 1
0FDF   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FE0   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE1   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE2   0080           01577         movwf INDF                      ;Save to QUEUE
0FE3   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FE4   0000           01579         nop                             ;Wait a cycle
  00000023            01580         count = count + 1
0FE5   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FE6   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE7   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE8   0080           01577         movwf INDF                      ;Save to QUEUE
0FE9   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FEA   0000           01579         nop                             ;Wait a cycle
  00000024            01580         count = count + 1
0FEB   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FEC   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FED   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FEE   0080           01577         movwf INDF                      ;Save to QUEUE
0FEF   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FF0   0000           01579         nop                             ;Wait a cycle
  00000025            01580         count = count + 1
0FF1   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FF2   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FF3   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FF4   0080           01577         movwf INDF                      ;Save to QUEUE
0FF5   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FF6   0000           01579         nop                             ;Wait a cycle
  00000026            01580         count = count + 1
0FF7   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FF8   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FF9   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FFA   0080           01577         movwf INDF                      ;Save to QUEUE
0FFB   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
0FFC   0000           01579         nop                             ;Wait a cycle
  00000027            01580         count = count + 1
0FFD   0808           01574         movf ADC_DATAPORT, W            ;Sample
0FFE   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FFF   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1000   0080           01577         movwf INDF                      ;Save to QUEUE
1001   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1002   0000           01579         nop                             ;Wait a cycle
  00000028            01580         count = count + 1
1003   0808           01574         movf ADC_DATAPORT, W            ;Sample
1004   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1005   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1006   0080           01577         movwf INDF                      ;Save to QUEUE
1007   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1008   0000           01579         nop                             ;Wait a cycle
  00000029            01580         count = count + 1
1009   0808           01574         movf ADC_DATAPORT, W            ;Sample
100A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
100B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
100C   0080           01577         movwf INDF                      ;Save to QUEUE
100D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
100E   0000           01579         nop                             ;Wait a cycle
  0000002A            01580         count = count + 1
100F   0808           01574         movf ADC_DATAPORT, W            ;Sample
1010   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1011   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1012   0080           01577         movwf INDF                      ;Save to QUEUE
1013   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1014   0000           01579         nop                             ;Wait a cycle
  0000002B            01580         count = count + 1
1015   0808           01574         movf ADC_DATAPORT, W            ;Sample
1016   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1017   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1018   0080           01577         movwf INDF                      ;Save to QUEUE
1019   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
101A   0000           01579         nop                             ;Wait a cycle
  0000002C            01580         count = count + 1
101B   0808           01574         movf ADC_DATAPORT, W            ;Sample
101C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

101D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
101E   0080           01577         movwf INDF                      ;Save to QUEUE
101F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1020   0000           01579         nop                             ;Wait a cycle
  0000002D            01580         count = count + 1
1021   0808           01574         movf ADC_DATAPORT, W            ;Sample
1022   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1023   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1024   0080           01577         movwf INDF                      ;Save to QUEUE
1025   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1026   0000           01579         nop                             ;Wait a cycle
  0000002E            01580         count = count + 1
1027   0808           01574         movf ADC_DATAPORT, W            ;Sample
1028   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1029   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
102A   0080           01577         movwf INDF                      ;Save to QUEUE
102B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
102C   0000           01579         nop                             ;Wait a cycle
  0000002F            01580         count = count + 1
102D   0808           01574         movf ADC_DATAPORT, W            ;Sample
102E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
102F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1030   0080           01577         movwf INDF                      ;Save to QUEUE
1031   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1032   0000           01579         nop                             ;Wait a cycle
  00000030            01580         count = count + 1
1033   0808           01574         movf ADC_DATAPORT, W            ;Sample
1034   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1035   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1036   0080           01577         movwf INDF                      ;Save to QUEUE
1037   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1038   0000           01579         nop                             ;Wait a cycle
  00000031            01580         count = count + 1
1039   0808           01574         movf ADC_DATAPORT, W            ;Sample
103A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
103B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
103C   0080           01577         movwf INDF                      ;Save to QUEUE
103D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
103E   0000           01579         nop                             ;Wait a cycle
  00000032            01580         count = count + 1
103F   0808           01574         movf ADC_DATAPORT, W            ;Sample
1040   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1041   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1042   0080           01577         movwf INDF                      ;Save to QUEUE
1043   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1044   0000           01579         nop                             ;Wait a cycle
  00000033            01580         count = count + 1
1045   0808           01574         movf ADC_DATAPORT, W            ;Sample
1046   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1047   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1048   0080           01577         movwf INDF                      ;Save to QUEUE
1049   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
104A   0000           01579         nop                             ;Wait a cycle
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000034            01580         count = count + 1
104B   0808           01574         movf ADC_DATAPORT, W            ;Sample
104C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
104D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
104E   0080           01577         movwf INDF                      ;Save to QUEUE
104F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1050   0000           01579         nop                             ;Wait a cycle
  00000035            01580         count = count + 1
1051   0808           01574         movf ADC_DATAPORT, W            ;Sample
1052   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1053   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1054   0080           01577         movwf INDF                      ;Save to QUEUE
1055   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1056   0000           01579         nop                             ;Wait a cycle
  00000036            01580         count = count + 1
1057   0808           01574         movf ADC_DATAPORT, W            ;Sample
1058   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1059   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
105A   0080           01577         movwf INDF                      ;Save to QUEUE
105B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
105C   0000           01579         nop                             ;Wait a cycle
  00000037            01580         count = count + 1
105D   0808           01574         movf ADC_DATAPORT, W            ;Sample
105E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
105F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1060   0080           01577         movwf INDF                      ;Save to QUEUE
1061   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1062   0000           01579         nop                             ;Wait a cycle
  00000038            01580         count = count + 1
1063   0808           01574         movf ADC_DATAPORT, W            ;Sample
1064   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1065   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1066   0080           01577         movwf INDF                      ;Save to QUEUE
1067   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1068   0000           01579         nop                             ;Wait a cycle
  00000039            01580         count = count + 1
1069   0808           01574         movf ADC_DATAPORT, W            ;Sample
106A   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
106B   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
106C   0080           01577         movwf INDF                      ;Save to QUEUE
106D   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
106E   0000           01579         nop                             ;Wait a cycle
  0000003A            01580         count = count + 1
106F   0808           01574         movf ADC_DATAPORT, W            ;Sample
1070   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1071   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1072   0080           01577         movwf INDF                      ;Save to QUEUE
1073   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1074   0000           01579         nop                             ;Wait a cycle
  0000003B            01580         count = count + 1
1075   0808           01574         movf ADC_DATAPORT, W            ;Sample
1076   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1077   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1078   0080           01577         movwf INDF                      ;Save to QUEUE
1079   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
107A   0000           01579         nop                             ;Wait a cycle
  0000003C            01580         count = count + 1
107B   0808           01574         movf ADC_DATAPORT, W            ;Sample
107C   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
107D   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
107E   0080           01577         movwf INDF                      ;Save to QUEUE
107F   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1080   0000           01579         nop                             ;Wait a cycle
  0000003D            01580         count = count + 1
1081   0808           01574         movf ADC_DATAPORT, W            ;Sample
1082   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1083   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1084   0080           01577         movwf INDF                      ;Save to QUEUE
1085   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1086   0000           01579         nop                             ;Wait a cycle
  0000003E            01580         count = count + 1
1087   0808           01574         movf ADC_DATAPORT, W            ;Sample
1088   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1089   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
108A   0080           01577         movwf INDF                      ;Save to QUEUE
108B   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
108C   0000           01579         nop                             ;Wait a cycle
  0000003F            01580         count = count + 1
108D   0808           01574         movf ADC_DATAPORT, W            ;Sample
108E   1409           01575         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
108F   1009           01576         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1090   0080           01577         movwf INDF                      ;Save to QUEUE
1091   0A84           01578         incf FSR, F                     ;Increment QUEUE pointer
1092   0000           01579         nop                             ;Wait a cycle
  00000040            01580         count = count + 1
                      01581     endw
1093   0808           01582     movf ADC_DATAPORT, W
1094   1409           01583     bsf ADC_CONTROLPORT, RDD
1095   1009           01584     bcf ADC_CONTROLPORT, RDD
1096   0080           01585     movwf INDF
1097   1784           01586     bsf FSR, 7                                                  ;goto bank 2
1098   0000           01587     nop                                     ;Wait a cycle
  00000001            01588     count = 1
                      01589     while count < BUFFERSIZE
1099   0808           01590         movf ADC_DATAPORT, W            ;Sample
109A   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
109B   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
109C   0080           01593         movwf INDF                      ;Save to QUEUE
109D   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
109E   0000           01595         nop                             ;Wait a cycle
  00000002            01596         count = count + 1
109F   0808           01590         movf ADC_DATAPORT, W            ;Sample
10A0   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A1   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A2   0080           01593         movwf INDF                      ;Save to QUEUE
10A3   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10A4   0000           01595         nop                             ;Wait a cycle
  00000003            01596         count = count + 1
10A5   0808           01590         movf ADC_DATAPORT, W            ;Sample
10A6   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A7   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A8   0080           01593         movwf INDF                      ;Save to QUEUE
10A9   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10AA   0000           01595         nop                             ;Wait a cycle
  00000004            01596         count = count + 1
10AB   0808           01590         movf ADC_DATAPORT, W            ;Sample
10AC   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10AD   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10AE   0080           01593         movwf INDF                      ;Save to QUEUE
10AF   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10B0   0000           01595         nop                             ;Wait a cycle
  00000005            01596         count = count + 1
10B1   0808           01590         movf ADC_DATAPORT, W            ;Sample
10B2   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10B3   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10B4   0080           01593         movwf INDF                      ;Save to QUEUE
10B5   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10B6   0000           01595         nop                             ;Wait a cycle
  00000006            01596         count = count + 1
10B7   0808           01590         movf ADC_DATAPORT, W            ;Sample
10B8   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10B9   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10BA   0080           01593         movwf INDF                      ;Save to QUEUE
10BB   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10BC   0000           01595         nop                             ;Wait a cycle
  00000007            01596         count = count + 1
10BD   0808           01590         movf ADC_DATAPORT, W            ;Sample
10BE   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10BF   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C0   0080           01593         movwf INDF                      ;Save to QUEUE
10C1   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10C2   0000           01595         nop                             ;Wait a cycle
  00000008            01596         count = count + 1
10C3   0808           01590         movf ADC_DATAPORT, W            ;Sample
10C4   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10C5   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C6   0080           01593         movwf INDF                      ;Save to QUEUE
10C7   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10C8   0000           01595         nop                             ;Wait a cycle
  00000009            01596         count = count + 1
10C9   0808           01590         movf ADC_DATAPORT, W            ;Sample
10CA   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10CB   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10CC   0080           01593         movwf INDF                      ;Save to QUEUE
10CD   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10CE   0000           01595         nop                             ;Wait a cycle
  0000000A            01596         count = count + 1
10CF   0808           01590         movf ADC_DATAPORT, W            ;Sample
10D0   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10D1   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D2   0080           01593         movwf INDF                      ;Save to QUEUE
10D3   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10D4   0000           01595         nop                             ;Wait a cycle
  0000000B            01596         count = count + 1
10D5   0808           01590         movf ADC_DATAPORT, W            ;Sample
10D6   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10D7   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D8   0080           01593         movwf INDF                      ;Save to QUEUE
10D9   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10DA   0000           01595         nop                             ;Wait a cycle
  0000000C            01596         count = count + 1
10DB   0808           01590         movf ADC_DATAPORT, W            ;Sample
10DC   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10DD   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10DE   0080           01593         movwf INDF                      ;Save to QUEUE
10DF   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10E0   0000           01595         nop                             ;Wait a cycle
  0000000D            01596         count = count + 1
10E1   0808           01590         movf ADC_DATAPORT, W            ;Sample
10E2   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10E3   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10E4   0080           01593         movwf INDF                      ;Save to QUEUE
10E5   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10E6   0000           01595         nop                             ;Wait a cycle
  0000000E            01596         count = count + 1
10E7   0808           01590         movf ADC_DATAPORT, W            ;Sample
10E8   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10E9   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10EA   0080           01593         movwf INDF                      ;Save to QUEUE
10EB   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10EC   0000           01595         nop                             ;Wait a cycle
  0000000F            01596         count = count + 1
10ED   0808           01590         movf ADC_DATAPORT, W            ;Sample
10EE   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10EF   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F0   0080           01593         movwf INDF                      ;Save to QUEUE
10F1   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10F2   0000           01595         nop                             ;Wait a cycle
  00000010            01596         count = count + 1
10F3   0808           01590         movf ADC_DATAPORT, W            ;Sample
10F4   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10F5   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F6   0080           01593         movwf INDF                      ;Save to QUEUE
10F7   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10F8   0000           01595         nop                             ;Wait a cycle
  00000011            01596         count = count + 1
10F9   0808           01590         movf ADC_DATAPORT, W            ;Sample
10FA   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10FB   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10FC   0080           01593         movwf INDF                      ;Save to QUEUE
10FD   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
10FE   0000           01595         nop                             ;Wait a cycle
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000012            01596         count = count + 1
10FF   0808           01590         movf ADC_DATAPORT, W            ;Sample
1100   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1101   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1102   0080           01593         movwf INDF                      ;Save to QUEUE
1103   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1104   0000           01595         nop                             ;Wait a cycle
  00000013            01596         count = count + 1
1105   0808           01590         movf ADC_DATAPORT, W            ;Sample
1106   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1107   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1108   0080           01593         movwf INDF                      ;Save to QUEUE
1109   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
110A   0000           01595         nop                             ;Wait a cycle
  00000014            01596         count = count + 1
110B   0808           01590         movf ADC_DATAPORT, W            ;Sample
110C   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
110D   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
110E   0080           01593         movwf INDF                      ;Save to QUEUE
110F   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1110   0000           01595         nop                             ;Wait a cycle
  00000015            01596         count = count + 1
1111   0808           01590         movf ADC_DATAPORT, W            ;Sample
1112   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1113   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1114   0080           01593         movwf INDF                      ;Save to QUEUE
1115   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1116   0000           01595         nop                             ;Wait a cycle
  00000016            01596         count = count + 1
1117   0808           01590         movf ADC_DATAPORT, W            ;Sample
1118   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1119   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
111A   0080           01593         movwf INDF                      ;Save to QUEUE
111B   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
111C   0000           01595         nop                             ;Wait a cycle
  00000017            01596         count = count + 1
111D   0808           01590         movf ADC_DATAPORT, W            ;Sample
111E   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
111F   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1120   0080           01593         movwf INDF                      ;Save to QUEUE
1121   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1122   0000           01595         nop                             ;Wait a cycle
  00000018            01596         count = count + 1
1123   0808           01590         movf ADC_DATAPORT, W            ;Sample
1124   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1125   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1126   0080           01593         movwf INDF                      ;Save to QUEUE
1127   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1128   0000           01595         nop                             ;Wait a cycle
  00000019            01596         count = count + 1
1129   0808           01590         movf ADC_DATAPORT, W            ;Sample
112A   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
112B   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

112C   0080           01593         movwf INDF                      ;Save to QUEUE
112D   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
112E   0000           01595         nop                             ;Wait a cycle
  0000001A            01596         count = count + 1
112F   0808           01590         movf ADC_DATAPORT, W            ;Sample
1130   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1131   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1132   0080           01593         movwf INDF                      ;Save to QUEUE
1133   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1134   0000           01595         nop                             ;Wait a cycle
  0000001B            01596         count = count + 1
1135   0808           01590         movf ADC_DATAPORT, W            ;Sample
1136   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1137   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1138   0080           01593         movwf INDF                      ;Save to QUEUE
1139   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
113A   0000           01595         nop                             ;Wait a cycle
  0000001C            01596         count = count + 1
113B   0808           01590         movf ADC_DATAPORT, W            ;Sample
113C   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
113D   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
113E   0080           01593         movwf INDF                      ;Save to QUEUE
113F   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1140   0000           01595         nop                             ;Wait a cycle
  0000001D            01596         count = count + 1
1141   0808           01590         movf ADC_DATAPORT, W            ;Sample
1142   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1143   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1144   0080           01593         movwf INDF                      ;Save to QUEUE
1145   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1146   0000           01595         nop                             ;Wait a cycle
  0000001E            01596         count = count + 1
1147   0808           01590         movf ADC_DATAPORT, W            ;Sample
1148   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1149   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
114A   0080           01593         movwf INDF                      ;Save to QUEUE
114B   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
114C   0000           01595         nop                             ;Wait a cycle
  0000001F            01596         count = count + 1
114D   0808           01590         movf ADC_DATAPORT, W            ;Sample
114E   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
114F   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1150   0080           01593         movwf INDF                      ;Save to QUEUE
1151   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1152   0000           01595         nop                             ;Wait a cycle
  00000020            01596         count = count + 1
1153   0808           01590         movf ADC_DATAPORT, W            ;Sample
1154   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1155   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1156   0080           01593         movwf INDF                      ;Save to QUEUE
1157   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1158   0000           01595         nop                             ;Wait a cycle
  00000021            01596         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1159   0808           01590         movf ADC_DATAPORT, W            ;Sample
115A   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
115B   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
115C   0080           01593         movwf INDF                      ;Save to QUEUE
115D   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
115E   0000           01595         nop                             ;Wait a cycle
  00000022            01596         count = count + 1
115F   0808           01590         movf ADC_DATAPORT, W            ;Sample
1160   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1161   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1162   0080           01593         movwf INDF                      ;Save to QUEUE
1163   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1164   0000           01595         nop                             ;Wait a cycle
  00000023            01596         count = count + 1
1165   0808           01590         movf ADC_DATAPORT, W            ;Sample
1166   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1167   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1168   0080           01593         movwf INDF                      ;Save to QUEUE
1169   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
116A   0000           01595         nop                             ;Wait a cycle
  00000024            01596         count = count + 1
116B   0808           01590         movf ADC_DATAPORT, W            ;Sample
116C   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
116D   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
116E   0080           01593         movwf INDF                      ;Save to QUEUE
116F   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1170   0000           01595         nop                             ;Wait a cycle
  00000025            01596         count = count + 1
1171   0808           01590         movf ADC_DATAPORT, W            ;Sample
1172   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1173   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1174   0080           01593         movwf INDF                      ;Save to QUEUE
1175   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1176   0000           01595         nop                             ;Wait a cycle
  00000026            01596         count = count + 1
1177   0808           01590         movf ADC_DATAPORT, W            ;Sample
1178   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1179   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
117A   0080           01593         movwf INDF                      ;Save to QUEUE
117B   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
117C   0000           01595         nop                             ;Wait a cycle
  00000027            01596         count = count + 1
117D   0808           01590         movf ADC_DATAPORT, W            ;Sample
117E   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
117F   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1180   0080           01593         movwf INDF                      ;Save to QUEUE
1181   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1182   0000           01595         nop                             ;Wait a cycle
  00000028            01596         count = count + 1
1183   0808           01590         movf ADC_DATAPORT, W            ;Sample
1184   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1185   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1186   0080           01593         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1187   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1188   0000           01595         nop                             ;Wait a cycle
  00000029            01596         count = count + 1
1189   0808           01590         movf ADC_DATAPORT, W            ;Sample
118A   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
118B   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
118C   0080           01593         movwf INDF                      ;Save to QUEUE
118D   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
118E   0000           01595         nop                             ;Wait a cycle
  0000002A            01596         count = count + 1
118F   0808           01590         movf ADC_DATAPORT, W            ;Sample
1190   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1191   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1192   0080           01593         movwf INDF                      ;Save to QUEUE
1193   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1194   0000           01595         nop                             ;Wait a cycle
  0000002B            01596         count = count + 1
1195   0808           01590         movf ADC_DATAPORT, W            ;Sample
1196   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1197   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1198   0080           01593         movwf INDF                      ;Save to QUEUE
1199   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
119A   0000           01595         nop                             ;Wait a cycle
  0000002C            01596         count = count + 1
119B   0808           01590         movf ADC_DATAPORT, W            ;Sample
119C   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
119D   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
119E   0080           01593         movwf INDF                      ;Save to QUEUE
119F   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11A0   0000           01595         nop                             ;Wait a cycle
  0000002D            01596         count = count + 1
11A1   0808           01590         movf ADC_DATAPORT, W            ;Sample
11A2   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11A3   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11A4   0080           01593         movwf INDF                      ;Save to QUEUE
11A5   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11A6   0000           01595         nop                             ;Wait a cycle
  0000002E            01596         count = count + 1
11A7   0808           01590         movf ADC_DATAPORT, W            ;Sample
11A8   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11A9   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11AA   0080           01593         movwf INDF                      ;Save to QUEUE
11AB   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11AC   0000           01595         nop                             ;Wait a cycle
  0000002F            01596         count = count + 1
11AD   0808           01590         movf ADC_DATAPORT, W            ;Sample
11AE   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11AF   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B0   0080           01593         movwf INDF                      ;Save to QUEUE
11B1   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11B2   0000           01595         nop                             ;Wait a cycle
  00000030            01596         count = count + 1
11B3   0808           01590         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11B4   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11B5   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B6   0080           01593         movwf INDF                      ;Save to QUEUE
11B7   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11B8   0000           01595         nop                             ;Wait a cycle
  00000031            01596         count = count + 1
11B9   0808           01590         movf ADC_DATAPORT, W            ;Sample
11BA   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11BB   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11BC   0080           01593         movwf INDF                      ;Save to QUEUE
11BD   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11BE   0000           01595         nop                             ;Wait a cycle
  00000032            01596         count = count + 1
11BF   0808           01590         movf ADC_DATAPORT, W            ;Sample
11C0   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C1   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C2   0080           01593         movwf INDF                      ;Save to QUEUE
11C3   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11C4   0000           01595         nop                             ;Wait a cycle
  00000033            01596         count = count + 1
11C5   0808           01590         movf ADC_DATAPORT, W            ;Sample
11C6   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C7   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C8   0080           01593         movwf INDF                      ;Save to QUEUE
11C9   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11CA   0000           01595         nop                             ;Wait a cycle
  00000034            01596         count = count + 1
11CB   0808           01590         movf ADC_DATAPORT, W            ;Sample
11CC   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11CD   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11CE   0080           01593         movwf INDF                      ;Save to QUEUE
11CF   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11D0   0000           01595         nop                             ;Wait a cycle
  00000035            01596         count = count + 1
11D1   0808           01590         movf ADC_DATAPORT, W            ;Sample
11D2   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11D3   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11D4   0080           01593         movwf INDF                      ;Save to QUEUE
11D5   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11D6   0000           01595         nop                             ;Wait a cycle
  00000036            01596         count = count + 1
11D7   0808           01590         movf ADC_DATAPORT, W            ;Sample
11D8   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11D9   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11DA   0080           01593         movwf INDF                      ;Save to QUEUE
11DB   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11DC   0000           01595         nop                             ;Wait a cycle
  00000037            01596         count = count + 1
11DD   0808           01590         movf ADC_DATAPORT, W            ;Sample
11DE   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11DF   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E0   0080           01593         movwf INDF                      ;Save to QUEUE
11E1   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11E2   0000           01595         nop                             ;Wait a cycle
  00000038            01596         count = count + 1
11E3   0808           01590         movf ADC_DATAPORT, W            ;Sample
11E4   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11E5   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E6   0080           01593         movwf INDF                      ;Save to QUEUE
11E7   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11E8   0000           01595         nop                             ;Wait a cycle
  00000039            01596         count = count + 1
11E9   0808           01590         movf ADC_DATAPORT, W            ;Sample
11EA   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11EB   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11EC   0080           01593         movwf INDF                      ;Save to QUEUE
11ED   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11EE   0000           01595         nop                             ;Wait a cycle
  0000003A            01596         count = count + 1
11EF   0808           01590         movf ADC_DATAPORT, W            ;Sample
11F0   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11F1   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11F2   0080           01593         movwf INDF                      ;Save to QUEUE
11F3   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11F4   0000           01595         nop                             ;Wait a cycle
  0000003B            01596         count = count + 1
11F5   0808           01590         movf ADC_DATAPORT, W            ;Sample
11F6   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11F7   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11F8   0080           01593         movwf INDF                      ;Save to QUEUE
11F9   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
11FA   0000           01595         nop                             ;Wait a cycle
  0000003C            01596         count = count + 1
11FB   0808           01590         movf ADC_DATAPORT, W            ;Sample
11FC   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11FD   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11FE   0080           01593         movwf INDF                      ;Save to QUEUE
11FF   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1200   0000           01595         nop                             ;Wait a cycle
  0000003D            01596         count = count + 1
1201   0808           01590         movf ADC_DATAPORT, W            ;Sample
1202   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1203   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1204   0080           01593         movwf INDF                      ;Save to QUEUE
1205   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1206   0000           01595         nop                             ;Wait a cycle
  0000003E            01596         count = count + 1
1207   0808           01590         movf ADC_DATAPORT, W            ;Sample
1208   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1209   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
120A   0080           01593         movwf INDF                      ;Save to QUEUE
120B   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
120C   0000           01595         nop                             ;Wait a cycle
  0000003F            01596         count = count + 1
120D   0808           01590         movf ADC_DATAPORT, W            ;Sample
120E   1409           01591         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

120F   1009           01592         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1210   0080           01593         movwf INDF                      ;Save to QUEUE
1211   0384           01594         decf FSR, F                     ;Increment QUEUE pointer
1212   0000           01595         nop                             ;Wait a cycle
  00000040            01596         count = count + 1
                      01597     endw
1213   0808           01598     movf ADC_DATAPORT, W
1214   1409           01599     bsf ADC_CONTROLPORT, RDD
1215   1009           01600     bcf ADC_CONTROLPORT, RDD
1216   0080           01601     movwf INDF
1217   1783           01602     bsf STATUS, IRP                                             ;goto bank 4
1218   0000           01603     nop                                     ;Wait a cycle
  00000001            01604     count = 1
                      01605     while count < D'44'
1219   0808           01606         movf ADC_DATAPORT, W            ;Sample
121A   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
121B   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
121C   0080           01609         movwf INDF                      ;Save to QUEUE
121D   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
121E   0000           01611         nop                             ;Wait a cycle
  00000002            01612         count = count + 1
121F   0808           01606         movf ADC_DATAPORT, W            ;Sample
1220   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1221   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1222   0080           01609         movwf INDF                      ;Save to QUEUE
1223   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1224   0000           01611         nop                             ;Wait a cycle
  00000003            01612         count = count + 1
1225   0808           01606         movf ADC_DATAPORT, W            ;Sample
1226   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1227   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1228   0080           01609         movwf INDF                      ;Save to QUEUE
1229   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
122A   0000           01611         nop                             ;Wait a cycle
  00000004            01612         count = count + 1
122B   0808           01606         movf ADC_DATAPORT, W            ;Sample
122C   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
122D   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
122E   0080           01609         movwf INDF                      ;Save to QUEUE
122F   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1230   0000           01611         nop                             ;Wait a cycle
  00000005            01612         count = count + 1
1231   0808           01606         movf ADC_DATAPORT, W            ;Sample
1232   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1233   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1234   0080           01609         movwf INDF                      ;Save to QUEUE
1235   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1236   0000           01611         nop                             ;Wait a cycle
  00000006            01612         count = count + 1
1237   0808           01606         movf ADC_DATAPORT, W            ;Sample
1238   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1239   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
123A   0080           01609         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

123B   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
123C   0000           01611         nop                             ;Wait a cycle
  00000007            01612         count = count + 1
123D   0808           01606         movf ADC_DATAPORT, W            ;Sample
123E   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
123F   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1240   0080           01609         movwf INDF                      ;Save to QUEUE
1241   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1242   0000           01611         nop                             ;Wait a cycle
  00000008            01612         count = count + 1
1243   0808           01606         movf ADC_DATAPORT, W            ;Sample
1244   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1245   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1246   0080           01609         movwf INDF                      ;Save to QUEUE
1247   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1248   0000           01611         nop                             ;Wait a cycle
  00000009            01612         count = count + 1
1249   0808           01606         movf ADC_DATAPORT, W            ;Sample
124A   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
124B   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
124C   0080           01609         movwf INDF                      ;Save to QUEUE
124D   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
124E   0000           01611         nop                             ;Wait a cycle
  0000000A            01612         count = count + 1
124F   0808           01606         movf ADC_DATAPORT, W            ;Sample
1250   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1251   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1252   0080           01609         movwf INDF                      ;Save to QUEUE
1253   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1254   0000           01611         nop                             ;Wait a cycle
  0000000B            01612         count = count + 1
1255   0808           01606         movf ADC_DATAPORT, W            ;Sample
1256   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1257   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1258   0080           01609         movwf INDF                      ;Save to QUEUE
1259   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
125A   0000           01611         nop                             ;Wait a cycle
  0000000C            01612         count = count + 1
125B   0808           01606         movf ADC_DATAPORT, W            ;Sample
125C   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
125D   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
125E   0080           01609         movwf INDF                      ;Save to QUEUE
125F   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1260   0000           01611         nop                             ;Wait a cycle
  0000000D            01612         count = count + 1
1261   0808           01606         movf ADC_DATAPORT, W            ;Sample
1262   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1263   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1264   0080           01609         movwf INDF                      ;Save to QUEUE
1265   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1266   0000           01611         nop                             ;Wait a cycle
  0000000E            01612         count = count + 1
1267   0808           01606         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1268   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1269   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
126A   0080           01609         movwf INDF                      ;Save to QUEUE
126B   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
126C   0000           01611         nop                             ;Wait a cycle
  0000000F            01612         count = count + 1
126D   0808           01606         movf ADC_DATAPORT, W            ;Sample
126E   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
126F   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1270   0080           01609         movwf INDF                      ;Save to QUEUE
1271   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1272   0000           01611         nop                             ;Wait a cycle
  00000010            01612         count = count + 1
1273   0808           01606         movf ADC_DATAPORT, W            ;Sample
1274   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1275   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1276   0080           01609         movwf INDF                      ;Save to QUEUE
1277   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1278   0000           01611         nop                             ;Wait a cycle
  00000011            01612         count = count + 1
1279   0808           01606         movf ADC_DATAPORT, W            ;Sample
127A   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
127B   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
127C   0080           01609         movwf INDF                      ;Save to QUEUE
127D   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
127E   0000           01611         nop                             ;Wait a cycle
  00000012            01612         count = count + 1
127F   0808           01606         movf ADC_DATAPORT, W            ;Sample
1280   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1281   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1282   0080           01609         movwf INDF                      ;Save to QUEUE
1283   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1284   0000           01611         nop                             ;Wait a cycle
  00000013            01612         count = count + 1
1285   0808           01606         movf ADC_DATAPORT, W            ;Sample
1286   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1287   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1288   0080           01609         movwf INDF                      ;Save to QUEUE
1289   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
128A   0000           01611         nop                             ;Wait a cycle
  00000014            01612         count = count + 1
128B   0808           01606         movf ADC_DATAPORT, W            ;Sample
128C   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
128D   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
128E   0080           01609         movwf INDF                      ;Save to QUEUE
128F   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1290   0000           01611         nop                             ;Wait a cycle
  00000015            01612         count = count + 1
1291   0808           01606         movf ADC_DATAPORT, W            ;Sample
1292   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1293   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1294   0080           01609         movwf INDF                      ;Save to QUEUE
1295   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1296   0000           01611         nop                             ;Wait a cycle
  00000016            01612         count = count + 1
1297   0808           01606         movf ADC_DATAPORT, W            ;Sample
1298   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1299   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
129A   0080           01609         movwf INDF                      ;Save to QUEUE
129B   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
129C   0000           01611         nop                             ;Wait a cycle
  00000017            01612         count = count + 1
129D   0808           01606         movf ADC_DATAPORT, W            ;Sample
129E   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
129F   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A0   0080           01609         movwf INDF                      ;Save to QUEUE
12A1   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12A2   0000           01611         nop                             ;Wait a cycle
  00000018            01612         count = count + 1
12A3   0808           01606         movf ADC_DATAPORT, W            ;Sample
12A4   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12A5   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A6   0080           01609         movwf INDF                      ;Save to QUEUE
12A7   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12A8   0000           01611         nop                             ;Wait a cycle
  00000019            01612         count = count + 1
12A9   0808           01606         movf ADC_DATAPORT, W            ;Sample
12AA   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12AB   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12AC   0080           01609         movwf INDF                      ;Save to QUEUE
12AD   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12AE   0000           01611         nop                             ;Wait a cycle
  0000001A            01612         count = count + 1
12AF   0808           01606         movf ADC_DATAPORT, W            ;Sample
12B0   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B1   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B2   0080           01609         movwf INDF                      ;Save to QUEUE
12B3   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12B4   0000           01611         nop                             ;Wait a cycle
  0000001B            01612         count = count + 1
12B5   0808           01606         movf ADC_DATAPORT, W            ;Sample
12B6   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B7   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B8   0080           01609         movwf INDF                      ;Save to QUEUE
12B9   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12BA   0000           01611         nop                             ;Wait a cycle
  0000001C            01612         count = count + 1
12BB   0808           01606         movf ADC_DATAPORT, W            ;Sample
12BC   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12BD   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12BE   0080           01609         movwf INDF                      ;Save to QUEUE
12BF   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12C0   0000           01611         nop                             ;Wait a cycle
  0000001D            01612         count = count + 1
12C1   0808           01606         movf ADC_DATAPORT, W            ;Sample
12C2   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12C3   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12C4   0080           01609         movwf INDF                      ;Save to QUEUE
12C5   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12C6   0000           01611         nop                             ;Wait a cycle
  0000001E            01612         count = count + 1
12C7   0808           01606         movf ADC_DATAPORT, W            ;Sample
12C8   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12C9   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12CA   0080           01609         movwf INDF                      ;Save to QUEUE
12CB   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12CC   0000           01611         nop                             ;Wait a cycle
  0000001F            01612         count = count + 1
12CD   0808           01606         movf ADC_DATAPORT, W            ;Sample
12CE   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12CF   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D0   0080           01609         movwf INDF                      ;Save to QUEUE
12D1   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12D2   0000           01611         nop                             ;Wait a cycle
  00000020            01612         count = count + 1
12D3   0808           01606         movf ADC_DATAPORT, W            ;Sample
12D4   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12D5   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D6   0080           01609         movwf INDF                      ;Save to QUEUE
12D7   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12D8   0000           01611         nop                             ;Wait a cycle
  00000021            01612         count = count + 1
12D9   0808           01606         movf ADC_DATAPORT, W            ;Sample
12DA   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12DB   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12DC   0080           01609         movwf INDF                      ;Save to QUEUE
12DD   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12DE   0000           01611         nop                             ;Wait a cycle
  00000022            01612         count = count + 1
12DF   0808           01606         movf ADC_DATAPORT, W            ;Sample
12E0   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E1   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E2   0080           01609         movwf INDF                      ;Save to QUEUE
12E3   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12E4   0000           01611         nop                             ;Wait a cycle
  00000023            01612         count = count + 1
12E5   0808           01606         movf ADC_DATAPORT, W            ;Sample
12E6   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E7   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E8   0080           01609         movwf INDF                      ;Save to QUEUE
12E9   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12EA   0000           01611         nop                             ;Wait a cycle
  00000024            01612         count = count + 1
12EB   0808           01606         movf ADC_DATAPORT, W            ;Sample
12EC   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12ED   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12EE   0080           01609         movwf INDF                      ;Save to QUEUE
12EF   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12F0   0000           01611         nop                             ;Wait a cycle
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            01612         count = count + 1
12F1   0808           01606         movf ADC_DATAPORT, W            ;Sample
12F2   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12F3   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12F4   0080           01609         movwf INDF                      ;Save to QUEUE
12F5   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12F6   0000           01611         nop                             ;Wait a cycle
  00000026            01612         count = count + 1
12F7   0808           01606         movf ADC_DATAPORT, W            ;Sample
12F8   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12F9   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12FA   0080           01609         movwf INDF                      ;Save to QUEUE
12FB   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
12FC   0000           01611         nop                             ;Wait a cycle
  00000027            01612         count = count + 1
12FD   0808           01606         movf ADC_DATAPORT, W            ;Sample
12FE   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12FF   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1300   0080           01609         movwf INDF                      ;Save to QUEUE
1301   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1302   0000           01611         nop                             ;Wait a cycle
  00000028            01612         count = count + 1
1303   0808           01606         movf ADC_DATAPORT, W            ;Sample
1304   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1305   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1306   0080           01609         movwf INDF                      ;Save to QUEUE
1307   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1308   0000           01611         nop                             ;Wait a cycle
  00000029            01612         count = count + 1
1309   0808           01606         movf ADC_DATAPORT, W            ;Sample
130A   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
130B   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
130C   0080           01609         movwf INDF                      ;Save to QUEUE
130D   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
130E   0000           01611         nop                             ;Wait a cycle
  0000002A            01612         count = count + 1
130F   0808           01606         movf ADC_DATAPORT, W            ;Sample
1310   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1311   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1312   0080           01609         movwf INDF                      ;Save to QUEUE
1313   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
1314   0000           01611         nop                             ;Wait a cycle
  0000002B            01612         count = count + 1
1315   0808           01606         movf ADC_DATAPORT, W            ;Sample
1316   1409           01607         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1317   1009           01608         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1318   0080           01609         movwf INDF                      ;Save to QUEUE
1319   0A84           01610         incf FSR, F                     ;Increment QUEUE pointer
131A   0000           01611         nop                             ;Wait a cycle
  0000002C            01612         count = count + 1
                      01613     endw
131B                  01614 Sample833kEnd
                      01615     while count < BUFFERSIZE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

131B   0808           01616         movf ADC_DATAPORT, W            ;Sample
131C   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
131D   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
131E   0080           01619         movwf INDF                      ;Save to QUEUE
131F   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1320   0000           01621         nop                             ;Wait a cycle
  0000002D            01622         count = count + 1
1321   0808           01616         movf ADC_DATAPORT, W            ;Sample
1322   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1323   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1324   0080           01619         movwf INDF                      ;Save to QUEUE
1325   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1326   0000           01621         nop                             ;Wait a cycle
  0000002E            01622         count = count + 1
1327   0808           01616         movf ADC_DATAPORT, W            ;Sample
1328   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1329   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
132A   0080           01619         movwf INDF                      ;Save to QUEUE
132B   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
132C   0000           01621         nop                             ;Wait a cycle
  0000002F            01622         count = count + 1
132D   0808           01616         movf ADC_DATAPORT, W            ;Sample
132E   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
132F   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1330   0080           01619         movwf INDF                      ;Save to QUEUE
1331   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1332   0000           01621         nop                             ;Wait a cycle
  00000030            01622         count = count + 1
1333   0808           01616         movf ADC_DATAPORT, W            ;Sample
1334   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1335   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1336   0080           01619         movwf INDF                      ;Save to QUEUE
1337   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1338   0000           01621         nop                             ;Wait a cycle
  00000031            01622         count = count + 1
1339   0808           01616         movf ADC_DATAPORT, W            ;Sample
133A   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
133B   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
133C   0080           01619         movwf INDF                      ;Save to QUEUE
133D   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
133E   0000           01621         nop                             ;Wait a cycle
  00000032            01622         count = count + 1
133F   0808           01616         movf ADC_DATAPORT, W            ;Sample
1340   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1341   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1342   0080           01619         movwf INDF                      ;Save to QUEUE
1343   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1344   0000           01621         nop                             ;Wait a cycle
  00000033            01622         count = count + 1
1345   0808           01616         movf ADC_DATAPORT, W            ;Sample
1346   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1347   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1348   0080           01619         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1349   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
134A   0000           01621         nop                             ;Wait a cycle
  00000034            01622         count = count + 1
134B   0808           01616         movf ADC_DATAPORT, W            ;Sample
134C   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
134D   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
134E   0080           01619         movwf INDF                      ;Save to QUEUE
134F   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1350   0000           01621         nop                             ;Wait a cycle
  00000035            01622         count = count + 1
1351   0808           01616         movf ADC_DATAPORT, W            ;Sample
1352   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1353   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1354   0080           01619         movwf INDF                      ;Save to QUEUE
1355   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1356   0000           01621         nop                             ;Wait a cycle
  00000036            01622         count = count + 1
1357   0808           01616         movf ADC_DATAPORT, W            ;Sample
1358   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1359   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
135A   0080           01619         movwf INDF                      ;Save to QUEUE
135B   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
135C   0000           01621         nop                             ;Wait a cycle
  00000037            01622         count = count + 1
135D   0808           01616         movf ADC_DATAPORT, W            ;Sample
135E   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
135F   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1360   0080           01619         movwf INDF                      ;Save to QUEUE
1361   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1362   0000           01621         nop                             ;Wait a cycle
  00000038            01622         count = count + 1
1363   0808           01616         movf ADC_DATAPORT, W            ;Sample
1364   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1365   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1366   0080           01619         movwf INDF                      ;Save to QUEUE
1367   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1368   0000           01621         nop                             ;Wait a cycle
  00000039            01622         count = count + 1
1369   0808           01616         movf ADC_DATAPORT, W            ;Sample
136A   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
136B   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
136C   0080           01619         movwf INDF                      ;Save to QUEUE
136D   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
136E   0000           01621         nop                             ;Wait a cycle
  0000003A            01622         count = count + 1
136F   0808           01616         movf ADC_DATAPORT, W            ;Sample
1370   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1371   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1372   0080           01619         movwf INDF                      ;Save to QUEUE
1373   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1374   0000           01621         nop                             ;Wait a cycle
  0000003B            01622         count = count + 1
1375   0808           01616         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1376   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1377   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1378   0080           01619         movwf INDF                      ;Save to QUEUE
1379   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
137A   0000           01621         nop                             ;Wait a cycle
  0000003C            01622         count = count + 1
137B   0808           01616         movf ADC_DATAPORT, W            ;Sample
137C   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
137D   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
137E   0080           01619         movwf INDF                      ;Save to QUEUE
137F   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1380   0000           01621         nop                             ;Wait a cycle
  0000003D            01622         count = count + 1
1381   0808           01616         movf ADC_DATAPORT, W            ;Sample
1382   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1383   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1384   0080           01619         movwf INDF                      ;Save to QUEUE
1385   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1386   0000           01621         nop                             ;Wait a cycle
  0000003E            01622         count = count + 1
1387   0808           01616         movf ADC_DATAPORT, W            ;Sample
1388   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1389   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
138A   0080           01619         movwf INDF                      ;Save to QUEUE
138B   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
138C   0000           01621         nop                             ;Wait a cycle
  0000003F            01622         count = count + 1
138D   0808           01616         movf ADC_DATAPORT, W            ;Sample
138E   1409           01617         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
138F   1009           01618         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1390   0080           01619         movwf INDF                      ;Save to QUEUE
1391   0A84           01620         incf FSR, F                     ;Increment QUEUE pointer
1392   0000           01621         nop                             ;Wait a cycle
  00000040            01622         count = count + 1
                      01623     endw
1393   0808           01624     movf ADC_DATAPORT, W
1394   1409           01625     bsf ADC_CONTROLPORT, RDD
1395   1009           01626     bcf ADC_CONTROLPORT, RDD
1396   0080           01627     movwf INDF
1397   1384           01628     bcf FSR, 7                                                  ;goto bank 3
1398   0000           01629     nop                                     ;Wait a cycle
  00000001            01630     count = 1
                      01631     while count < BUFFERSIZE
1399   0808           01632         movf ADC_DATAPORT, W            ;Sample
139A   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
139B   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
139C   0080           01635         movwf INDF                      ;Save to QUEUE
139D   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
139E   0000           01637         nop                             ;Wait a cycle
  00000002            01638         count = count + 1
139F   0808           01632         movf ADC_DATAPORT, W            ;Sample
13A0   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A1   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13A2   0080           01635         movwf INDF                      ;Save to QUEUE
13A3   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13A4   0000           01637         nop                             ;Wait a cycle
  00000003            01638         count = count + 1
13A5   0808           01632         movf ADC_DATAPORT, W            ;Sample
13A6   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A7   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13A8   0080           01635         movwf INDF                      ;Save to QUEUE
13A9   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13AA   0000           01637         nop                             ;Wait a cycle
  00000004            01638         count = count + 1
13AB   0808           01632         movf ADC_DATAPORT, W            ;Sample
13AC   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13AD   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13AE   0080           01635         movwf INDF                      ;Save to QUEUE
13AF   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13B0   0000           01637         nop                             ;Wait a cycle
  00000005            01638         count = count + 1
13B1   0808           01632         movf ADC_DATAPORT, W            ;Sample
13B2   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13B3   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13B4   0080           01635         movwf INDF                      ;Save to QUEUE
13B5   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13B6   0000           01637         nop                             ;Wait a cycle
  00000006            01638         count = count + 1
13B7   0808           01632         movf ADC_DATAPORT, W            ;Sample
13B8   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13B9   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13BA   0080           01635         movwf INDF                      ;Save to QUEUE
13BB   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13BC   0000           01637         nop                             ;Wait a cycle
  00000007            01638         count = count + 1
13BD   0808           01632         movf ADC_DATAPORT, W            ;Sample
13BE   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13BF   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C0   0080           01635         movwf INDF                      ;Save to QUEUE
13C1   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13C2   0000           01637         nop                             ;Wait a cycle
  00000008            01638         count = count + 1
13C3   0808           01632         movf ADC_DATAPORT, W            ;Sample
13C4   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13C5   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C6   0080           01635         movwf INDF                      ;Save to QUEUE
13C7   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13C8   0000           01637         nop                             ;Wait a cycle
  00000009            01638         count = count + 1
13C9   0808           01632         movf ADC_DATAPORT, W            ;Sample
13CA   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13CB   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13CC   0080           01635         movwf INDF                      ;Save to QUEUE
13CD   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13CE   0000           01637         nop                             ;Wait a cycle
  0000000A            01638         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13CF   0808           01632         movf ADC_DATAPORT, W            ;Sample
13D0   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D1   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D2   0080           01635         movwf INDF                      ;Save to QUEUE
13D3   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13D4   0000           01637         nop                             ;Wait a cycle
  0000000B            01638         count = count + 1
13D5   0808           01632         movf ADC_DATAPORT, W            ;Sample
13D6   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D7   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D8   0080           01635         movwf INDF                      ;Save to QUEUE
13D9   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13DA   0000           01637         nop                             ;Wait a cycle
  0000000C            01638         count = count + 1
13DB   0808           01632         movf ADC_DATAPORT, W            ;Sample
13DC   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13DD   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13DE   0080           01635         movwf INDF                      ;Save to QUEUE
13DF   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13E0   0000           01637         nop                             ;Wait a cycle
  0000000D            01638         count = count + 1
13E1   0808           01632         movf ADC_DATAPORT, W            ;Sample
13E2   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13E3   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13E4   0080           01635         movwf INDF                      ;Save to QUEUE
13E5   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13E6   0000           01637         nop                             ;Wait a cycle
  0000000E            01638         count = count + 1
13E7   0808           01632         movf ADC_DATAPORT, W            ;Sample
13E8   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13E9   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13EA   0080           01635         movwf INDF                      ;Save to QUEUE
13EB   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13EC   0000           01637         nop                             ;Wait a cycle
  0000000F            01638         count = count + 1
13ED   0808           01632         movf ADC_DATAPORT, W            ;Sample
13EE   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13EF   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F0   0080           01635         movwf INDF                      ;Save to QUEUE
13F1   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13F2   0000           01637         nop                             ;Wait a cycle
  00000010            01638         count = count + 1
13F3   0808           01632         movf ADC_DATAPORT, W            ;Sample
13F4   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13F5   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F6   0080           01635         movwf INDF                      ;Save to QUEUE
13F7   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13F8   0000           01637         nop                             ;Wait a cycle
  00000011            01638         count = count + 1
13F9   0808           01632         movf ADC_DATAPORT, W            ;Sample
13FA   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13FB   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13FC   0080           01635         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13FD   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
13FE   0000           01637         nop                             ;Wait a cycle
  00000012            01638         count = count + 1
13FF   0808           01632         movf ADC_DATAPORT, W            ;Sample
1400   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1401   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1402   0080           01635         movwf INDF                      ;Save to QUEUE
1403   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1404   0000           01637         nop                             ;Wait a cycle
  00000013            01638         count = count + 1
1405   0808           01632         movf ADC_DATAPORT, W            ;Sample
1406   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1407   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1408   0080           01635         movwf INDF                      ;Save to QUEUE
1409   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
140A   0000           01637         nop                             ;Wait a cycle
  00000014            01638         count = count + 1
140B   0808           01632         movf ADC_DATAPORT, W            ;Sample
140C   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
140D   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
140E   0080           01635         movwf INDF                      ;Save to QUEUE
140F   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1410   0000           01637         nop                             ;Wait a cycle
  00000015            01638         count = count + 1
1411   0808           01632         movf ADC_DATAPORT, W            ;Sample
1412   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1413   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1414   0080           01635         movwf INDF                      ;Save to QUEUE
1415   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1416   0000           01637         nop                             ;Wait a cycle
  00000016            01638         count = count + 1
1417   0808           01632         movf ADC_DATAPORT, W            ;Sample
1418   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1419   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
141A   0080           01635         movwf INDF                      ;Save to QUEUE
141B   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
141C   0000           01637         nop                             ;Wait a cycle
  00000017            01638         count = count + 1
141D   0808           01632         movf ADC_DATAPORT, W            ;Sample
141E   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
141F   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1420   0080           01635         movwf INDF                      ;Save to QUEUE
1421   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1422   0000           01637         nop                             ;Wait a cycle
  00000018            01638         count = count + 1
1423   0808           01632         movf ADC_DATAPORT, W            ;Sample
1424   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1425   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1426   0080           01635         movwf INDF                      ;Save to QUEUE
1427   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1428   0000           01637         nop                             ;Wait a cycle
  00000019            01638         count = count + 1
1429   0808           01632         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

142A   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
142B   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
142C   0080           01635         movwf INDF                      ;Save to QUEUE
142D   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
142E   0000           01637         nop                             ;Wait a cycle
  0000001A            01638         count = count + 1
142F   0808           01632         movf ADC_DATAPORT, W            ;Sample
1430   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1431   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1432   0080           01635         movwf INDF                      ;Save to QUEUE
1433   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1434   0000           01637         nop                             ;Wait a cycle
  0000001B            01638         count = count + 1
1435   0808           01632         movf ADC_DATAPORT, W            ;Sample
1436   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1437   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1438   0080           01635         movwf INDF                      ;Save to QUEUE
1439   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
143A   0000           01637         nop                             ;Wait a cycle
  0000001C            01638         count = count + 1
143B   0808           01632         movf ADC_DATAPORT, W            ;Sample
143C   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
143D   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
143E   0080           01635         movwf INDF                      ;Save to QUEUE
143F   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1440   0000           01637         nop                             ;Wait a cycle
  0000001D            01638         count = count + 1
1441   0808           01632         movf ADC_DATAPORT, W            ;Sample
1442   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1443   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1444   0080           01635         movwf INDF                      ;Save to QUEUE
1445   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1446   0000           01637         nop                             ;Wait a cycle
  0000001E            01638         count = count + 1
1447   0808           01632         movf ADC_DATAPORT, W            ;Sample
1448   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1449   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
144A   0080           01635         movwf INDF                      ;Save to QUEUE
144B   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
144C   0000           01637         nop                             ;Wait a cycle
  0000001F            01638         count = count + 1
144D   0808           01632         movf ADC_DATAPORT, W            ;Sample
144E   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
144F   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1450   0080           01635         movwf INDF                      ;Save to QUEUE
1451   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1452   0000           01637         nop                             ;Wait a cycle
  00000020            01638         count = count + 1
1453   0808           01632         movf ADC_DATAPORT, W            ;Sample
1454   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1455   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1456   0080           01635         movwf INDF                      ;Save to QUEUE
1457   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1458   0000           01637         nop                             ;Wait a cycle
  00000021            01638         count = count + 1
1459   0808           01632         movf ADC_DATAPORT, W            ;Sample
145A   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
145B   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
145C   0080           01635         movwf INDF                      ;Save to QUEUE
145D   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
145E   0000           01637         nop                             ;Wait a cycle
  00000022            01638         count = count + 1
145F   0808           01632         movf ADC_DATAPORT, W            ;Sample
1460   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1461   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1462   0080           01635         movwf INDF                      ;Save to QUEUE
1463   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1464   0000           01637         nop                             ;Wait a cycle
  00000023            01638         count = count + 1
1465   0808           01632         movf ADC_DATAPORT, W            ;Sample
1466   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1467   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1468   0080           01635         movwf INDF                      ;Save to QUEUE
1469   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
146A   0000           01637         nop                             ;Wait a cycle
  00000024            01638         count = count + 1
146B   0808           01632         movf ADC_DATAPORT, W            ;Sample
146C   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
146D   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
146E   0080           01635         movwf INDF                      ;Save to QUEUE
146F   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1470   0000           01637         nop                             ;Wait a cycle
  00000025            01638         count = count + 1
1471   0808           01632         movf ADC_DATAPORT, W            ;Sample
1472   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1473   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1474   0080           01635         movwf INDF                      ;Save to QUEUE
1475   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1476   0000           01637         nop                             ;Wait a cycle
  00000026            01638         count = count + 1
1477   0808           01632         movf ADC_DATAPORT, W            ;Sample
1478   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1479   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
147A   0080           01635         movwf INDF                      ;Save to QUEUE
147B   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
147C   0000           01637         nop                             ;Wait a cycle
  00000027            01638         count = count + 1
147D   0808           01632         movf ADC_DATAPORT, W            ;Sample
147E   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
147F   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1480   0080           01635         movwf INDF                      ;Save to QUEUE
1481   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1482   0000           01637         nop                             ;Wait a cycle
  00000028            01638         count = count + 1
1483   0808           01632         movf ADC_DATAPORT, W            ;Sample
1484   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1485   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1486   0080           01635         movwf INDF                      ;Save to QUEUE
1487   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1488   0000           01637         nop                             ;Wait a cycle
  00000029            01638         count = count + 1
1489   0808           01632         movf ADC_DATAPORT, W            ;Sample
148A   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
148B   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
148C   0080           01635         movwf INDF                      ;Save to QUEUE
148D   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
148E   0000           01637         nop                             ;Wait a cycle
  0000002A            01638         count = count + 1
148F   0808           01632         movf ADC_DATAPORT, W            ;Sample
1490   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1491   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1492   0080           01635         movwf INDF                      ;Save to QUEUE
1493   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1494   0000           01637         nop                             ;Wait a cycle
  0000002B            01638         count = count + 1
1495   0808           01632         movf ADC_DATAPORT, W            ;Sample
1496   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1497   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1498   0080           01635         movwf INDF                      ;Save to QUEUE
1499   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
149A   0000           01637         nop                             ;Wait a cycle
  0000002C            01638         count = count + 1
149B   0808           01632         movf ADC_DATAPORT, W            ;Sample
149C   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
149D   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
149E   0080           01635         movwf INDF                      ;Save to QUEUE
149F   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14A0   0000           01637         nop                             ;Wait a cycle
  0000002D            01638         count = count + 1
14A1   0808           01632         movf ADC_DATAPORT, W            ;Sample
14A2   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14A3   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14A4   0080           01635         movwf INDF                      ;Save to QUEUE
14A5   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14A6   0000           01637         nop                             ;Wait a cycle
  0000002E            01638         count = count + 1
14A7   0808           01632         movf ADC_DATAPORT, W            ;Sample
14A8   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14A9   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14AA   0080           01635         movwf INDF                      ;Save to QUEUE
14AB   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14AC   0000           01637         nop                             ;Wait a cycle
  0000002F            01638         count = count + 1
14AD   0808           01632         movf ADC_DATAPORT, W            ;Sample
14AE   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14AF   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B0   0080           01635         movwf INDF                      ;Save to QUEUE
14B1   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14B2   0000           01637         nop                             ;Wait a cycle
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000030            01638         count = count + 1
14B3   0808           01632         movf ADC_DATAPORT, W            ;Sample
14B4   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14B5   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B6   0080           01635         movwf INDF                      ;Save to QUEUE
14B7   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14B8   0000           01637         nop                             ;Wait a cycle
  00000031            01638         count = count + 1
14B9   0808           01632         movf ADC_DATAPORT, W            ;Sample
14BA   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14BB   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14BC   0080           01635         movwf INDF                      ;Save to QUEUE
14BD   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14BE   0000           01637         nop                             ;Wait a cycle
  00000032            01638         count = count + 1
14BF   0808           01632         movf ADC_DATAPORT, W            ;Sample
14C0   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14C1   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14C2   0080           01635         movwf INDF                      ;Save to QUEUE
14C3   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14C4   0000           01637         nop                             ;Wait a cycle
  00000033            01638         count = count + 1
14C5   0808           01632         movf ADC_DATAPORT, W            ;Sample
14C6   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14C7   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14C8   0080           01635         movwf INDF                      ;Save to QUEUE
14C9   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14CA   0000           01637         nop                             ;Wait a cycle
  00000034            01638         count = count + 1
14CB   0808           01632         movf ADC_DATAPORT, W            ;Sample
14CC   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14CD   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14CE   0080           01635         movwf INDF                      ;Save to QUEUE
14CF   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14D0   0000           01637         nop                             ;Wait a cycle
  00000035            01638         count = count + 1
14D1   0808           01632         movf ADC_DATAPORT, W            ;Sample
14D2   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14D3   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14D4   0080           01635         movwf INDF                      ;Save to QUEUE
14D5   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14D6   0000           01637         nop                             ;Wait a cycle
  00000036            01638         count = count + 1
14D7   0808           01632         movf ADC_DATAPORT, W            ;Sample
14D8   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14D9   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14DA   0080           01635         movwf INDF                      ;Save to QUEUE
14DB   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14DC   0000           01637         nop                             ;Wait a cycle
  00000037            01638         count = count + 1
14DD   0808           01632         movf ADC_DATAPORT, W            ;Sample
14DE   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14DF   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

14E0   0080           01635         movwf INDF                      ;Save to QUEUE
14E1   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14E2   0000           01637         nop                             ;Wait a cycle
  00000038            01638         count = count + 1
14E3   0808           01632         movf ADC_DATAPORT, W            ;Sample
14E4   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14E5   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14E6   0080           01635         movwf INDF                      ;Save to QUEUE
14E7   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14E8   0000           01637         nop                             ;Wait a cycle
  00000039            01638         count = count + 1
14E9   0808           01632         movf ADC_DATAPORT, W            ;Sample
14EA   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14EB   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14EC   0080           01635         movwf INDF                      ;Save to QUEUE
14ED   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14EE   0000           01637         nop                             ;Wait a cycle
  0000003A            01638         count = count + 1
14EF   0808           01632         movf ADC_DATAPORT, W            ;Sample
14F0   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14F1   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14F2   0080           01635         movwf INDF                      ;Save to QUEUE
14F3   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14F4   0000           01637         nop                             ;Wait a cycle
  0000003B            01638         count = count + 1
14F5   0808           01632         movf ADC_DATAPORT, W            ;Sample
14F6   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14F7   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14F8   0080           01635         movwf INDF                      ;Save to QUEUE
14F9   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
14FA   0000           01637         nop                             ;Wait a cycle
  0000003C            01638         count = count + 1
14FB   0808           01632         movf ADC_DATAPORT, W            ;Sample
14FC   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14FD   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14FE   0080           01635         movwf INDF                      ;Save to QUEUE
14FF   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1500   0000           01637         nop                             ;Wait a cycle
  0000003D            01638         count = count + 1
1501   0808           01632         movf ADC_DATAPORT, W            ;Sample
1502   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1503   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1504   0080           01635         movwf INDF                      ;Save to QUEUE
1505   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1506   0000           01637         nop                             ;Wait a cycle
  0000003E            01638         count = count + 1
1507   0808           01632         movf ADC_DATAPORT, W            ;Sample
1508   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1509   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
150A   0080           01635         movwf INDF                      ;Save to QUEUE
150B   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
150C   0000           01637         nop                             ;Wait a cycle
  0000003F            01638         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

150D   0808           01632         movf ADC_DATAPORT, W            ;Sample
150E   1409           01633         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
150F   1009           01634         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1510   0080           01635         movwf INDF                      ;Save to QUEUE
1511   0384           01636         decf FSR, F                     ;Increment QUEUE pointer
1512   0000           01637         nop                             ;Wait a cycle
  00000040            01638         count = count + 1
                      01639     endw
1513   0808           01640     movf ADC_DATAPORT, W                ;Last sample
1514   1409           01641     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
1515   118A           01642     bcf PCLATH, 3                                               ;insure correct program memory page
1516   120A           01643     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
1517   298E           01644     goto ADCShutdown
                      01645 
                      01646 ;Repetative sample
                      01647 ;Equivalent sampling rate = 5 MHz with 20 MHz clock
                      01648 ;-----------------------------------------------------------------------------
1518                  01649 SampleRep5M
1518   3015           01650     movlw high SampleRep5MPickSt
1519   008A           01651     movwf PCLATH
151A   087A           01652         movf modetempb, w
151B   0782           01653         addwf PCL, f
151C                  01654 SampleRep5MPickSt
                      01655         MGOTO SampleRep5MStep1
                          M         if (SampleRep5MStep1 & (0x1000))
151C   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep1 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
151D   118A               M                 bcf PCLATH, 3
                          M         endif
151E   2D2B               M         goto SampleRep5MStep1
                      01656         MGOTO SampleRep5MStep2
                          M         if (SampleRep5MStep2 & (0x1000))
151F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep2 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1520   118A               M                 bcf PCLATH, 3
                          M         endif
1521   2E3B               M         goto SampleRep5MStep2
                      01657         MGOTO SampleRep5MStep3
                          M         if (SampleRep5MStep3 & (0x1000))
1522   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M         if (SampleRep5MStep3 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1523   118A               M                 bcf PCLATH, 3
                          M         endif
1524   2F3E               M         goto SampleRep5MStep3
                      01658         MGOTO SampleRep5MStep4
                          M         if (SampleRep5MStep4 & (0x1000))
1525   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep4 & (0x800))
1526   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1527   2841               M         goto SampleRep5MStep4
                      01659         MGOTO SampleRep5MStep5
                          M         if (SampleRep5MStep5 & (0x1000))
1528   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep5 & (0x800))
1529   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
152A   2945               M         goto SampleRep5MStep5
152B                  01660 SampleRep5MPickEn
152B                  01661 SampleRep5MStep1
152B   1009           01662     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01663     MOVLF BUFFERMIN, FSR                ;Initialize pointer
152C   3020               M     movlw BUFFERMIN
152D   0084               M     movwf FSR
152E   0000           01664         nop
  0000                01665     local count
  00000001            01666     count = 1
                      01667     while count < D'52'
152F   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1530   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1531   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1532   0080           01671         movwf INDF                      ;Save to QUEUE
1533   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01673         count = count + 1
1534   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1535   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1536   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1537   0080           01671         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1538   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01673         count = count + 1
1539   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
153A   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
153B   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
153C   0080           01671         movwf INDF                      ;Save to QUEUE
153D   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01673         count = count + 1
153E   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
153F   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1540   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1541   0080           01671         movwf INDF                      ;Save to QUEUE
1542   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01673         count = count + 1
1543   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1544   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1545   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1546   0080           01671         movwf INDF                      ;Save to QUEUE
1547   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01673         count = count + 1
1548   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1549   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
154A   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
154B   0080           01671         movwf INDF                      ;Save to QUEUE
154C   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01673         count = count + 1
154D   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
154E   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
154F   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1550   0080           01671         movwf INDF                      ;Save to QUEUE
1551   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01673         count = count + 1
1552   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1553   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1554   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1555   0080           01671         movwf INDF                      ;Save to QUEUE
1556   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01673         count = count + 1
1557   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1558   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1559   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
155A   0080           01671         movwf INDF                      ;Save to QUEUE
155B   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01673         count = count + 1
155C   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
155D   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
155E   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
155F   0080           01671         movwf INDF                      ;Save to QUEUE
1560   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01673         count = count + 1
1561   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1562   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1563   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1564   0080           01671         movwf INDF                      ;Save to QUEUE
1565   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01673         count = count + 1
1566   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1567   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1568   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1569   0080           01671         movwf INDF                      ;Save to QUEUE
156A   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01673         count = count + 1
156B   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
156C   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
156D   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
156E   0080           01671         movwf INDF                      ;Save to QUEUE
156F   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01673         count = count + 1
1570   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1571   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1572   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1573   0080           01671         movwf INDF                      ;Save to QUEUE
1574   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01673         count = count + 1
1575   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1576   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1577   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1578   0080           01671         movwf INDF                      ;Save to QUEUE
1579   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01673         count = count + 1
157A   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
157B   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
157C   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
157D   0080           01671         movwf INDF                      ;Save to QUEUE
157E   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01673         count = count + 1
157F   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1580   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1581   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1582   0080           01671         movwf INDF                      ;Save to QUEUE
1583   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01673         count = count + 1
1584   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1585   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1586   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1587   0080           01671         movwf INDF                      ;Save to QUEUE
1588   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01673         count = count + 1
1589   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
158A   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
158B   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
158C   0080           01671         movwf INDF                      ;Save to QUEUE
158D   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01673         count = count + 1
158E   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
158F   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1590   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1591   0080           01671         movwf INDF                      ;Save to QUEUE
1592   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01673         count = count + 1
1593   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1594   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1595   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1596   0080           01671         movwf INDF                      ;Save to QUEUE
1597   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01673         count = count + 1
1598   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1599   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
159A   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
159B   0080           01671         movwf INDF                      ;Save to QUEUE
159C   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01673         count = count + 1
159D   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
159E   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
159F   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15A0   0080           01671         movwf INDF                      ;Save to QUEUE
15A1   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01673         count = count + 1
15A2   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15A3   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15A4   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15A5   0080           01671         movwf INDF                      ;Save to QUEUE
15A6   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01673         count = count + 1
15A7   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15A8   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15A9   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15AA   0080           01671         movwf INDF                      ;Save to QUEUE
15AB   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01673         count = count + 1
15AC   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15AD   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15AE   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15AF   0080           01671         movwf INDF                      ;Save to QUEUE
15B0   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01673         count = count + 1
15B1   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15B2   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15B3   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15B4   0080           01671         movwf INDF                      ;Save to QUEUE
15B5   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01673         count = count + 1
15B6   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15B7   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15B8   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15B9   0080           01671         movwf INDF                      ;Save to QUEUE
15BA   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01673         count = count + 1
15BB   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

15BC   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15BD   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15BE   0080           01671         movwf INDF                      ;Save to QUEUE
15BF   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01673         count = count + 1
15C0   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15C1   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15C2   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15C3   0080           01671         movwf INDF                      ;Save to QUEUE
15C4   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01673         count = count + 1
15C5   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15C6   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15C7   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15C8   0080           01671         movwf INDF                      ;Save to QUEUE
15C9   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01673         count = count + 1
15CA   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15CB   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15CC   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15CD   0080           01671         movwf INDF                      ;Save to QUEUE
15CE   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01673         count = count + 1
15CF   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15D0   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15D1   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15D2   0080           01671         movwf INDF                      ;Save to QUEUE
15D3   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01673         count = count + 1
15D4   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15D5   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15D6   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15D7   0080           01671         movwf INDF                      ;Save to QUEUE
15D8   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01673         count = count + 1
15D9   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15DA   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15DB   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15DC   0080           01671         movwf INDF                      ;Save to QUEUE
15DD   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01673         count = count + 1
15DE   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15DF   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15E0   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15E1   0080           01671         movwf INDF                      ;Save to QUEUE
15E2   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01673         count = count + 1
15E3   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15E4   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15E5   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15E6   0080           01671         movwf INDF                      ;Save to QUEUE
15E7   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01673         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

15E8   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15E9   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15EA   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15EB   0080           01671         movwf INDF                      ;Save to QUEUE
15EC   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01673         count = count + 1
15ED   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15EE   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15EF   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15F0   0080           01671         movwf INDF                      ;Save to QUEUE
15F1   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01673         count = count + 1
15F2   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15F3   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15F4   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15F5   0080           01671         movwf INDF                      ;Save to QUEUE
15F6   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01673         count = count + 1
15F7   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15F8   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15F9   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15FA   0080           01671         movwf INDF                      ;Save to QUEUE
15FB   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01673         count = count + 1
15FC   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15FD   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15FE   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
15FF   0080           01671         movwf INDF                      ;Save to QUEUE
1600   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01673         count = count + 1
1601   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1602   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1603   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1604   0080           01671         movwf INDF                      ;Save to QUEUE
1605   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01673         count = count + 1
1606   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1607   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1608   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1609   0080           01671         movwf INDF                      ;Save to QUEUE
160A   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01673         count = count + 1
160B   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
160C   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
160D   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
160E   0080           01671         movwf INDF                      ;Save to QUEUE
160F   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01673         count = count + 1
1610   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1611   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1612   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1613   0080           01671         movwf INDF                      ;Save to QUEUE
1614   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002F            01673         count = count + 1
1615   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1616   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1617   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1618   0080           01671         movwf INDF                      ;Save to QUEUE
1619   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01673         count = count + 1
161A   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
161B   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
161C   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
161D   0080           01671         movwf INDF                      ;Save to QUEUE
161E   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01673         count = count + 1
161F   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1620   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1621   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1622   0080           01671         movwf INDF                      ;Save to QUEUE
1623   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01673         count = count + 1
1624   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1625   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1626   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
1627   0080           01671         movwf INDF                      ;Save to QUEUE
1628   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01673         count = count + 1
1629   1409           01668             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
162A   1009           01669             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
162B   0808           01670         movf ADC_DATAPORT, W            ;Save Sample
162C   0080           01671         movwf INDF                      ;Save to QUEUE
162D   0A84           01672         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01673         count = count + 1
                      01674     endw
162E   1409           01675     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
162F   0808           01676     movf ADC_DATAPORT, W                ;Sample
1630                  01677 SampleRep5MEndA
1630   0080           01678         movwf INDF
1631   0A84           01679         incf FSR, F
1632   2E35           01680         goto SampleRep5MEndB
1633                  01681 SampleRep5MEndC
1633   0080           01682         movwf INDF
1634   0384           01683         decf FSR, F
1635                  01684 SampleRep5MEndB
                      01685         ADDLF D'3', modetempb, f
1635   3003               M     movlw D'3'
1636   07FA               M     addwf modetempb, f
1637   1486           01686         bsf ADC_PORT, CS
                      01687         MGOTO MainB  
                          M         if (MainB   & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
1638   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (MainB   & (0x800))
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bsf PCLATH, 3
                          M         else
1639   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
163A   28B9               M         goto MainB
                      01688         
163B                  01689 SampleRep5MStep2
163B   0000           01690     nop
163C   1009           01691     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
163D   2E3E           01692         goto $ + 1
163E   0000           01693         nop
  0000                01694     local count
  00000001            01695     count = 1
                      01696     while count < D'12'
163F   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1640   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1641   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1642   0080           01700         movwf INDF                      ;Save to QUEUE
1643   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01702         count = count + 1
1644   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1645   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1646   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1647   0080           01700         movwf INDF                      ;Save to QUEUE
1648   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01702         count = count + 1
1649   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
164A   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
164B   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
164C   0080           01700         movwf INDF                      ;Save to QUEUE
164D   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01702         count = count + 1
164E   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
164F   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1650   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1651   0080           01700         movwf INDF                      ;Save to QUEUE
1652   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01702         count = count + 1
1653   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1654   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1655   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1656   0080           01700         movwf INDF                      ;Save to QUEUE
1657   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01702         count = count + 1
1658   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1659   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
165A   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
165B   0080           01700         movwf INDF                      ;Save to QUEUE
165C   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01702         count = count + 1
165D   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
165E   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

165F   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1660   0080           01700         movwf INDF                      ;Save to QUEUE
1661   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01702         count = count + 1
1662   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1663   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1664   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1665   0080           01700         movwf INDF                      ;Save to QUEUE
1666   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01702         count = count + 1
1667   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1668   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1669   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
166A   0080           01700         movwf INDF                      ;Save to QUEUE
166B   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01702         count = count + 1
166C   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
166D   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
166E   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
166F   0080           01700         movwf INDF                      ;Save to QUEUE
1670   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01702         count = count + 1
1671   1409           01697             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1672   1009           01698             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1673   0808           01699         movf ADC_DATAPORT, W            ;Save Sample
1674   0080           01700         movwf INDF                      ;Save to QUEUE
1675   0A84           01701         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01702         count = count + 1
                      01703     endw
1676   1409           01704     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
1677   1009           01705     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
1678   0808           01706     movf ADC_DATAPORT, W                ;Sample
1679   0080           01707     movwf INDF
167A   1784           01708     bsf FSR, 7                                                  ;goto bank 2
  00000001            01709     count = 1
                      01710     while count < D'39'
167B   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
167C   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
167D   0808           01713         movf ADC_DATAPORT, W            ;Sample
167E   0080           01714         movwf INDF                      ;Save to QUEUE
167F   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01716         count = count + 1
1680   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1681   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1682   0808           01713         movf ADC_DATAPORT, W            ;Sample
1683   0080           01714         movwf INDF                      ;Save to QUEUE
1684   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01716         count = count + 1
1685   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1686   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1687   0808           01713         movf ADC_DATAPORT, W            ;Sample
1688   0080           01714         movwf INDF                      ;Save to QUEUE
1689   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01716         count = count + 1
168A   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
168B   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
168C   0808           01713         movf ADC_DATAPORT, W            ;Sample
168D   0080           01714         movwf INDF                      ;Save to QUEUE
168E   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01716         count = count + 1
168F   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1690   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1691   0808           01713         movf ADC_DATAPORT, W            ;Sample
1692   0080           01714         movwf INDF                      ;Save to QUEUE
1693   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01716         count = count + 1
1694   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1695   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1696   0808           01713         movf ADC_DATAPORT, W            ;Sample
1697   0080           01714         movwf INDF                      ;Save to QUEUE
1698   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01716         count = count + 1
1699   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
169A   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
169B   0808           01713         movf ADC_DATAPORT, W            ;Sample
169C   0080           01714         movwf INDF                      ;Save to QUEUE
169D   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01716         count = count + 1
169E   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
169F   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16A0   0808           01713         movf ADC_DATAPORT, W            ;Sample
16A1   0080           01714         movwf INDF                      ;Save to QUEUE
16A2   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01716         count = count + 1
16A3   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16A4   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16A5   0808           01713         movf ADC_DATAPORT, W            ;Sample
16A6   0080           01714         movwf INDF                      ;Save to QUEUE
16A7   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01716         count = count + 1
16A8   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16A9   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16AA   0808           01713         movf ADC_DATAPORT, W            ;Sample
16AB   0080           01714         movwf INDF                      ;Save to QUEUE
16AC   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01716         count = count + 1
16AD   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16AE   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16AF   0808           01713         movf ADC_DATAPORT, W            ;Sample
16B0   0080           01714         movwf INDF                      ;Save to QUEUE
16B1   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01716         count = count + 1
16B2   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B3   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B4   0808           01713         movf ADC_DATAPORT, W            ;Sample
16B5   0080           01714         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16B6   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01716         count = count + 1
16B7   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B8   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B9   0808           01713         movf ADC_DATAPORT, W            ;Sample
16BA   0080           01714         movwf INDF                      ;Save to QUEUE
16BB   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01716         count = count + 1
16BC   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16BD   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16BE   0808           01713         movf ADC_DATAPORT, W            ;Sample
16BF   0080           01714         movwf INDF                      ;Save to QUEUE
16C0   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01716         count = count + 1
16C1   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C2   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C3   0808           01713         movf ADC_DATAPORT, W            ;Sample
16C4   0080           01714         movwf INDF                      ;Save to QUEUE
16C5   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01716         count = count + 1
16C6   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C7   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C8   0808           01713         movf ADC_DATAPORT, W            ;Sample
16C9   0080           01714         movwf INDF                      ;Save to QUEUE
16CA   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01716         count = count + 1
16CB   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16CC   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16CD   0808           01713         movf ADC_DATAPORT, W            ;Sample
16CE   0080           01714         movwf INDF                      ;Save to QUEUE
16CF   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01716         count = count + 1
16D0   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16D1   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16D2   0808           01713         movf ADC_DATAPORT, W            ;Sample
16D3   0080           01714         movwf INDF                      ;Save to QUEUE
16D4   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01716         count = count + 1
16D5   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16D6   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16D7   0808           01713         movf ADC_DATAPORT, W            ;Sample
16D8   0080           01714         movwf INDF                      ;Save to QUEUE
16D9   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01716         count = count + 1
16DA   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16DB   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16DC   0808           01713         movf ADC_DATAPORT, W            ;Sample
16DD   0080           01714         movwf INDF                      ;Save to QUEUE
16DE   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01716         count = count + 1
16DF   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E0   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E1   0808           01713         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16E2   0080           01714         movwf INDF                      ;Save to QUEUE
16E3   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01716         count = count + 1
16E4   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E5   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E6   0808           01713         movf ADC_DATAPORT, W            ;Sample
16E7   0080           01714         movwf INDF                      ;Save to QUEUE
16E8   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01716         count = count + 1
16E9   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16EA   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16EB   0808           01713         movf ADC_DATAPORT, W            ;Sample
16EC   0080           01714         movwf INDF                      ;Save to QUEUE
16ED   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01716         count = count + 1
16EE   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16EF   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16F0   0808           01713         movf ADC_DATAPORT, W            ;Sample
16F1   0080           01714         movwf INDF                      ;Save to QUEUE
16F2   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01716         count = count + 1
16F3   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F4   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16F5   0808           01713         movf ADC_DATAPORT, W            ;Sample
16F6   0080           01714         movwf INDF                      ;Save to QUEUE
16F7   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01716         count = count + 1
16F8   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F9   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16FA   0808           01713         movf ADC_DATAPORT, W            ;Sample
16FB   0080           01714         movwf INDF                      ;Save to QUEUE
16FC   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01716         count = count + 1
16FD   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16FE   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16FF   0808           01713         movf ADC_DATAPORT, W            ;Sample
1700   0080           01714         movwf INDF                      ;Save to QUEUE
1701   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01716         count = count + 1
1702   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1703   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1704   0808           01713         movf ADC_DATAPORT, W            ;Sample
1705   0080           01714         movwf INDF                      ;Save to QUEUE
1706   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01716         count = count + 1
1707   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1708   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1709   0808           01713         movf ADC_DATAPORT, W            ;Sample
170A   0080           01714         movwf INDF                      ;Save to QUEUE
170B   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01716         count = count + 1
170C   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
170D   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

170E   0808           01713         movf ADC_DATAPORT, W            ;Sample
170F   0080           01714         movwf INDF                      ;Save to QUEUE
1710   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01716         count = count + 1
1711   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1712   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1713   0808           01713         movf ADC_DATAPORT, W            ;Sample
1714   0080           01714         movwf INDF                      ;Save to QUEUE
1715   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01716         count = count + 1
1716   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1717   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1718   0808           01713         movf ADC_DATAPORT, W            ;Sample
1719   0080           01714         movwf INDF                      ;Save to QUEUE
171A   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01716         count = count + 1
171B   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
171C   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
171D   0808           01713         movf ADC_DATAPORT, W            ;Sample
171E   0080           01714         movwf INDF                      ;Save to QUEUE
171F   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01716         count = count + 1
1720   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1721   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1722   0808           01713         movf ADC_DATAPORT, W            ;Sample
1723   0080           01714         movwf INDF                      ;Save to QUEUE
1724   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01716         count = count + 1
1725   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1726   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1727   0808           01713         movf ADC_DATAPORT, W            ;Sample
1728   0080           01714         movwf INDF                      ;Save to QUEUE
1729   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01716         count = count + 1
172A   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
172B   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
172C   0808           01713         movf ADC_DATAPORT, W            ;Sample
172D   0080           01714         movwf INDF                      ;Save to QUEUE
172E   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01716         count = count + 1
172F   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1730   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1731   0808           01713         movf ADC_DATAPORT, W            ;Sample
1732   0080           01714         movwf INDF                      ;Save to QUEUE
1733   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01716         count = count + 1
1734   1409           01711         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1735   1009           01712         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1736   0808           01713         movf ADC_DATAPORT, W            ;Sample
1737   0080           01714         movwf INDF                      ;Save to QUEUE
1738   0384           01715         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01716         count = count + 1
                      01717         endw
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1739   1409           01718     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
173A   0808           01719     movf ADC_DATAPORT, W                ;Sample
                      01720         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
173B   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
173C   118A               M                 bcf PCLATH, 3
                          M         endif
173D   2E33               M         goto SampleRep5MEndC
                      01721         
173E                  01722 SampleRep5MStep3
173E   2F3F           01723     goto $ + 1
173F   1009           01724     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1740   2F41           01725         goto $ + 1
1741   0000           01726         nop
  0000                01727     local count
  00000001            01728     count = 1
                      01729     while count < D'25'
1742   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1743   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1744   0808           01732         movf ADC_DATAPORT, W            ;Sample
1745   0080           01733         movwf INDF                      ;Save to QUEUE
1746   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01735         count = count + 1
1747   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1748   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1749   0808           01732         movf ADC_DATAPORT, W            ;Sample
174A   0080           01733         movwf INDF                      ;Save to QUEUE
174B   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01735         count = count + 1
174C   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
174D   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
174E   0808           01732         movf ADC_DATAPORT, W            ;Sample
174F   0080           01733         movwf INDF                      ;Save to QUEUE
1750   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01735         count = count + 1
1751   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1752   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1753   0808           01732         movf ADC_DATAPORT, W            ;Sample
1754   0080           01733         movwf INDF                      ;Save to QUEUE
1755   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01735         count = count + 1
1756   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1757   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1758   0808           01732         movf ADC_DATAPORT, W            ;Sample
1759   0080           01733         movwf INDF                      ;Save to QUEUE
175A   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01735         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

175B   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
175C   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
175D   0808           01732         movf ADC_DATAPORT, W            ;Sample
175E   0080           01733         movwf INDF                      ;Save to QUEUE
175F   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01735         count = count + 1
1760   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1761   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1762   0808           01732         movf ADC_DATAPORT, W            ;Sample
1763   0080           01733         movwf INDF                      ;Save to QUEUE
1764   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01735         count = count + 1
1765   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1766   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1767   0808           01732         movf ADC_DATAPORT, W            ;Sample
1768   0080           01733         movwf INDF                      ;Save to QUEUE
1769   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01735         count = count + 1
176A   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
176B   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
176C   0808           01732         movf ADC_DATAPORT, W            ;Sample
176D   0080           01733         movwf INDF                      ;Save to QUEUE
176E   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01735         count = count + 1
176F   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1770   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1771   0808           01732         movf ADC_DATAPORT, W            ;Sample
1772   0080           01733         movwf INDF                      ;Save to QUEUE
1773   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01735         count = count + 1
1774   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1775   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1776   0808           01732         movf ADC_DATAPORT, W            ;Sample
1777   0080           01733         movwf INDF                      ;Save to QUEUE
1778   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01735         count = count + 1
1779   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
177A   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
177B   0808           01732         movf ADC_DATAPORT, W            ;Sample
177C   0080           01733         movwf INDF                      ;Save to QUEUE
177D   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01735         count = count + 1
177E   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
177F   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1780   0808           01732         movf ADC_DATAPORT, W            ;Sample
1781   0080           01733         movwf INDF                      ;Save to QUEUE
1782   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01735         count = count + 1
1783   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1784   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1785   0808           01732         movf ADC_DATAPORT, W            ;Sample
1786   0080           01733         movwf INDF                      ;Save to QUEUE
1787   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000F            01735         count = count + 1
1788   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1789   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
178A   0808           01732         movf ADC_DATAPORT, W            ;Sample
178B   0080           01733         movwf INDF                      ;Save to QUEUE
178C   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01735         count = count + 1
178D   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
178E   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
178F   0808           01732         movf ADC_DATAPORT, W            ;Sample
1790   0080           01733         movwf INDF                      ;Save to QUEUE
1791   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01735         count = count + 1
1792   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1793   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1794   0808           01732         movf ADC_DATAPORT, W            ;Sample
1795   0080           01733         movwf INDF                      ;Save to QUEUE
1796   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01735         count = count + 1
1797   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1798   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1799   0808           01732         movf ADC_DATAPORT, W            ;Sample
179A   0080           01733         movwf INDF                      ;Save to QUEUE
179B   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01735         count = count + 1
179C   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
179D   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
179E   0808           01732         movf ADC_DATAPORT, W            ;Sample
179F   0080           01733         movwf INDF                      ;Save to QUEUE
17A0   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01735         count = count + 1
17A1   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A2   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A3   0808           01732         movf ADC_DATAPORT, W            ;Sample
17A4   0080           01733         movwf INDF                      ;Save to QUEUE
17A5   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01735         count = count + 1
17A6   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A7   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A8   0808           01732         movf ADC_DATAPORT, W            ;Sample
17A9   0080           01733         movwf INDF                      ;Save to QUEUE
17AA   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01735         count = count + 1
17AB   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17AC   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17AD   0808           01732         movf ADC_DATAPORT, W            ;Sample
17AE   0080           01733         movwf INDF                      ;Save to QUEUE
17AF   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01735         count = count + 1
17B0   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B1   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B2   0808           01732         movf ADC_DATAPORT, W            ;Sample
17B3   0080           01733         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17B4   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01735         count = count + 1
17B5   1409           01730         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B6   1009           01731         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B7   0808           01732         movf ADC_DATAPORT, W            ;Sample
17B8   0080           01733         movwf INDF                      ;Save to QUEUE
17B9   0384           01734         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01735         count = count + 1
                      01736         endw
17BA   1409           01737     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
17BB   1009           01738     bcf ADC_CONTROLPORT, RDD
17BC   0808           01739     movf ADC_DATAPORT, W                ;Sample
17BD   0080           01740     movwf INDF
17BE   1783           01741     bsf STATUS, IRP                                             ;goto bank 4
  00000001            01742     count = 1
                      01743     while count < D'26'
17BF   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17C0   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17C1   0808           01746         movf ADC_DATAPORT, W            ;Sample
17C2   0080           01747         movwf INDF                      ;Save to QUEUE
17C3   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01749         count = count + 1
17C4   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17C5   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17C6   0808           01746         movf ADC_DATAPORT, W            ;Sample
17C7   0080           01747         movwf INDF                      ;Save to QUEUE
17C8   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01749         count = count + 1
17C9   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17CA   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17CB   0808           01746         movf ADC_DATAPORT, W            ;Sample
17CC   0080           01747         movwf INDF                      ;Save to QUEUE
17CD   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01749         count = count + 1
17CE   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17CF   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D0   0808           01746         movf ADC_DATAPORT, W            ;Sample
17D1   0080           01747         movwf INDF                      ;Save to QUEUE
17D2   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01749         count = count + 1
17D3   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D4   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D5   0808           01746         movf ADC_DATAPORT, W            ;Sample
17D6   0080           01747         movwf INDF                      ;Save to QUEUE
17D7   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01749         count = count + 1
17D8   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D9   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17DA   0808           01746         movf ADC_DATAPORT, W            ;Sample
17DB   0080           01747         movwf INDF                      ;Save to QUEUE
17DC   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01749         count = count + 1
17DD   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17DE   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17DF   0808           01746         movf ADC_DATAPORT, W            ;Sample
17E0   0080           01747         movwf INDF                      ;Save to QUEUE
17E1   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01749         count = count + 1
17E2   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E3   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E4   0808           01746         movf ADC_DATAPORT, W            ;Sample
17E5   0080           01747         movwf INDF                      ;Save to QUEUE
17E6   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01749         count = count + 1
17E7   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E8   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E9   0808           01746         movf ADC_DATAPORT, W            ;Sample
17EA   0080           01747         movwf INDF                      ;Save to QUEUE
17EB   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01749         count = count + 1
17EC   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17ED   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17EE   0808           01746         movf ADC_DATAPORT, W            ;Sample
17EF   0080           01747         movwf INDF                      ;Save to QUEUE
17F0   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01749         count = count + 1
17F1   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17F2   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17F3   0808           01746         movf ADC_DATAPORT, W            ;Sample
17F4   0080           01747         movwf INDF                      ;Save to QUEUE
17F5   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01749         count = count + 1
17F6   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17F7   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17F8   0808           01746         movf ADC_DATAPORT, W            ;Sample
17F9   0080           01747         movwf INDF                      ;Save to QUEUE
17FA   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01749         count = count + 1
17FB   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17FC   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17FD   0808           01746         movf ADC_DATAPORT, W            ;Sample
17FE   0080           01747         movwf INDF                      ;Save to QUEUE
17FF   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01749         count = count + 1
1800   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1801   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1802   0808           01746         movf ADC_DATAPORT, W            ;Sample
1803   0080           01747         movwf INDF                      ;Save to QUEUE
1804   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01749         count = count + 1
1805   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1806   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1807   0808           01746         movf ADC_DATAPORT, W            ;Sample
1808   0080           01747         movwf INDF                      ;Save to QUEUE
1809   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01749         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

180A   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
180B   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
180C   0808           01746         movf ADC_DATAPORT, W            ;Sample
180D   0080           01747         movwf INDF                      ;Save to QUEUE
180E   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01749         count = count + 1
180F   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1810   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1811   0808           01746         movf ADC_DATAPORT, W            ;Sample
1812   0080           01747         movwf INDF                      ;Save to QUEUE
1813   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01749         count = count + 1
1814   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1815   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1816   0808           01746         movf ADC_DATAPORT, W            ;Sample
1817   0080           01747         movwf INDF                      ;Save to QUEUE
1818   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01749         count = count + 1
1819   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
181A   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
181B   0808           01746         movf ADC_DATAPORT, W            ;Sample
181C   0080           01747         movwf INDF                      ;Save to QUEUE
181D   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01749         count = count + 1
181E   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
181F   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1820   0808           01746         movf ADC_DATAPORT, W            ;Sample
1821   0080           01747         movwf INDF                      ;Save to QUEUE
1822   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01749         count = count + 1
1823   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1824   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1825   0808           01746         movf ADC_DATAPORT, W            ;Sample
1826   0080           01747         movwf INDF                      ;Save to QUEUE
1827   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01749         count = count + 1
1828   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1829   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
182A   0808           01746         movf ADC_DATAPORT, W            ;Sample
182B   0080           01747         movwf INDF                      ;Save to QUEUE
182C   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01749         count = count + 1
182D   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
182E   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
182F   0808           01746         movf ADC_DATAPORT, W            ;Sample
1830   0080           01747         movwf INDF                      ;Save to QUEUE
1831   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01749         count = count + 1
1832   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1833   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1834   0808           01746         movf ADC_DATAPORT, W            ;Sample
1835   0080           01747         movwf INDF                      ;Save to QUEUE
1836   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000019            01749         count = count + 1
1837   1409           01744         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1838   1009           01745         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1839   0808           01746         movf ADC_DATAPORT, W            ;Sample
183A   0080           01747         movwf INDF                      ;Save to QUEUE
183B   0A84           01748         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01749         count = count + 1
                      01750         endw
183C   1409           01751     bsf ADC_CONTROLPORT, RDD
183D   0808           01752     movf ADC_DATAPORT, W            ;Sample
                      01753         MGOTO SampleRep5MEndA
                          M         if (SampleRep5MEndA & (0x1000))
183E   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndA & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
183F   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1840   2E30               M         goto SampleRep5MEndA
                      01754         
1841                  01755 SampleRep5MStep4
1841   2842           01756     goto $ + 1
1842   0000           01757     nop
1843   1009           01758     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1844   2845           01759         goto $ + 1
1845   0000           01760         nop
  0000                01761     local count
  00000001            01762     count = 1
                      01763     while count < D'38'
1846   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1847   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1848   0808           01766         movf ADC_DATAPORT, W            ;Sample
1849   0080           01767         movwf INDF                      ;Save to QUEUE
184A   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01769         count = count + 1
184B   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
184C   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
184D   0808           01766         movf ADC_DATAPORT, W            ;Sample
184E   0080           01767         movwf INDF                      ;Save to QUEUE
184F   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01769         count = count + 1
1850   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1851   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1852   0808           01766         movf ADC_DATAPORT, W            ;Sample
1853   0080           01767         movwf INDF                      ;Save to QUEUE
1854   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01769         count = count + 1
1855   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1856   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1857   0808           01766         movf ADC_DATAPORT, W            ;Sample
1858   0080           01767         movwf INDF                      ;Save to QUEUE
1859   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01769         count = count + 1
185A   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
185B   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
185C   0808           01766         movf ADC_DATAPORT, W            ;Sample
185D   0080           01767         movwf INDF                      ;Save to QUEUE
185E   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01769         count = count + 1
185F   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1860   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1861   0808           01766         movf ADC_DATAPORT, W            ;Sample
1862   0080           01767         movwf INDF                      ;Save to QUEUE
1863   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01769         count = count + 1
1864   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1865   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1866   0808           01766         movf ADC_DATAPORT, W            ;Sample
1867   0080           01767         movwf INDF                      ;Save to QUEUE
1868   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01769         count = count + 1
1869   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
186A   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
186B   0808           01766         movf ADC_DATAPORT, W            ;Sample
186C   0080           01767         movwf INDF                      ;Save to QUEUE
186D   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01769         count = count + 1
186E   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
186F   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1870   0808           01766         movf ADC_DATAPORT, W            ;Sample
1871   0080           01767         movwf INDF                      ;Save to QUEUE
1872   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01769         count = count + 1
1873   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1874   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1875   0808           01766         movf ADC_DATAPORT, W            ;Sample
1876   0080           01767         movwf INDF                      ;Save to QUEUE
1877   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01769         count = count + 1
1878   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1879   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
187A   0808           01766         movf ADC_DATAPORT, W            ;Sample
187B   0080           01767         movwf INDF                      ;Save to QUEUE
187C   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01769         count = count + 1
187D   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
187E   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
187F   0808           01766         movf ADC_DATAPORT, W            ;Sample
1880   0080           01767         movwf INDF                      ;Save to QUEUE
1881   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01769         count = count + 1
1882   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1883   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1884   0808           01766         movf ADC_DATAPORT, W            ;Sample
1885   0080           01767         movwf INDF                      ;Save to QUEUE
1886   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01769         count = count + 1
1887   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1888   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1889   0808           01766         movf ADC_DATAPORT, W            ;Sample
188A   0080           01767         movwf INDF                      ;Save to QUEUE
188B   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01769         count = count + 1
188C   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
188D   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
188E   0808           01766         movf ADC_DATAPORT, W            ;Sample
188F   0080           01767         movwf INDF                      ;Save to QUEUE
1890   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01769         count = count + 1
1891   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1892   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1893   0808           01766         movf ADC_DATAPORT, W            ;Sample
1894   0080           01767         movwf INDF                      ;Save to QUEUE
1895   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01769         count = count + 1
1896   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1897   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1898   0808           01766         movf ADC_DATAPORT, W            ;Sample
1899   0080           01767         movwf INDF                      ;Save to QUEUE
189A   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01769         count = count + 1
189B   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
189C   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
189D   0808           01766         movf ADC_DATAPORT, W            ;Sample
189E   0080           01767         movwf INDF                      ;Save to QUEUE
189F   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01769         count = count + 1
18A0   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A1   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A2   0808           01766         movf ADC_DATAPORT, W            ;Sample
18A3   0080           01767         movwf INDF                      ;Save to QUEUE
18A4   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01769         count = count + 1
18A5   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A6   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A7   0808           01766         movf ADC_DATAPORT, W            ;Sample
18A8   0080           01767         movwf INDF                      ;Save to QUEUE
18A9   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01769         count = count + 1
18AA   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18AB   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18AC   0808           01766         movf ADC_DATAPORT, W            ;Sample
18AD   0080           01767         movwf INDF                      ;Save to QUEUE
18AE   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01769         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

18AF   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18B0   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18B1   0808           01766         movf ADC_DATAPORT, W            ;Sample
18B2   0080           01767         movwf INDF                      ;Save to QUEUE
18B3   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01769         count = count + 1
18B4   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18B5   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18B6   0808           01766         movf ADC_DATAPORT, W            ;Sample
18B7   0080           01767         movwf INDF                      ;Save to QUEUE
18B8   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01769         count = count + 1
18B9   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18BA   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18BB   0808           01766         movf ADC_DATAPORT, W            ;Sample
18BC   0080           01767         movwf INDF                      ;Save to QUEUE
18BD   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01769         count = count + 1
18BE   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18BF   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C0   0808           01766         movf ADC_DATAPORT, W            ;Sample
18C1   0080           01767         movwf INDF                      ;Save to QUEUE
18C2   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01769         count = count + 1
18C3   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C4   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C5   0808           01766         movf ADC_DATAPORT, W            ;Sample
18C6   0080           01767         movwf INDF                      ;Save to QUEUE
18C7   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01769         count = count + 1
18C8   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C9   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18CA   0808           01766         movf ADC_DATAPORT, W            ;Sample
18CB   0080           01767         movwf INDF                      ;Save to QUEUE
18CC   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01769         count = count + 1
18CD   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18CE   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18CF   0808           01766         movf ADC_DATAPORT, W            ;Sample
18D0   0080           01767         movwf INDF                      ;Save to QUEUE
18D1   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01769         count = count + 1
18D2   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D3   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D4   0808           01766         movf ADC_DATAPORT, W            ;Sample
18D5   0080           01767         movwf INDF                      ;Save to QUEUE
18D6   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01769         count = count + 1
18D7   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D8   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D9   0808           01766         movf ADC_DATAPORT, W            ;Sample
18DA   0080           01767         movwf INDF                      ;Save to QUEUE
18DB   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001F            01769         count = count + 1
18DC   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18DD   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18DE   0808           01766         movf ADC_DATAPORT, W            ;Sample
18DF   0080           01767         movwf INDF                      ;Save to QUEUE
18E0   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01769         count = count + 1
18E1   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18E2   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18E3   0808           01766         movf ADC_DATAPORT, W            ;Sample
18E4   0080           01767         movwf INDF                      ;Save to QUEUE
18E5   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01769         count = count + 1
18E6   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18E7   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18E8   0808           01766         movf ADC_DATAPORT, W            ;Sample
18E9   0080           01767         movwf INDF                      ;Save to QUEUE
18EA   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01769         count = count + 1
18EB   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18EC   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18ED   0808           01766         movf ADC_DATAPORT, W            ;Sample
18EE   0080           01767         movwf INDF                      ;Save to QUEUE
18EF   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01769         count = count + 1
18F0   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F1   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F2   0808           01766         movf ADC_DATAPORT, W            ;Sample
18F3   0080           01767         movwf INDF                      ;Save to QUEUE
18F4   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01769         count = count + 1
18F5   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F6   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F7   0808           01766         movf ADC_DATAPORT, W            ;Sample
18F8   0080           01767         movwf INDF                      ;Save to QUEUE
18F9   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01769         count = count + 1
18FA   1409           01764         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18FB   1009           01765         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18FC   0808           01766         movf ADC_DATAPORT, W            ;Sample
18FD   0080           01767         movwf INDF                      ;Save to QUEUE
18FE   0A84           01768         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01769         count = count + 1
                      01770         endw
18FF   1409           01771     bsf ADC_CONTROLPORT, RDD
1900   1009           01772     bcf ADC_CONTROLPORT, RDD
1901   0808           01773     movf ADC_DATAPORT, W            ;Sample
1902   0080           01774     movwf INDF
1903   1384           01775     bcf FSR, 7                                                  ;goto bank 3
  00000001            01776     count = 1
                      01777     while count < D'13'
1904   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1905   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1906   0808           01780             movf ADC_DATAPORT, W
1907   0080           01781         movwf INDF                      ;Save to QUEUE
1908   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01783         count = count + 1
1909   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
190A   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
190B   0808           01780             movf ADC_DATAPORT, W
190C   0080           01781         movwf INDF                      ;Save to QUEUE
190D   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01783         count = count + 1
190E   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
190F   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1910   0808           01780             movf ADC_DATAPORT, W
1911   0080           01781         movwf INDF                      ;Save to QUEUE
1912   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01783         count = count + 1
1913   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1914   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1915   0808           01780             movf ADC_DATAPORT, W
1916   0080           01781         movwf INDF                      ;Save to QUEUE
1917   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01783         count = count + 1
1918   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1919   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
191A   0808           01780             movf ADC_DATAPORT, W
191B   0080           01781         movwf INDF                      ;Save to QUEUE
191C   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01783         count = count + 1
191D   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
191E   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
191F   0808           01780             movf ADC_DATAPORT, W
1920   0080           01781         movwf INDF                      ;Save to QUEUE
1921   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01783         count = count + 1
1922   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1923   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1924   0808           01780             movf ADC_DATAPORT, W
1925   0080           01781         movwf INDF                      ;Save to QUEUE
1926   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01783         count = count + 1
1927   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1928   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1929   0808           01780             movf ADC_DATAPORT, W
192A   0080           01781         movwf INDF                      ;Save to QUEUE
192B   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01783         count = count + 1
192C   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
192D   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
192E   0808           01780             movf ADC_DATAPORT, W
192F   0080           01781         movwf INDF                      ;Save to QUEUE
1930   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01783         count = count + 1
1931   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1932   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1933   0808           01780             movf ADC_DATAPORT, W
1934   0080           01781         movwf INDF                      ;Save to QUEUE
1935   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01783         count = count + 1
1936   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1937   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1938   0808           01780             movf ADC_DATAPORT, W
1939   0080           01781         movwf INDF                      ;Save to QUEUE
193A   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01783         count = count + 1
193B   1409           01778         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
193C   1009           01779         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
193D   0808           01780             movf ADC_DATAPORT, W
193E   0080           01781         movwf INDF                      ;Save to QUEUE
193F   0384           01782         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01783         count = count + 1
                      01784         endw
1940   1409           01785     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
1941   0808           01786     movf ADC_DATAPORT, W                ;Sample
                      01787         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
1942   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1943   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1944   2E33               M         goto SampleRep5MEndC
                      01788 
1945                  01789 SampleRep5MStep5
1945   2946           01790     goto $ + 1
                      01791         if (Sample1MhzEnd & (0x1000))
                      01792                 bsf PCLATH, 4
                      01793         else
1946   120A           01794                 bcf PCLATH, 4
                      01795         endif
                      01796         if (Sample1MhzEnd & (0x800))
1947   158A           01797                 bsf PCLATH, 3
                      01798         else
                      01799                 bcf PCLATH, 3
                      01800         endif
1948   1009           01801     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1949   0000           01802         nop
Message[306]: Crossing page boundary -- ensure page bits are set.
194A   2813           01803         goto Sample1MhzEnd
                      01804         
                      01805 ;Repetative sample
                      01806 ;Equivalent sampling rate = 2.5 MHz with 20 MHz clock
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01807 ;-----------------------------------------------------------------------------
194B                  01808 SampleRep2M
194B   3019           01809     movlw high SampleRep2MPickSt
194C   008A           01810     movwf PCLATH
194D   087A           01811         movf modetempb, w
194E   0782           01812         addwf PCL, f
194F                  01813 SampleRep2MPickSt
                      01814         MGOTO SampleRep2MStep1
                          M         if (SampleRep2MStep1 & (0x1000))
194F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep1 & (0x800))
1950   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
1951   2958               M         goto SampleRep2MStep1
                      01815         MGOTO SampleRep2MStep2
                          M         if (SampleRep2MStep2 & (0x1000))
1952   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep2 & (0x800))
1953   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
1954   2B5F               M         goto SampleRep2MStep2
                      01816         MGOTO SampleRep2MStep3
                          M         if (SampleRep2MStep3 & (0x1000))
1955   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep3 & (0x800))
1956   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
1957   2D60               M         goto SampleRep2MStep3
1958                  01817 SampleRep2MPickEn
1958                  01818 SampleRep2MStep1
1958   1009           01819     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01820     MOVLF BUFFERMIN, FSR                ;Initialize pointer
1959   3020               M     movlw BUFFERMIN
195A   0084               M     movwf FSR
195B   0000           01821     nop
  0000                01822     local count
  00000001            01823     count = 1
                      01824     while count < BUFFERSIZE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

195C   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
195D   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
195E   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
195F   0080           01828         movwf INDF                      ;Save to QUEUE
1960   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1961   0000           01830         nop
  00000002            01831         count = count + 1
1962   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1963   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1964   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1965   0080           01828         movwf INDF                      ;Save to QUEUE
1966   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1967   0000           01830         nop
  00000003            01831         count = count + 1
1968   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1969   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
196A   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
196B   0080           01828         movwf INDF                      ;Save to QUEUE
196C   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
196D   0000           01830         nop
  00000004            01831         count = count + 1
196E   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
196F   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1970   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1971   0080           01828         movwf INDF                      ;Save to QUEUE
1972   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1973   0000           01830         nop
  00000005            01831         count = count + 1
1974   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1975   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1976   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1977   0080           01828         movwf INDF                      ;Save to QUEUE
1978   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1979   0000           01830         nop
  00000006            01831         count = count + 1
197A   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
197B   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
197C   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
197D   0080           01828         movwf INDF                      ;Save to QUEUE
197E   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
197F   0000           01830         nop
  00000007            01831         count = count + 1
1980   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1981   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1982   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1983   0080           01828         movwf INDF                      ;Save to QUEUE
1984   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1985   0000           01830         nop
  00000008            01831         count = count + 1
1986   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1987   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1988   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1989   0080           01828         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

198A   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
198B   0000           01830         nop
  00000009            01831         count = count + 1
198C   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
198D   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
198E   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
198F   0080           01828         movwf INDF                      ;Save to QUEUE
1990   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1991   0000           01830         nop
  0000000A            01831         count = count + 1
1992   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1993   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1994   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1995   0080           01828         movwf INDF                      ;Save to QUEUE
1996   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1997   0000           01830         nop
  0000000B            01831         count = count + 1
1998   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1999   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
199A   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
199B   0080           01828         movwf INDF                      ;Save to QUEUE
199C   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
199D   0000           01830         nop
  0000000C            01831         count = count + 1
199E   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
199F   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19A0   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19A1   0080           01828         movwf INDF                      ;Save to QUEUE
19A2   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19A3   0000           01830         nop
  0000000D            01831         count = count + 1
19A4   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19A5   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19A6   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19A7   0080           01828         movwf INDF                      ;Save to QUEUE
19A8   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19A9   0000           01830         nop
  0000000E            01831         count = count + 1
19AA   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19AB   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19AC   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19AD   0080           01828         movwf INDF                      ;Save to QUEUE
19AE   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19AF   0000           01830         nop
  0000000F            01831         count = count + 1
19B0   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19B1   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19B2   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19B3   0080           01828         movwf INDF                      ;Save to QUEUE
19B4   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19B5   0000           01830         nop
  00000010            01831         count = count + 1
19B6   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19B7   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19B8   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19B9   0080           01828         movwf INDF                      ;Save to QUEUE
19BA   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19BB   0000           01830         nop
  00000011            01831         count = count + 1
19BC   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19BD   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19BE   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19BF   0080           01828         movwf INDF                      ;Save to QUEUE
19C0   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19C1   0000           01830         nop
  00000012            01831         count = count + 1
19C2   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19C3   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19C4   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19C5   0080           01828         movwf INDF                      ;Save to QUEUE
19C6   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19C7   0000           01830         nop
  00000013            01831         count = count + 1
19C8   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19C9   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19CA   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19CB   0080           01828         movwf INDF                      ;Save to QUEUE
19CC   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19CD   0000           01830         nop
  00000014            01831         count = count + 1
19CE   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19CF   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19D0   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19D1   0080           01828         movwf INDF                      ;Save to QUEUE
19D2   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19D3   0000           01830         nop
  00000015            01831         count = count + 1
19D4   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19D5   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19D6   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19D7   0080           01828         movwf INDF                      ;Save to QUEUE
19D8   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19D9   0000           01830         nop
  00000016            01831         count = count + 1
19DA   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19DB   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19DC   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19DD   0080           01828         movwf INDF                      ;Save to QUEUE
19DE   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19DF   0000           01830         nop
  00000017            01831         count = count + 1
19E0   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19E1   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19E2   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19E3   0080           01828         movwf INDF                      ;Save to QUEUE
19E4   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19E5   0000           01830         nop
  00000018            01831         count = count + 1
19E6   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19E7   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19E8   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19E9   0080           01828         movwf INDF                      ;Save to QUEUE
19EA   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19EB   0000           01830         nop
  00000019            01831         count = count + 1
19EC   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19ED   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19EE   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19EF   0080           01828         movwf INDF                      ;Save to QUEUE
19F0   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19F1   0000           01830         nop
  0000001A            01831         count = count + 1
19F2   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19F3   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19F4   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19F5   0080           01828         movwf INDF                      ;Save to QUEUE
19F6   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19F7   0000           01830         nop
  0000001B            01831         count = count + 1
19F8   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19F9   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19FA   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19FB   0080           01828         movwf INDF                      ;Save to QUEUE
19FC   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
19FD   0000           01830         nop
  0000001C            01831         count = count + 1
19FE   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
19FF   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A00   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A01   0080           01828         movwf INDF                      ;Save to QUEUE
1A02   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A03   0000           01830         nop
  0000001D            01831         count = count + 1
1A04   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A05   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A06   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A07   0080           01828         movwf INDF                      ;Save to QUEUE
1A08   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A09   0000           01830         nop
  0000001E            01831         count = count + 1
1A0A   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A0B   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A0C   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A0D   0080           01828         movwf INDF                      ;Save to QUEUE
1A0E   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A0F   0000           01830         nop
  0000001F            01831         count = count + 1
1A10   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A11   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A12   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A13   0080           01828         movwf INDF                      ;Save to QUEUE
1A14   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A15   0000           01830         nop
  00000020            01831         count = count + 1
1A16   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A17   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A18   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A19   0080           01828         movwf INDF                      ;Save to QUEUE
1A1A   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A1B   0000           01830         nop
  00000021            01831         count = count + 1
1A1C   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A1D   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A1E   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A1F   0080           01828         movwf INDF                      ;Save to QUEUE
1A20   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A21   0000           01830         nop
  00000022            01831         count = count + 1
1A22   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A23   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A24   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A25   0080           01828         movwf INDF                      ;Save to QUEUE
1A26   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A27   0000           01830         nop
  00000023            01831         count = count + 1
1A28   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A29   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A2A   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A2B   0080           01828         movwf INDF                      ;Save to QUEUE
1A2C   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A2D   0000           01830         nop
  00000024            01831         count = count + 1
1A2E   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A2F   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A30   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A31   0080           01828         movwf INDF                      ;Save to QUEUE
1A32   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A33   0000           01830         nop
  00000025            01831         count = count + 1
1A34   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A35   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A36   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A37   0080           01828         movwf INDF                      ;Save to QUEUE
1A38   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A39   0000           01830         nop
  00000026            01831         count = count + 1
1A3A   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A3B   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A3C   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A3D   0080           01828         movwf INDF                      ;Save to QUEUE
1A3E   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A3F   0000           01830         nop
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000027            01831         count = count + 1
1A40   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A41   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A42   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A43   0080           01828         movwf INDF                      ;Save to QUEUE
1A44   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A45   0000           01830         nop
  00000028            01831         count = count + 1
1A46   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A47   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A48   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A49   0080           01828         movwf INDF                      ;Save to QUEUE
1A4A   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A4B   0000           01830         nop
  00000029            01831         count = count + 1
1A4C   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A4D   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A4E   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A4F   0080           01828         movwf INDF                      ;Save to QUEUE
1A50   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A51   0000           01830         nop
  0000002A            01831         count = count + 1
1A52   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A53   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A54   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A55   0080           01828         movwf INDF                      ;Save to QUEUE
1A56   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A57   0000           01830         nop
  0000002B            01831         count = count + 1
1A58   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A59   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A5A   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A5B   0080           01828         movwf INDF                      ;Save to QUEUE
1A5C   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A5D   0000           01830         nop
  0000002C            01831         count = count + 1
1A5E   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A5F   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A60   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A61   0080           01828         movwf INDF                      ;Save to QUEUE
1A62   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A63   0000           01830         nop
  0000002D            01831         count = count + 1
1A64   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A65   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A66   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A67   0080           01828         movwf INDF                      ;Save to QUEUE
1A68   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A69   0000           01830         nop
  0000002E            01831         count = count + 1
1A6A   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A6B   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A6C   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A6D   0080           01828         movwf INDF                      ;Save to QUEUE
1A6E   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A6F   0000           01830         nop
  0000002F            01831         count = count + 1
1A70   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A71   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A72   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A73   0080           01828         movwf INDF                      ;Save to QUEUE
1A74   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A75   0000           01830         nop
  00000030            01831         count = count + 1
1A76   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A77   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A78   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A79   0080           01828         movwf INDF                      ;Save to QUEUE
1A7A   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A7B   0000           01830         nop
  00000031            01831         count = count + 1
1A7C   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A7D   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A7E   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A7F   0080           01828         movwf INDF                      ;Save to QUEUE
1A80   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A81   0000           01830         nop
  00000032            01831         count = count + 1
1A82   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A83   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A84   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A85   0080           01828         movwf INDF                      ;Save to QUEUE
1A86   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A87   0000           01830         nop
  00000033            01831         count = count + 1
1A88   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A89   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A8A   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A8B   0080           01828         movwf INDF                      ;Save to QUEUE
1A8C   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A8D   0000           01830         nop
  00000034            01831         count = count + 1
1A8E   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A8F   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A90   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A91   0080           01828         movwf INDF                      ;Save to QUEUE
1A92   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A93   0000           01830         nop
  00000035            01831         count = count + 1
1A94   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A95   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A96   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A97   0080           01828         movwf INDF                      ;Save to QUEUE
1A98   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A99   0000           01830         nop
  00000036            01831         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A9A   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1A9B   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A9C   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A9D   0080           01828         movwf INDF                      ;Save to QUEUE
1A9E   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1A9F   0000           01830         nop
  00000037            01831         count = count + 1
1AA0   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AA1   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AA2   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AA3   0080           01828         movwf INDF                      ;Save to QUEUE
1AA4   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AA5   0000           01830         nop
  00000038            01831         count = count + 1
1AA6   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AA7   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AA8   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AA9   0080           01828         movwf INDF                      ;Save to QUEUE
1AAA   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AAB   0000           01830         nop
  00000039            01831         count = count + 1
1AAC   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AAD   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AAE   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AAF   0080           01828         movwf INDF                      ;Save to QUEUE
1AB0   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AB1   0000           01830         nop
  0000003A            01831         count = count + 1
1AB2   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AB3   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AB4   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AB5   0080           01828         movwf INDF                      ;Save to QUEUE
1AB6   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AB7   0000           01830         nop
  0000003B            01831         count = count + 1
1AB8   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AB9   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1ABA   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1ABB   0080           01828         movwf INDF                      ;Save to QUEUE
1ABC   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1ABD   0000           01830         nop
  0000003C            01831         count = count + 1
1ABE   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1ABF   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AC0   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AC1   0080           01828         movwf INDF                      ;Save to QUEUE
1AC2   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AC3   0000           01830         nop
  0000003D            01831         count = count + 1
1AC4   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AC5   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AC6   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AC7   0080           01828         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1AC8   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AC9   0000           01830         nop
  0000003E            01831         count = count + 1
1ACA   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1ACB   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1ACC   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1ACD   0080           01828         movwf INDF                      ;Save to QUEUE
1ACE   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1ACF   0000           01830         nop
  0000003F            01831         count = count + 1
1AD0   0808           01825         movf ADC_DATAPORT, W            ;Save Sample
1AD1   1409           01826             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AD2   1009           01827             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AD3   0080           01828         movwf INDF                      ;Save to QUEUE
1AD4   0A84           01829         incf FSR, F                     ;Increment QUEUE pointer
1AD5   0000           01830         nop
  00000040            01831         count = count + 1
                      01832     endw
1AD6   0808           01833     movf ADC_DATAPORT, W
1AD7   1409           01834     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
1AD8   1009           01835     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
1AD9   0080           01836     movwf INDF
1ADA   1784           01837     bsf FSR, 7                                                  ;goto bank 2
1ADB   0000           01838     nop
  00000001            01839     count = 1
                      01840     while count < D'22'
1ADC   0808           01841         movf ADC_DATAPORT, W            ;Sample
1ADD   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1ADE   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1ADF   0080           01844         movwf INDF                      ;Save to QUEUE
1AE0   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AE1   0000           01846                 nop
  00000002            01847         count = count + 1
1AE2   0808           01841         movf ADC_DATAPORT, W            ;Sample
1AE3   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AE4   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AE5   0080           01844         movwf INDF                      ;Save to QUEUE
1AE6   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AE7   0000           01846                 nop
  00000003            01847         count = count + 1
1AE8   0808           01841         movf ADC_DATAPORT, W            ;Sample
1AE9   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AEA   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AEB   0080           01844         movwf INDF                      ;Save to QUEUE
1AEC   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AED   0000           01846                 nop
  00000004            01847         count = count + 1
1AEE   0808           01841         movf ADC_DATAPORT, W            ;Sample
1AEF   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AF0   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AF1   0080           01844         movwf INDF                      ;Save to QUEUE
1AF2   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AF3   0000           01846                 nop
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            01847         count = count + 1
1AF4   0808           01841         movf ADC_DATAPORT, W            ;Sample
1AF5   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AF6   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AF7   0080           01844         movwf INDF                      ;Save to QUEUE
1AF8   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AF9   0000           01846                 nop
  00000006            01847         count = count + 1
1AFA   0808           01841         movf ADC_DATAPORT, W            ;Sample
1AFB   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AFC   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AFD   0080           01844         movwf INDF                      ;Save to QUEUE
1AFE   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1AFF   0000           01846                 nop
  00000007            01847         count = count + 1
1B00   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B01   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B02   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B03   0080           01844         movwf INDF                      ;Save to QUEUE
1B04   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B05   0000           01846                 nop
  00000008            01847         count = count + 1
1B06   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B07   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B08   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B09   0080           01844         movwf INDF                      ;Save to QUEUE
1B0A   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B0B   0000           01846                 nop
  00000009            01847         count = count + 1
1B0C   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B0D   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B0E   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B0F   0080           01844         movwf INDF                      ;Save to QUEUE
1B10   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B11   0000           01846                 nop
  0000000A            01847         count = count + 1
1B12   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B13   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B14   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B15   0080           01844         movwf INDF                      ;Save to QUEUE
1B16   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B17   0000           01846                 nop
  0000000B            01847         count = count + 1
1B18   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B19   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B1A   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B1B   0080           01844         movwf INDF                      ;Save to QUEUE
1B1C   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B1D   0000           01846                 nop
  0000000C            01847         count = count + 1
1B1E   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B1F   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B20   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B21   0080           01844         movwf INDF                      ;Save to QUEUE
1B22   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B23   0000           01846                 nop
  0000000D            01847         count = count + 1
1B24   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B25   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B26   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B27   0080           01844         movwf INDF                      ;Save to QUEUE
1B28   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B29   0000           01846                 nop
  0000000E            01847         count = count + 1
1B2A   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B2B   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B2C   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B2D   0080           01844         movwf INDF                      ;Save to QUEUE
1B2E   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B2F   0000           01846                 nop
  0000000F            01847         count = count + 1
1B30   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B31   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B32   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B33   0080           01844         movwf INDF                      ;Save to QUEUE
1B34   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B35   0000           01846                 nop
  00000010            01847         count = count + 1
1B36   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B37   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B38   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B39   0080           01844         movwf INDF                      ;Save to QUEUE
1B3A   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B3B   0000           01846                 nop
  00000011            01847         count = count + 1
1B3C   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B3D   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B3E   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B3F   0080           01844         movwf INDF                      ;Save to QUEUE
1B40   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B41   0000           01846                 nop
  00000012            01847         count = count + 1
1B42   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B43   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B44   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B45   0080           01844         movwf INDF                      ;Save to QUEUE
1B46   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B47   0000           01846                 nop
  00000013            01847         count = count + 1
1B48   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B49   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B4A   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B4B   0080           01844         movwf INDF                      ;Save to QUEUE
1B4C   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B4D   0000           01846                 nop
  00000014            01847         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B4E   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B4F   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B50   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B51   0080           01844         movwf INDF                      ;Save to QUEUE
1B52   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B53   0000           01846                 nop
  00000015            01847         count = count + 1
1B54   0808           01841         movf ADC_DATAPORT, W            ;Sample
1B55   1409           01842         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B56   1009           01843         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B57   0080           01844         movwf INDF                      ;Save to QUEUE
1B58   0384           01845         decf FSR, F                     ;Increment QUEUE pointer
1B59   0000           01846                 nop
  00000016            01847         count = count + 1
                      01848         endw
1B5A   0808           01849     movf ADC_DATAPORT, W                ;Sample
1B5B   1409           01850     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
                      01851         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
1B5C   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1B5D   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1B5E   2E33               M         goto SampleRep5MEndC
                      01852 
1B5F                  01853 SampleRep2MStep2
1B5F   2B60           01854     goto $ + 1                                                  ;Delay 2
1B60   1009           01855     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1B61   2B62           01856     goto $ + 1                          ;Wait three cycles
1B62   0000           01857     nop
  0000                01858     local count
  00000001            01859     count = 1
                      01860     while count < D'42'
1B63   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B64   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B65   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B66   0080           01864         movwf INDF                      ;Save to QUEUE
1B67   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B68   0000           01866         nop
  00000002            01867         count = count + 1
1B69   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B6A   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B6B   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B6C   0080           01864         movwf INDF                      ;Save to QUEUE
1B6D   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B6E   0000           01866         nop
  00000003            01867         count = count + 1
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B6F   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B70   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B71   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B72   0080           01864         movwf INDF                      ;Save to QUEUE
1B73   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B74   0000           01866         nop
  00000004            01867         count = count + 1
1B75   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B76   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B77   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B78   0080           01864         movwf INDF                      ;Save to QUEUE
1B79   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B7A   0000           01866         nop
  00000005            01867         count = count + 1
1B7B   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B7C   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B7D   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B7E   0080           01864         movwf INDF                      ;Save to QUEUE
1B7F   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B80   0000           01866         nop
  00000006            01867         count = count + 1
1B81   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B82   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B83   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B84   0080           01864         movwf INDF                      ;Save to QUEUE
1B85   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B86   0000           01866         nop
  00000007            01867         count = count + 1
1B87   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B88   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B89   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B8A   0080           01864         movwf INDF                      ;Save to QUEUE
1B8B   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B8C   0000           01866         nop
  00000008            01867         count = count + 1
1B8D   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B8E   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B8F   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B90   0080           01864         movwf INDF                      ;Save to QUEUE
1B91   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B92   0000           01866         nop
  00000009            01867         count = count + 1
1B93   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B94   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B95   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B96   0080           01864         movwf INDF                      ;Save to QUEUE
1B97   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B98   0000           01866         nop
  0000000A            01867         count = count + 1
1B99   0808           01861         movf ADC_DATAPORT, W            ;Sample
1B9A   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B9B   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B9C   0080           01864         movwf INDF                      ;Save to QUEUE
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B9D   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1B9E   0000           01866         nop
  0000000B            01867         count = count + 1
1B9F   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BA0   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BA1   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BA2   0080           01864         movwf INDF                      ;Save to QUEUE
1BA3   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BA4   0000           01866         nop
  0000000C            01867         count = count + 1
1BA5   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BA6   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BA7   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BA8   0080           01864         movwf INDF                      ;Save to QUEUE
1BA9   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BAA   0000           01866         nop
  0000000D            01867         count = count + 1
1BAB   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BAC   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BAD   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BAE   0080           01864         movwf INDF                      ;Save to QUEUE
1BAF   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BB0   0000           01866         nop
  0000000E            01867         count = count + 1
1BB1   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BB2   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BB3   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BB4   0080           01864         movwf INDF                      ;Save to QUEUE
1BB5   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BB6   0000           01866         nop
  0000000F            01867         count = count + 1
1BB7   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BB8   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BB9   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BBA   0080           01864         movwf INDF                      ;Save to QUEUE
1BBB   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BBC   0000           01866         nop
  00000010            01867         count = count + 1
1BBD   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BBE   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BBF   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BC0   0080           01864         movwf INDF                      ;Save to QUEUE
1BC1   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BC2   0000           01866         nop
  00000011            01867         count = count + 1
1BC3   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BC4   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BC5   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BC6   0080           01864         movwf INDF                      ;Save to QUEUE
1BC7   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BC8   0000           01866         nop
  00000012            01867         count = count + 1
1BC9   0808           01861         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1BCA   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BCB   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BCC   0080           01864         movwf INDF                      ;Save to QUEUE
1BCD   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BCE   0000           01866         nop
  00000013            01867         count = count + 1
1BCF   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BD0   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BD1   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BD2   0080           01864         movwf INDF                      ;Save to QUEUE
1BD3   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BD4   0000           01866         nop
  00000014            01867         count = count + 1
1BD5   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BD6   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BD7   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BD8   0080           01864         movwf INDF                      ;Save to QUEUE
1BD9   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BDA   0000           01866         nop
  00000015            01867         count = count + 1
1BDB   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BDC   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BDD   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BDE   0080           01864         movwf INDF                      ;Save to QUEUE
1BDF   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BE0   0000           01866         nop
  00000016            01867         count = count + 1
1BE1   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BE2   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BE3   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BE4   0080           01864         movwf INDF                      ;Save to QUEUE
1BE5   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BE6   0000           01866         nop
  00000017            01867         count = count + 1
1BE7   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BE8   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BE9   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BEA   0080           01864         movwf INDF                      ;Save to QUEUE
1BEB   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BEC   0000           01866         nop
  00000018            01867         count = count + 1
1BED   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BEE   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BEF   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BF0   0080           01864         movwf INDF                      ;Save to QUEUE
1BF1   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BF2   0000           01866         nop
  00000019            01867         count = count + 1
1BF3   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BF4   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BF5   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BF6   0080           01864         movwf INDF                      ;Save to QUEUE
1BF7   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1BF8   0000           01866         nop
  0000001A            01867         count = count + 1
1BF9   0808           01861         movf ADC_DATAPORT, W            ;Sample
1BFA   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BFB   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BFC   0080           01864         movwf INDF                      ;Save to QUEUE
1BFD   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1BFE   0000           01866         nop
  0000001B            01867         count = count + 1
1BFF   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C00   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C01   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C02   0080           01864         movwf INDF                      ;Save to QUEUE
1C03   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C04   0000           01866         nop
  0000001C            01867         count = count + 1
1C05   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C06   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C07   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C08   0080           01864         movwf INDF                      ;Save to QUEUE
1C09   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C0A   0000           01866         nop
  0000001D            01867         count = count + 1
1C0B   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C0C   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C0D   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C0E   0080           01864         movwf INDF                      ;Save to QUEUE
1C0F   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C10   0000           01866         nop
  0000001E            01867         count = count + 1
1C11   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C12   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C13   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C14   0080           01864         movwf INDF                      ;Save to QUEUE
1C15   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C16   0000           01866         nop
  0000001F            01867         count = count + 1
1C17   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C18   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C19   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C1A   0080           01864         movwf INDF                      ;Save to QUEUE
1C1B   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C1C   0000           01866         nop
  00000020            01867         count = count + 1
1C1D   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C1E   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C1F   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C20   0080           01864         movwf INDF                      ;Save to QUEUE
1C21   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C22   0000           01866         nop
  00000021            01867         count = count + 1
1C23   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C24   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1C25   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C26   0080           01864         movwf INDF                      ;Save to QUEUE
1C27   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C28   0000           01866         nop
  00000022            01867         count = count + 1
1C29   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C2A   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C2B   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C2C   0080           01864         movwf INDF                      ;Save to QUEUE
1C2D   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C2E   0000           01866         nop
  00000023            01867         count = count + 1
1C2F   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C30   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C31   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C32   0080           01864         movwf INDF                      ;Save to QUEUE
1C33   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C34   0000           01866         nop
  00000024            01867         count = count + 1
1C35   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C36   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C37   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C38   0080           01864         movwf INDF                      ;Save to QUEUE
1C39   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C3A   0000           01866         nop
  00000025            01867         count = count + 1
1C3B   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C3C   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C3D   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C3E   0080           01864         movwf INDF                      ;Save to QUEUE
1C3F   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C40   0000           01866         nop
  00000026            01867         count = count + 1
1C41   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C42   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C43   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C44   0080           01864         movwf INDF                      ;Save to QUEUE
1C45   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C46   0000           01866         nop
  00000027            01867         count = count + 1
1C47   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C48   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C49   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C4A   0080           01864         movwf INDF                      ;Save to QUEUE
1C4B   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C4C   0000           01866         nop
  00000028            01867         count = count + 1
1C4D   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C4E   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C4F   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C50   0080           01864         movwf INDF                      ;Save to QUEUE
1C51   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C52   0000           01866         nop
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000029            01867         count = count + 1
1C53   0808           01861         movf ADC_DATAPORT, W            ;Sample
1C54   1409           01862         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C55   1009           01863         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C56   0080           01864         movwf INDF                      ;Save to QUEUE
1C57   0384           01865         decf FSR, F                     ;Increment QUEUE pointer
1C58   0000           01866         nop
  0000002A            01867         count = count + 1
                      01868         endw
1C59   0808           01869     movf ADC_DATAPORT, W
1C5A   1409           01870     bsf ADC_CONTROLPORT, RDD
1C5B   1009           01871     bcf ADC_CONTROLPORT, RDD
1C5C   0080           01872     movwf INDF
1C5D   1783           01873     bsf STATUS, IRP                                             ;goto bank 4
1C5E   0000           01874     nop
  00000001            01875     count = 1
                      01876     while count < D'43'
1C5F   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C60   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C61   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C62   0080           01880         movwf INDF                      ;Save to QUEUE
1C63   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C64   0000           01882         nop
  00000002            01883         count = count + 1
1C65   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C66   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C67   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C68   0080           01880         movwf INDF                      ;Save to QUEUE
1C69   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C6A   0000           01882         nop
  00000003            01883         count = count + 1
1C6B   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C6C   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C6D   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C6E   0080           01880         movwf INDF                      ;Save to QUEUE
1C6F   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C70   0000           01882         nop
  00000004            01883         count = count + 1
1C71   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C72   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C73   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C74   0080           01880         movwf INDF                      ;Save to QUEUE
1C75   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C76   0000           01882         nop
  00000005            01883         count = count + 1
1C77   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C78   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C79   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C7A   0080           01880         movwf INDF                      ;Save to QUEUE
1C7B   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C7C   0000           01882         nop
  00000006            01883         count = count + 1
1C7D   0808           01877         movf ADC_DATAPORT, W            ;Sample
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1C7E   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C7F   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C80   0080           01880         movwf INDF                      ;Save to QUEUE
1C81   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C82   0000           01882         nop
  00000007            01883         count = count + 1
1C83   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C84   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C85   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C86   0080           01880         movwf INDF                      ;Save to QUEUE
1C87   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C88   0000           01882         nop
  00000008            01883         count = count + 1
1C89   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C8A   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C8B   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C8C   0080           01880         movwf INDF                      ;Save to QUEUE
1C8D   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C8E   0000           01882         nop
  00000009            01883         count = count + 1
1C8F   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C90   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C91   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C92   0080           01880         movwf INDF                      ;Save to QUEUE
1C93   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C94   0000           01882         nop
  0000000A            01883         count = count + 1
1C95   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C96   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C97   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C98   0080           01880         movwf INDF                      ;Save to QUEUE
1C99   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1C9A   0000           01882         nop
  0000000B            01883         count = count + 1
1C9B   0808           01877         movf ADC_DATAPORT, W            ;Sample
1C9C   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C9D   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C9E   0080           01880         movwf INDF                      ;Save to QUEUE
1C9F   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CA0   0000           01882         nop
  0000000C            01883         count = count + 1
1CA1   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CA2   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CA3   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CA4   0080           01880         movwf INDF                      ;Save to QUEUE
1CA5   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CA6   0000           01882         nop
  0000000D            01883         count = count + 1
1CA7   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CA8   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CA9   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CAA   0080           01880         movwf INDF                      ;Save to QUEUE
1CAB   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1CAC   0000           01882         nop
  0000000E            01883         count = count + 1
1CAD   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CAE   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CAF   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CB0   0080           01880         movwf INDF                      ;Save to QUEUE
1CB1   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CB2   0000           01882         nop
  0000000F            01883         count = count + 1
1CB3   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CB4   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CB5   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CB6   0080           01880         movwf INDF                      ;Save to QUEUE
1CB7   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CB8   0000           01882         nop
  00000010            01883         count = count + 1
1CB9   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CBA   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CBB   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CBC   0080           01880         movwf INDF                      ;Save to QUEUE
1CBD   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CBE   0000           01882         nop
  00000011            01883         count = count + 1
1CBF   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CC0   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CC1   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CC2   0080           01880         movwf INDF                      ;Save to QUEUE
1CC3   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CC4   0000           01882         nop
  00000012            01883         count = count + 1
1CC5   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CC6   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CC7   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CC8   0080           01880         movwf INDF                      ;Save to QUEUE
1CC9   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CCA   0000           01882         nop
  00000013            01883         count = count + 1
1CCB   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CCC   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CCD   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CCE   0080           01880         movwf INDF                      ;Save to QUEUE
1CCF   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CD0   0000           01882         nop
  00000014            01883         count = count + 1
1CD1   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CD2   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CD3   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CD4   0080           01880         movwf INDF                      ;Save to QUEUE
1CD5   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CD6   0000           01882         nop
  00000015            01883         count = count + 1
1CD7   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CD8   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 206


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1CD9   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CDA   0080           01880         movwf INDF                      ;Save to QUEUE
1CDB   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CDC   0000           01882         nop
  00000016            01883         count = count + 1
1CDD   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CDE   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CDF   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CE0   0080           01880         movwf INDF                      ;Save to QUEUE
1CE1   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CE2   0000           01882         nop
  00000017            01883         count = count + 1
1CE3   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CE4   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CE5   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CE6   0080           01880         movwf INDF                      ;Save to QUEUE
1CE7   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CE8   0000           01882         nop
  00000018            01883         count = count + 1
1CE9   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CEA   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CEB   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CEC   0080           01880         movwf INDF                      ;Save to QUEUE
1CED   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CEE   0000           01882         nop
  00000019            01883         count = count + 1
1CEF   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CF0   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CF1   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CF2   0080           01880         movwf INDF                      ;Save to QUEUE
1CF3   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CF4   0000           01882         nop
  0000001A            01883         count = count + 1
1CF5   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CF6   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CF7   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CF8   0080           01880         movwf INDF                      ;Save to QUEUE
1CF9   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1CFA   0000           01882         nop
  0000001B            01883         count = count + 1
1CFB   0808           01877         movf ADC_DATAPORT, W            ;Sample
1CFC   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CFD   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CFE   0080           01880         movwf INDF                      ;Save to QUEUE
1CFF   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D00   0000           01882         nop
  0000001C            01883         count = count + 1
1D01   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D02   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D03   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D04   0080           01880         movwf INDF                      ;Save to QUEUE
1D05   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D06   0000           01882         nop
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 207


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001D            01883         count = count + 1
1D07   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D08   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D09   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D0A   0080           01880         movwf INDF                      ;Save to QUEUE
1D0B   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D0C   0000           01882         nop
  0000001E            01883         count = count + 1
1D0D   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D0E   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D0F   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D10   0080           01880         movwf INDF                      ;Save to QUEUE
1D11   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D12   0000           01882         nop
  0000001F            01883         count = count + 1
1D13   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D14   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D15   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D16   0080           01880         movwf INDF                      ;Save to QUEUE
1D17   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D18   0000           01882         nop
  00000020            01883         count = count + 1
1D19   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D1A   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D1B   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D1C   0080           01880         movwf INDF                      ;Save to QUEUE
1D1D   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D1E   0000           01882         nop
  00000021            01883         count = count + 1
1D1F   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D20   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D21   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D22   0080           01880         movwf INDF                      ;Save to QUEUE
1D23   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D24   0000           01882         nop
  00000022            01883         count = count + 1
1D25   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D26   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D27   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D28   0080           01880         movwf INDF                      ;Save to QUEUE
1D29   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D2A   0000           01882         nop
  00000023            01883         count = count + 1
1D2B   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D2C   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D2D   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D2E   0080           01880         movwf INDF                      ;Save to QUEUE
1D2F   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D30   0000           01882         nop
  00000024            01883         count = count + 1
1D31   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D32   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D33   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 208


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1D34   0080           01880         movwf INDF                      ;Save to QUEUE
1D35   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D36   0000           01882         nop
  00000025            01883         count = count + 1
1D37   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D38   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D39   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D3A   0080           01880         movwf INDF                      ;Save to QUEUE
1D3B   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D3C   0000           01882         nop
  00000026            01883         count = count + 1
1D3D   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D3E   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D3F   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D40   0080           01880         movwf INDF                      ;Save to QUEUE
1D41   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D42   0000           01882         nop
  00000027            01883         count = count + 1
1D43   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D44   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D45   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D46   0080           01880         movwf INDF                      ;Save to QUEUE
1D47   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D48   0000           01882         nop
  00000028            01883         count = count + 1
1D49   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D4A   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D4B   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D4C   0080           01880         movwf INDF                      ;Save to QUEUE
1D4D   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D4E   0000           01882         nop
  00000029            01883         count = count + 1
1D4F   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D50   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D51   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D52   0080           01880         movwf INDF                      ;Save to QUEUE
1D53   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D54   0000           01882         nop
  0000002A            01883         count = count + 1
1D55   0808           01877         movf ADC_DATAPORT, W            ;Sample
1D56   1409           01878         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D57   1009           01879         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D58   0080           01880         movwf INDF                      ;Save to QUEUE
1D59   0A84           01881         incf FSR, F                     ;Increment QUEUE pointer
1D5A   0000           01882         nop
  0000002B            01883         count = count + 1
                      01884         endw
1D5B   0808           01885     movf ADC_DATAPORT, W            ;Sample
1D5C   1409           01886     bsf ADC_CONTROLPORT, RDD
                      01887         MGOTO SampleRep5MEndA
                          M         if (SampleRep5MEndA & (0x1000))
1D5D   160A               M                 bsf PCLATH, 4
                          M         else
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 209


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndA & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1D5E   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1D5F   2E30               M         goto SampleRep5MEndA
                      01888 
1D60                  01889 SampleRep2MStep3
1D60   2D61           01890     goto $ + 1                                                  ;Delay 4
                      01891         if (Sample833kEnd & (0x1000))
1D61   160A           01892                 bsf PCLATH, 4
                      01893         else
                      01894                 bcf PCLATH, 4
                      01895         endif
                      01896         if (Sample833kEnd & (0x800))
                      01897                 bsf PCLATH, 3
                      01898         else
1D62   118A           01899                 bcf PCLATH, 3
                      01900         endif
1D63   1009           01901     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1D64   0000           01902     nop
Message[306]: Crossing page boundary -- ensure page bits are set.
1D65   2B1B           01903         goto Sample833kEnd
                      01904         
                      01905 ;=============================================================================
                      01906 end     ;end of program
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 210


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ACDCMODE                          00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCShutdown                       0000018E
ADC_CONTROLPORT                   00000009
ADC_DATAPORT                      00000008
ADC_PORT                          00000006
ADDEN                             00000003
ADDFF                             
ADDFF_TW                          
ADDLF                             
ADDLF_TW                          
ADDR0                             00000001
ADDR1                             00000002
ADDR2                             00000003
ADDWPC                            
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ANALOG_ACDC                       00000007
ANALOG_GAIN                       00000005
ANALOG_SEL                        00000007
ANDFF                             
ANDFF_TW                          
ANDLF                             
ANDLF_TW                          
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS12                             00000004
ANS13                             00000005
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000188
ANSELH                            00000189
BAUDCTL                           00000187
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 211


SYMBOL TABLE
  LABEL                             VALUE 

BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BNKSEL                            
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
BUFFERMAX                         0000005F
BUFFERMIN                         00000020
BUFFERSIZE                        00000040
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SEN                             00000005
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2RSEL                            00000004
C2SYNC                            00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 212


SYMBOL TABLE
  LABEL                             VALUE 

CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CH1SEL                            00000001
CH1SELG                           00000004
CH2SEL                            00000002
CH2SELG                           00000005
CHANNELBIT                        00000004
CHANNELCONFSEND                   
CHANNELCONFSTORE                  
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CLK                               00000005
CLOCKFREQBIT                      00000005
CM1CON0                           00000107
CM2CON0                           00000108
CM2CON1                           00000109
CONFRECIEVE                       
CONFSEND                          
CREN                              00000004
CS                                00000001
CSRC                              00000007
CURRENTBANK                       00000000
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
D_A                               00000005
D_NOT_A                           00000005
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 213


SYMBOL TABLE
  LABEL                             VALUE 

Delay                             00000183
DelayFive                         00000378
DelayLoop                         00000184
DelaySeven                        00000377
DelayTwo                          0000037A
ECCPAS                            0000009C
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FREQMODEBIT0                      00000000
FREQMODEBIT1                      00000001
FREQMODEBIT2                      00000002
FREQMODEBIT3                      00000003
FREQSAMPLE1M                      00000000
FREQSAMPLE250K                    00000004
FREQSAMPLE417K                    00000003
FREQSAMPLE625K                    00000002
FREQSAMPLE833K                    00000001
FREQSAMPLEDELAYED                 00000005
FREQSAMPLEREP2M                   00000007
FREQSAMPLEREP5M                   00000006
FREQSAMPLEXY192K                  0000000A
FREQSAMPLEXY250K                  00000009
FREQSAMPLEXY417K                  00000008
FREQSAMPLEXYDELAYED               0000000B
FSR                               00000004
FVREN                             00000000
GAIN1                             00000000
GAIN5                             00000001
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
GetByte                           00000167
GetByteSerial                     00000169
GetByteSerialB                    0000016C
GetByteSerialC                    00000170
GetByteSerialD                    00000174
GetByteSerialE                    00000178
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 214


SYMBOL TABLE
  LABEL                             VALUE 

HARDWARE                          00000012
HTS                               00000002
I2CPORT                           00000006
I2CSGetAck                        0000008D
I2CSGetAckL1                      00000092
I2CSGetByte                       0000005F
I2CSGetByteL1                     00000062
I2CSGetByteL2                     00000068
I2CSGetStop                       0000003D
I2CSGetStopL1                     00000041
I2CSGetStopL2                     00000048
I2CSGetStopL3                     0000004F
I2CSPutAck                        0000006C
I2CSPutAckL1                      00000070
I2CSPutAckL2                      00000072
I2CSPutByte                       00000078
I2CSPutByteL1                     0000007C
I2CSPutByteL1S                    0000007E
I2CSPutByteL2                     00000083
I2CSPutByteL3                     00000088
I2CSWaitStart                     00000052
I2CSWaitStartL1                   0000005D
I2CSWaitStartL2                   00000059
I2CSWaitStartL3                   00000055
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOCB                              00000096
IOCB0                             00000000
IOCB1                             00000001
IOCB2                             00000002
IOCB3                             00000003
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IORFF                             
IORFF_TW                          
IORLF                             
IORLF_TW                          
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
Initial                           00000095
IntHandler                        00000004
LTS                               00000001
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 215


SYMBOL TABLE
  LABEL                             VALUE 

MC1OUT                            00000007
MC2OUT                            00000006
MGOTO                             
MOVFF                             
MOVFF_TW                          
MOVLF                             
MOVLF_TW                          
MSK                               00000093
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
Main                              000000B7
MainB                             000000B9
MainSelect                        0000000C
MainWTrigB                        000000D6
MainWaitTrig                      000000C6
NEGATEF                           
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 216


SYMBOL TABLE
  LABEL                             VALUE 

PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PIC                               00000887
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000009D
PULSR                             00000002
PULSS                             00000003
PWM1CON                           0000009B
PutByte                           0000017C
PutByteSerial                     0000017E
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 217


SYMBOL TABLE
  LABEL                             VALUE 

RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RDD                               00000000
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_WRITE                        00000002
ROTL                              
ROTR                              
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SDA                               00000004
SEN                               00000000
SENDB                             00000003
SERIALPORT                        00000007
SHIFTL                            
SHIFTR                            
SMP                               00000007
SP                                00000002
SPBRG                             00000099
SPBRGH                            0000009A
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 218


SYMBOL TABLE
  LABEL                             VALUE 

SPEN                              00000007
SPPORT                            00000005
SR0                               00000006
SR1                               00000007
SRCON                             00000185
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUBFF                             
SUBFF_TW                          
SUBLF                             
SUBLF_TW                          
SWAPFF                            
SWAPFF_TW                         
SWAPWF                            
SWDTEN                            00000000
SYNC                              00000004
Sample1M                          0000040E
Sample1MhzEnd                     00000813
Sample250kA                       00000328
Sample250kB                       0000033F
Sample250kC                       00000356
Sample250kD                       0000036D
Sample417k250k                    00000318
Sample417kA                       00000329
Sample417kB                       00000340
Sample417kC                       00000357
Sample417kD                       0000036E
Sample417kLoopA                   00000321
Sample417kLoopB                   00000338
Sample417kLoopC                   0000034F
Sample417kLoopD                   00000366
Sample625k                        000002D5
Sample625kLoopA                   000002DB
Sample625kLoopB                   000002EB
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 219


SYMBOL TABLE
  LABEL                             VALUE 

Sample625kLoopC                   000002FB
Sample625kLoopD                   0000030B
Sample833k                        00000F15
Sample833kEnd                     0000131B
SampleDelayed                     000001C7
SampleDelayedLoopA                000001D2
SampleDelayedLoopB                000001EC
SampleDelayedLoopC                00000206
SampleDelayedLoopD                00000220
SampleRep2M                       0000194B
SampleRep2MPickEn                 00001958
SampleRep2MPickSt                 0000194F
SampleRep2MStep1                  00001958
SampleRep2MStep2                  00001B5F
SampleRep2MStep3                  00001D60
SampleRep5M                       00001518
SampleRep5MEndA                   00001630
SampleRep5MEndB                   00001635
SampleRep5MEndC                   00001633
SampleRep5MPickEn                 0000152B
SampleRep5MPickSt                 0000151C
SampleRep5MStep1                  0000152B
SampleRep5MStep2                  0000163B
SampleRep5MStep3                  0000173E
SampleRep5MStep4                  00001841
SampleRep5MStep5                  00001945
SampleXY250k192k                  0000037B
SampleXY250kLA                    0000038A
SampleXY250kLB                    000003AE
SampleXY250kLC                    000003D2
SampleXY250kLD                    000003F6
SampleXY417k                      00000912
SampleXYDelayed                   00000232
SampleXYDelayedLA                 00000244
SampleXYDelayedLB                 0000026C
SampleXYDelayedLC                 00000294
SampleXYDelayedLD                 000002BC
StSample417kLoopB                 0000033D
StSample417kLoopC                 00000354
StSample417kLoopD                 0000036B
StSampleDelayedLoopA              000001D7
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GIV                             00000007
T1GSS                             00000001
T1INSYNC                          00000002
T1OSCEN                           00000003
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 220


SYMBOL TABLE
  LABEL                             VALUE 

T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOTALBUFFERSIZE                   00000100
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRIGGER                           00000000
TRIGGERENBIT                      00000006
TRIGGERPORT                       00000006
TRIGGERPOSBIT                     00000007
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 221


SYMBOL TABLE
  LABEL                             VALUE 

TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRISE3                            00000003
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
ULPWUIE                           00000002
ULPWUIF                           00000002
VCFG0                             00000004
VCFG1                             00000005
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000097
VREN                              00000007
VROE                              00000006
VROTL                             
VROTR                             
VRR                               00000005
VRSS                              00000004
VSHIFTL                           
VSHIFTR                           
W                                 00000000
WCOL                              00000007
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 222


SYMBOL TABLE
  LABEL                             VALUE 

WDTCON                            00000105
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPUB                              00000095
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
WaitByte                          00000164
WaitComm                          000000E0
WaitComm_Conf                     00000128
WaitComm_Data                     000000E5
WaitComm_Rec                      00000148
WaitComm_SendDataA                000000EC
WaitComm_SendDataB                000000F9
WaitComm_SendDataC                00000106
WaitComm_SendDataD                00000113
WaitComm_SendDataExit             0000011C
WaitComm_Test                     000000E1
XORFF                             
XORFF_TW                          
XORLF                             
XORLF_TW                          
Z                                 00000002
_BOR21V                           00003EFF
_BOR40V                           00003FFF
_BOR4V_BOR21V                     00003EFF
_BOR4V_BOR40V                     00003FFF
_BOREN_NSLEEP                     00003EFF
_BOREN_OFF                        00003CFF
_BOREN_ON                         00003FFF
_BOREN_SBODEN                     00003DFF
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CONFIG1                          00002007
_CONFIG2                          00002008
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_DEBUG_OFF                        00003FFF
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 223


SYMBOL TABLE
  LABEL                             VALUE 

_DEBUG_ON                         00001FFF
_DEVID1                           00002006
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_FOSC_EC                          00003FFB
_FOSC_EXTRC_CLKOUT                00003FFF
_FOSC_EXTRC_NOCLKOUT              00003FFE
_FOSC_HS                          00003FFA
_FOSC_INTRC_CLKOUT                00003FFD
_FOSC_INTRC_NOCLKOUT              00003FFC
_FOSC_LP                          00003FF8
_FOSC_XT                          00003FF9
_HS_OSC                           00003FFA
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_LVP_OFF                          00002FFF
_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDTE_OFF                         00003FF7
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FF9
__16F887                          00000001
clockFreq                         00000020
cntr                              0000007B
cntra                             00000076
cntrb                             00000077
cntrc                             00000078
configLoc1                        00000070
dataConfig                        0000007D
f                                 00000001
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 224


SYMBOL TABLE
  LABEL                             VALUE 

i2csdata                          0000007C
modetemp                          00000079
modetempb                         0000007A
sampleRate1                       00000074
sampleRate2                       00000075
skipEqFF                          
skipEqLF                          
skipGrEqFF                        
skipGrEqFL                        
skipGrEqLF                        
skipGrFF                          
skipGrFL                          
skipGrLF                          
skipLessEqZero                    
skipLessZero                      
skipMoreEqZero                    
skipMoreZero                      
skipNotZero                       
skipZero                          
triggerDelay1                     00000071
triggerDelay2                     00000072
triggerDelay3                     00000073
triggerLevel                      0000007E
w                                 00000000


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 225


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0CC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0DC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0EC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0FC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 226


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


1000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
10C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
11C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
12C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
13C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
14C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
15C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
16C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
17C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
18C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
19C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.51    OSC1MHZ_V1_2 FOR PIC16F887.ASM   2-5-2016  12:43:38         PAGE 227


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


1B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1CC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXX---------- ----------------
2000 : XXXX---XX------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  7526
Program Memory Words Free:   666


Errors   :     0
Warnings :     1 reported,  1135 suppressed
Messages :    16 reported,    22 suppressed

