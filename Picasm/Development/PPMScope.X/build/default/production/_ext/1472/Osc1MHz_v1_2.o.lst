MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: An oscilloscope program based on the PIC16F877 and the MAX118
                      00005 ;*Version: 1.204
                      00006 ;*Date: 9/27/2013
                      00007 ;*Filename: osc1MHz_v1_2.asm
                      00008 ;
                      00009 ;Versions:  1.000 - 3/29/2003
                      00010 ;           1.000 - 7/26/2004
                      00011 ;           1.000 - 4/2/2005
                      00012 ;           1.000 - 9/29/2005 -- Additional Header comments and license added
                      00013 ;           1.101 - 11/3/2005 -- Began to modify for use on PIC16F877
                      00014 ;                       1.102 - 3/28/2006 -- Made trigger interrupt based, expanded 
                      00015 ;                               sampling to 256 samples across modes
                      00016 ;                       1.102 - 4/12/2006 -- Finished expanding sampling to 256 samples.
                      00017 ;                               Still need to test communication, sampleDelayed and sampleXY
                      00018 ;                               modes.
                      00019 ;                       1.103 - 4/29/2007 -- Fixed interlaced sampling, modified so sample
                      00020 ;                               data configuration and trigger level are measured after the
                      00021 ;                               data buffer if filled instead of at communication.
                      00022 ;                       1.104 - 6/27/2007 -- Added faster XY sampling modes
                      00023 ;                       1.105 - 7/18/2007 -- Added repetitive sampling and wait for 
                      00024 ;                               trigger in WaitComm so the scope will respond to the PC
                      00025 ;                       1.106 - 3/1/2009 -- changed the trigger back to not respond to PC
                      00026 ;                       1.107 - 3/1/2009 -- Changed the trigger code to shorten the 
                      00027 ;                               trigger delay.
                      00028 ;                               Made scope responsive to trigger change message.
                      00029 ;                               Removed the use of the slave parallel port.
                      00030 ;                               Combined SampleXY250 and SampleXY192.  Tested 3/5/2009
                      00031 ;                       1.108 - 3/9/2009 -- changed trigger code to broaden range of 
                      00032 ;                               trigger delay
                      00033 ;                       1.109 - 10/28/2009 -- tested and fixed bug with trigger code
                      00034 ;                       1.110 - 5/12/2010 -- Added serial port support to code.
                      00035 ;                       1.111 - 2/1/2011 -- fixed a bug with the trigger code (another one)
                      00036 ;                       1.200 - 6/28/2011 - Modified code to handle conditional compile for 
                      00037 ;                               hardware version 1.0 or hardware version 1.2
                      00038 ;                       1.200 - 8/15/2012 - Added portability for PIC16F887
                      00039 ;                       1.200 - 10/5/2012 - Modified repetative sample modes to improve 
                      00040 ;                               trigger latency.
                      00041 
                      00042 ;I NEED TO ADD FUNCTIONALITY TO THE SOFTWARE FOR THE UPDATES BELOW
                      00043 
                      00044 ;                       1.201 - 9/18/2013 - Added the ability to detect Channel Attenuation
                      00045 ;                               and Trigger Source switches for Paul Messer's DSO Scope when 
                      00046 ;                               assembled for a PIC16F887.  Still compatible with 1.2 hardware.
                      00047 ;                               NEED TO TEST.
                      00048 ;                       1.202 - 9/19/2013 - Added 500 kHz interlaced mode SampleXY500k.
                      00049 ;                               Rewrote SampleRep5MHz and SampleRep2MHz to make room for the
                      00050 ;                               new interlaced mode. - NEED TO TEST.
                      00051 ;                       1.203 - 9/20/2013 - Did some more code optimization of goto
                      00052 ;                               statements and jumps to reduce the code size.
                      00053 ;                       1.204 - 9/27/2013 - Rewrote the main and interrupt routine to 
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00054 ;                               minimize the post trigger delay to 2.6 uSec (13 cycles) for 
                      00055 ;                               all modes
                      00056 
                      00057 ;Copyright (C) 2003-2013 Jonathan Weaver
                      00058 ;
                      00059 ; This file is part of PPMScope.
                      00060 ;
                      00061 ; PPMScope is free software: you can redistribute it and/or modify
                      00062 ; it under the terms of the GNU General Public License as published by
                      00063 ; the Free Software Foundation, either version 3 of the License, or
                      00064 ; (at your option) any later version.
                      00065 ;
                      00066 ; This program is distributed in the hope that it will be useful,
                      00067 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                      00068 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                      00069 ; GNU General Public License for more details.
                      00070 ;
                      00071 ; You should have received a copy of the GNU General Public License
                      00072 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                      00073 ;
                      00074 ;==============================================================================
                      00075 
                      00076 ;=============================================================================
                      00077 ; C O N F I G U R A T I O N
                      00078 ;=============================================================================
                      00079 
                      00080         errorlevel -207, -205
                      00081 
  00000887            00082 PIC     equ 0x887
                      00083 ;PIC equ 0x877
  00000020            00084 clockFreq = 20      ;20 = 20 MHZ, 4 = 4 MHZ
                      00085 
                      00086 if PIC == 0x887
                      00087         ;=============================================================================
                      00088         ; Contributed by Paul Messer
                      00089         ;=============================================================================
                      00090     list p=16F887               ;16f887 processor
                      00091 
                      00092         ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00093         ; The labels following the directive are located in the respective .inc file.
                      00094         ; See respective data sheet for additional information on configuration word.
                      00095         
2007   20F2           00096         __CONFIG _CONFIG1, _DEBUG_OFF & _LVP_OFF & _FCMEN_OFF & _IESO_OFF & _BOR_OFF & _CPD_OFF & _CP_OF
                            F & _MCLRE_ON & _PWRTE_OFF & _WDT_OFF & _HS_OSC
2008   3FFF           00097         __CONFIG _CONFIG2, _WRT_OFF & _BOR40V
                      00098         
                      00099         ; '__idlocs' sets the four ID locations to the hexadecimal value of expression.
                      00100         ; These are not readable by the cpu, but can be read by the programning hardware.
                      00101         
2000   0001 0002 0003 00102         __idlocs        0x1234
       0004 
                      00103 
                      00104 else
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00105     list p=16F877a              ;16f877 or 16f877a processor
                      00106 
                      00107         ; '__CONFIG' directive is used to embed configuration data within .asm file.
                      00108         ; The labels following the directive are located in the respective .inc file.
                      00109         ; See respective data sheet for additional information on configuration word.
                      00110 
                      00111     __config  _WDT_OFF & _HS_OSC & _LVP_OFF
                      00112 
                      00113         __idlocs        0x1234
                      00114 
                      00115 endif
                      00116 
                      00117 ;=============================================================================
                      00118 ; C O N S T A N T S
                      00119 ;=============================================================================
                      00120 
  00000012            00121 HARDWARE equ 0x12
                      00122 
  00000020            00123 BUFFERMIN equ 0x20      ;Memory restrictions for the buffer
  00000040            00124 BUFFERSIZE equ D'64'    ;Number of data points to store.  In single channel
                      00125                         ;mode, all data points are for one channel, in XY mode
                      00126                         ;the data points alternate between channel 1 and
                      00127                         ;channel 2
  0000005F            00128 BUFFERMAX equ BUFFERMIN+BUFFERSIZE-1
  00000100            00129 TOTALBUFFERSIZE equ BUFFERSIZE*4
                      00130 
                      00131 ;I/O Pin maps
                      00132 ;-----------------------------------------------------------------------------
  00000006            00133 ATTNPORT set PORTB              ;Attenuation detection pins
  00000006            00134 CH1ATTN equ     0x06
  00000007            00135 CH2ATTN equ     0x07
                      00136 
  00000005            00137 TRGSRCPORT set PORTA    ;Trigger source detection pins
  00000003            00138 TRGCH equ 0x03
                      00139 
                      00140 if HARDWARE == 0x10
                      00141         SPPORT set PORTC
                      00142         SP equ 0x05
                      00143 
                      00144         I2CPORT set PORTC
                      00145         SDA equ 0x04            ;Pin map for the I2CPORT
                      00146         CLK equ 0x03
                      00147 
                      00148         ADC_CONTROLPORT set PORTB
                      00149         ADC_PORT set PORTB
                      00150         RDD equ 0x02            ;Pin map for the ADC
                      00151 
                      00152         TRIGGERPORT set PORTB
                      00153         TRIGGER equ 0x00
                      00154 
                      00155         SERIALPORT set PORTC
                      00156         RX equ 0x07
                      00157         TX equ 0x06
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00158 
                      00159         ADDR2 equ 0x05          ;ADDR2 and ADDR1 not used in this program (later use)
                      00160         ADDR1 equ 0x04
                      00161         ADDR0 equ 0x03          ;Least significant bit of the ADC channel address
                      00162         CS equ 0x01
                      00163 
                      00164         ADC_DATAPORT set PORTD
                      00165 
                      00166         ANALOG_SEL set PORTC
                      00167         CH1SEL equ 0x01
                      00168         CH2SEL equ 0x02
                      00169         
                      00170         ANALOG_GAIN set PORTA
                      00171         GAIN1 equ 0x00
                      00172         GAIN2 equ 0x01
                      00173         CH1SELG equ 0x04
                      00174         CH2SELG equ 0x05
                      00175 
                      00176         ANALOG_ACDC set PORTC
                      00177         ACDCMODE equ 0x00
                      00178 
                      00179 else
  00000005            00180         SPPORT set PORTA
  00000002            00181         SP equ 0x02
                      00182         ;SPPORT set PORTB
                      00183         ;SP equ 0x05
                      00184 
  00000007            00185         SERIALPORT set PORTC
  00000007            00186         RX equ 0x07
  00000006            00187         TX equ 0x06
                      00188 
  00000009            00189         ADC_CONTROLPORT set PORTE
  00000000            00190         RDD equ 0x00
  00000001            00191         ADDR0 equ 0x01
                      00192 
  00000006            00193         TRIGGERPORT set PORTB
  00000000            00194         TRIGGER equ 0x00
                      00195 
  00000006            00196         I2CPORT set PORTB
  00000004            00197         SDA equ 0x04
  00000005            00198         CLK equ 0x05
                      00199 
  00000006            00200         ADC_PORT set PORTB
  00000003            00201         ADDR2 equ 0x03          
  00000002            00202         ADDR1 equ 0x02
  00000001            00203         CS equ 0x01
                      00204 
  00000008            00205         ADC_DATAPORT set PORTD
                      00206 
  00000007            00207         ANALOG_SEL set PORTC
  00000001            00208         CH1SEL equ 0x01
  00000002            00209         CH2SEL equ 0x02
                      00210 
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            00211         ANALOG_GAIN set PORTA
  00000000            00212         GAIN1 equ 0x00
  00000001            00213         GAIN5 equ 0x01
  00000004            00214         CH1SELG equ 0x04
  00000005            00215         CH2SELG equ 0x05
                      00216 
  00000007            00217         ANALOG_ACDC set PORTC
  00000000            00218         ACDCMODE equ 0x00
                      00219 
                      00220 endif
                      00221 
                      00222 ;Configuration memory map
                      00223 ;-----------------------------------------------------------------------------
                      00224 ;Bit map for configLoc1
  00000007            00225 TRIGGERPOSBIT equ 0x07          ;1 is positive slope trigger, 0 is negative slope
  00000006            00226 TRIGGERENBIT equ 0x06           ;1 is trigger enabled, 0 is no trigger
  00000005            00227 CLOCKFREQBIT equ 0x05           ;1 is 20 MHz, 0 is 4 MHz
  00000004            00228 CHANNELBIT equ 0x04             ;1 is channel 2, 0 is channel 1
  00000003            00229 FREQMODEBIT3 equ 0x03           ;Reserve the bits in configLoc1 for the frequency modes
  00000002            00230 FREQMODEBIT2 equ 0x02
  00000001            00231 FREQMODEBIT1 equ 0x01
  00000000            00232 FREQMODEBIT0 equ 0x00
                      00233 
  00000000            00234 FREQSAMPLE1M equ D'0'                   ;Table of frequency modes, 0 to 15
  00000001            00235 FREQSAMPLE833K equ D'1'
  00000002            00236 FREQSAMPLE625K equ D'2'
  00000003            00237 FREQSAMPLE417K equ D'3'
  00000004            00238 FREQSAMPLE250K equ D'4'
  00000005            00239 FREQSAMPLEDELAYED equ D'5'
  00000006            00240 FREQSAMPLEREP5M equ D'6'                ;Ensure trigger is enabled
  00000007            00241 FREQSAMPLEREP2M equ D'7'                ;Ensure trigger is enabled
  00000008            00242 FREQSAMPLEXY417K equ D'8'
  00000009            00243 FREQSAMPLEXY250K equ D'9'
  0000000A            00244 FREQSAMPLEXY192K equ D'10'
  0000000B            00245 FREQSAMPLEXYDELAYED equ D'11'
  0000000C            00246 FREQSAMPLEXYINT equ D'12'
  0000000D            00247 FREQSAMPLEXY500k equ D'13'
                      00248 
                      00249 ;=============================================================================
                      00250 ; V A R I A B L E S
                      00251 ;=============================================================================
                      00252 
                      00253 CBLOCK  0x70                    ;Shared General Purpose Registers, accessible anywhere
  00000070            00254     configLoc1          ;Configuration mode
  00000071            00255     triggerDelay1       ;trigger delay (3 bytes)
  00000072            00256     triggerDelay2
  00000073            00257         triggerDelay3
  00000074            00258     sampleRate1         ;sample rate delay (2 bytes)
  00000075            00259     sampleRate2
  00000076            00260     cntra               ;general use counter
  00000077            00261     cntrb               ;second general use counter
  00000078            00262     cntrc               ;third general use counter
  00000079            00263         functptrhigh            ;function pointer high byte, selects sampling mode
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000007A            00264     functptrlow                 ;function pointer low byte
  0000007B            00265     cntr                                ;counter variable for i2cs, only used in i2cs
  0000007C            00266         i2csdata                        ;data for i2cs, only used in communications routines
  0000007D            00267         dataConfig                      ;the data configuration and statusTemp for interrupt
  0000007E            00268         triggerLevel            ;the trigger level and wregTemp for interrupt
  0000007F            00269         triggerChannel          ;the trigger channel, only used as the trigger channel
                      00270 ENDC
                      00271 
  0000007D            00272 statusTemp equ dataConfig       ;Dual purpose registers, named appropriately in 
  0000007E            00273 wregTemp equ triggerLevel       ;context
                      00274 
                      00275 ;=============================================================================
                      00276 ; M A C R O S
                      00277 ;=============================================================================
                      00278 
                      00279 if PIC == 0x887                         ;Include appropriate processor header
                      00280         include "p16f887.inc"   
                      00001         LIST
                      00002 
                      00003 ;==========================================================================
                      00004 ; Build date : Oct 24 2019
                      00005 ;  MPASM PIC16F887 processor include
                      00006 ; 
                      00007 ;  (c) Copyright 1999-2019 Microchip Technology, All rights reserved
                      00008 ;==========================================================================
                      00009 
                      00810         LIST
                      00281 else
                      00282     include "p16F877a.inc"
                      00283 endif
                      00284     include "equality.inc"      ;Simplifies some testing
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: A set of equality testing macros.  Assumes all registers and literals are signed bytes.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 7/10/2003
                      00007 ;*Filename: equality.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 -- Code finished.  Added comments.
                      00010 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00011 ;
                      00012 ;Copyright (C) 2005 Jonathan Weaver
                      00013 ;
                      00014 ;This program is free software; you can redistribute it and/or modify it under 
                      00015 ;the terms of the GNU General Public License as published by the Free Software 
                      00016 ;Foundation; either version 2 of the License, or (at your option) any later 
                      00017 ;version.
                      00018 ;
                      00019 ;This program is distributed in the hope that it will be useful, but WITHOUT 
                      00020 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00021 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
                      00022 ;details.
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00023 ;
                      00024 ;You should have received a copy of the GNU General Public License along with 
                      00025 ;this program; if not, write to the Free Software Foundation, Inc., 
                      00026 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00027 ;
                      00028 ;==============================================================================
                      00029 
                      00030 ;================================================================================
                      00031 ; M A C R O S
                      00032 ;================================================================================
                      00033 
                      00034 ;*This macro skips the next line if regA is equal to regB
                      00035 skipEqFF macro regA,regB ;public
                      00036         movf regA, w
                      00037         xorwf regB, w
                      00038         btfss STATUS, Z
                      00039 endm
                      00040 
                      00041 ;*This macro skips the next line if regA is greater than or equal to regB
                      00042 skipGrEqFF macro regA, regB ;public
                      00043         movf regB, w
                      00044         subwf regA, w
                      00045         andlw B'10000000'
                      00046         btfss STATUS, Z
                      00047 endm
                      00048 
                      00049 ;*This macro skips the next line if regA is greater than regB
                      00050 skipGrFF macro regA, regB ;public
                      00051         movf regA, w
                      00052         subwf regB, w
                      00053         andlw B'10000000'
                      00054         btfsc STATUS, Z
                      00055 endm
                      00056 
                      00057 ;*This macro skips the next line if the literal is equal to regB
                      00058 skipEqLF macro lit, regB ;public
                      00059         movf regB, w
                      00060         xorlw lit
                      00061         btfss STATUS, Z
                      00062 endm
                      00063 
                      00064 ;*This macro skips the next line if the literal is greater than or equal to regB
                      00065 skipGrEqLF macro lit, regB ;public
                      00066         movf regB, w
                      00067         sublw lit
                      00068         andlw B'10000000'
                      00069         btfss STATUS, Z
                      00070 endm
                      00071 
                      00072 ;*This macro skips the next line if the literal is greater than regB
                      00073 skipGrLF macro lit, regB ;public
                      00074         movlw lit
                      00075         subwf regB, w
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00076         andlw B'10000000'
                      00077         btfsc STATUS, Z
                      00078 endm
                      00079 
                      00080 ;*This macro skips the next line if the regA is greater than or equal to the literal
                      00081 skipGrEqFL macro regA, lit ;public
                      00082         movlw lit
                      00083         subwf regA, w
                      00084         andlw B'10000000'
                      00085         btfss STATUS, Z
                      00086 endm
                      00087 
                      00088 ;*This macro skips the next line if the regA is greater than the literal
                      00089 skipGrFL macro regA, lit ;public
                      00090         movf regA, w
                      00091         sublw regB
                      00092         andlw B'10000000'
                      00093         btfsc STATUS, Z
                      00094 endm
                      00095 
                      00096 ;*This macro skips the next line if the result of the previous line is zero
                      00097 skipZero macro ;public
                      00098         btfss STATUS, Z
                      00099 endm
                      00100 
                      00101 ;*This macro skips the next line if the result of the previous line is not zero
                      00102 skipNotZero macro ;public
                      00103         btfsc STATUS, Z
                      00104 endm
                      00105 
                      00106 ;*This macro skips the next line if the result of the previous line is less than zero
                      00107 skipLessZero macro ;public
                      00108         andlw B'10000000'
                      00109         btfsc STATUS, Z
                      00110 endm
                      00111 
                      00112 ;*This macro skips the next line if the result of the previous line is more than or equal to zero
                      00113 skipMoreEqZero macro ;public
                      00114         andlw B'10000000'
                      00115         btfss STATUS, Z
                      00116 endm
                      00117 
                      00118 ;*This macro skips the next line if the result of the previous line is less than or equal to zero
                      00119 skipLessEqZero macro ;public
                      00120         addlw B'01111111'
                      00121         andlw B'10000000'
                      00122         btfss STATUS, Z
                      00123 endm
                      00124 
                      00125 ;*This macro skips the next line if the result of the previous line is more than zero
                      00126 skipMoreZero macro ;public
                      00127         addlw B'01111111'
                      00128         andlw B'10000000'
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00129         btfsc STATUS, Z
                      00130 endm
                      00285     include "banks.inc"         ;Simplifies bank handling
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Banking macro.  A replacement for the banksel command.  Uses minimal bit set/clear comma
                            nds to set desired bank.
                      00005 ;*Version: 2.0
                      00006 ;*Date: 11/9/2005
                      00007 ;*Filename:  banks.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 - Created Unit
                      00010 ;                       1.0 - 9/29/2005 - Added comments and license
                      00011 ;                       2.0 - 11/9/2005 - Complete change in file, generalized for
                      00012 ;                                                         different processor banking, selects bank base
                            d
                      00013 ;                                                         on label passed to BNKSEL function.
                      00014 ;                                                         Removed BANK0 and BANK1 macros (for flexibilit
                            y)
                      00015 ;
                      00016 ;Copyright (C) 2005 Jonathan Weaver
                      00017 ;
                      00018 ;This program is free software; you can redistribute it and/or modify it under
                      00019 ;the terms of the GNU General Public License as published by the Free Software
                      00020 ;Foundation; either version 2 of the License, or (at your option) any later
                      00021 ;version.
                      00022 ;
                      00023 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00024 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00025 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00026 ;details.
                      00027 ;
                      00028 ;You should have received a copy of the GNU General Public License along with
                      00029 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00030 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00031 ;
                      00032 ;==============================================================================
                      00033 
  0000                00034 variable CURRENTBANK
  00000000            00035 CURRENTBANK set 0x0000
                      00036 
                      00037 
                      00038 ;*Sets the STATUS bits RP0 and RP1 correctly depending on the label passed.  Comparable to banksel comma
                            nd, except that it remembers the last bank selected in a variable named CURRENTBANK.  Based on C
                      00039 ;*reg: the register whose bank to select
                      00040 BNKSEL macro reg ;public
                      00041         if reg & 0x0100
                      00042                 if (CURRENTBANK & 0x0100) == 0
                      00043                         bsf STATUS, RP1
                      00044                 endif
                      00045         else
                      00046                 if (CURRENTBANK & 0x0100) == 0x0100
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00047                         bcf STATUS, RP1
                      00048                 endif
                      00049         endif
                      00050         if reg & 0x0080
                      00051                 if (CURRENTBANK & 0x0080) == 0
                      00052                         bsf STATUS, RP0
                      00053                 endif
                      00054         else
                      00055                 if (CURRENTBANK & 0x0080) == 0x0080
                      00056                         bcf STATUS, RP0
                      00057                 endif
                      00058         endif
                      00059         CURRENTBANK set reg & 0x180
                      00060 endm
                      00061 
                      00062 
                      00286     include "asmext.inc"        ;Some common asm macros
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Extention of assembly instructions on registers and literals.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 11/1/2005
                      00007 ;*Filename: asmext.inc
                      00008 ;
                      00009 ;Copyright (C) 2005 Jonathan Weaver
                      00010 ;
                      00011 ;This program is free software; you can redistribute it and/or modify it under
                      00012 ;the terms of the GNU General Public License as published by the Free Software
                      00013 ;Foundation; either version 2 of the License, or (at your option) any later
                      00014 ;version.
                      00015 ;
                      00016 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00017 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00018 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00019 ;details.
                      00020 ;
                      00021 ;You should have received a copy of the GNU General Public License along with
                      00022 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00023 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00024 ;
                      00025 ;Versions:  1.0 - 1/5/2005 - Defined headers, began writing macros
                      00026 ;           1.0 - 1/6/2005 - Wrote more macros
                      00027 ;           1.0 - 7/1/2005 - Tested macros, fixed bugs.  Rewrote SHIFTX and ROTX.
                      00028 ;                       1.0 - 7/11/2005 - Finished testing macros.  Added comments to headers.
                      00029 ;                       1.0 - 11/1/2005 - Wrote VROTF and VSHIFTF macros.
                      00030 ;==============================================================================
                      00031 
  00000001            00032 f equ F
  00000000            00033 w equ W
                      00034 
                      00035 ;------------------------------------------------------------------------------
                      00036 ;*Adds regA to regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00037 ;*regA: the register to add to regB
                      00038 ;*regB: the register to add to regA
                      00039 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00040 ADDFF macro regA, regB, dest    ;public
                      00041     movf regA, w
                      00042     addwf regB, dest
                      00043 endm
                      00044 
                      00045 ;------------------------------------------------------------------------------
                      00046 ;*Ands regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00047 ;*regA: the register to and with regB
                      00048 ;*regB: the register to and with regA
                      00049 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00050 ANDFF macro regA, regB, dest    ;public
                      00051     movf regA, w
                      00052     andwf regB, dest
                      00053 endm
                      00054 
                      00055 ;------------------------------------------------------------------------------
                      00056 ;*Inclusive ors regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00057 ;*regA: the register to or with regB
                      00058 ;*regB: the register to or with regA
                      00059 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00060 IORFF macro regA, regB, dest    ;public
                      00061     movf regA, w
                      00062     iorwf regB, dest
                      00063 endm
                      00064 
                      00065 ;------------------------------------------------------------------------------
                      00066 ;*Moves the value in regA to regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00067 ;*regA: the register to move to regB
                      00068 ;*regB: the destination register
                      00069 MOVFF macro regA, regB  ;public
                      00070     movf regA, w
                      00071     movwf regB
                      00072 endm
                      00073 
                      00074 ;------------------------------------------------------------------------------
                      00075 ;*Shifts the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cycl
                            es.
                      00076 ;*reg: the register to shift
                      00077 ;*lit: a literal containing the number of bits to shift left
                      00078 SHIFTL macro reg, lit   ;public
                      00079     local cnt
                      00080     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00081         cnt = lit
                      00082         while cnt > 0
                      00083             rlf reg, f
                      00084             cnt--
                      00085         endw
                      00086         if (lit) == 1
                      00087             bcf reg, 0
                      00088         else
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00089             if (lit) == 2
                      00090                 bcf reg, 0
                      00091                 bcf reg, 1
                      00092             else
                      00093                 movlw (0xFF << (lit))
                      00094                     andwf reg, f
                      00095                 endif
                      00096         endif
                      00097     else
                      00098         if (lit) < 6
                      00099             if (lit) == 4           ;4 -> 3 cycles
                      00100                 swapf reg, f
                      00101                 movlw 0xF0
                      00102                 andwf reg, f
                      00103             else                    ;5 -> 4 cycles
                      00104                 swapf reg, f
                      00105                 rlf reg, f
                      00106                 movlw B'11100000'
                      00107                 andwf reg, f
                      00108             endif
                      00109         else
                      00110             if (lit) == 6           ;6 -> 5 cycles
                      00111                 rrf reg, f
                      00112                 rrf reg, f
                      00113                 rrf reg, f
                      00114                 movlw B'11000000'
                      00115                 andwf reg, f
                      00116             else                    ;7 -> 3 cycles
                      00117                 rrf reg, f
                      00118                 clrf reg
                      00119                 rrf reg, f
                      00120             endif
                      00121         endif
                      00122     endif
                      00123 endm
                      00124 
                      00125 ;------------------------------------------------------------------------------
                      00126 ;*Shifts the value in reg right by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cyc
                            les.
                      00127 ;*reg: the register to shift
                      00128 ;*lit: a literal containing the number of bits to shift left
                      00129 SHIFTR macro reg, lit   ;public
                      00130     local cnt
                      00131     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00132         cnt = lit
                      00133         while cnt > 0
                      00134             rrf reg, f
                      00135             cnt--
                      00136         endw
                      00137         if (lit) == 1
                      00138             bcf reg, 7
                      00139         else
                      00140             movlw (0xFF >> (lit))
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00141             andwf reg, f
                      00142         endif
                      00143     else
                      00144         if (lit) < 6
                      00145             if (lit) == 4           ;4 -> 3 cycles
                      00146                 swapf reg, f
                      00147                 movlw 0x0F
                      00148                 andwf reg, f
                      00149             else                    ;5 -> 4 cycles
                      00150                 swapf reg, f
                      00151                 rrf reg, f
                      00152                 movlw B'00000111'
                      00153                 andwf reg, f
                      00154             endif
                      00155         else
                      00156             if (lit) == 6           ;6 -> 5 cycles
                      00157                 rlf reg, f
                      00158                 rlf reg, f
                      00159                 rlf reg, f
                      00160                 movlw B'00000011'
                      00161                 andwf reg, f
                      00162             else                    ;7 -> 3 cycles
                      00163                 rlf reg, f
                      00164                 clrf reg
                      00165                 rlf reg, f
                      00166             endif
                      00167         endif
                      00168     endif
                      00169 endm
                      00170 
                      00171 ;------------------------------------------------------------------------------
                      00172 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00173 ;*reg: the register to shift
                      00174 ;*lit: a literal containing the number of bits to shift left
                      00175 ROTL macro reg, lit     ;public
                      00176     local cnt
                      00177     if (lit) < 3                    ;1 -> 2 cycles, 2 -> 4 cycles
                      00178         cnt = lit
                      00179         while cnt > 0
                      00180             rlf reg, w
                      00181             rlf reg, f
                      00182             cnt--
                      00183         endw
                      00184     else
                      00185         if (lit) < 6
                      00186             swapf reg, f            ;4 -> 1 cycles
                      00187             if (lit) == 3           ;3 -> 3 cycles
                      00188                 rrf reg, w
                      00189                 rrf reg, f
                      00190             endif
                      00191             if (lit) == 5
                      00192                 rlf reg, w          ;5 -> 3 cycles
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00193                 rlf reg, f
                      00194             endif
                      00195         else                        ;6 -> 4 cycles, 7 -> 2 cycles
                      00196             cnt = 8 - (lit)
                      00197             while cnt > 0
                      00198                 rrf reg, w
                      00199                 rrf reg, f
                      00200                 cnt--
                      00201             endw
                      00202         endif
                      00203     endif
                      00204 endm
                      00205 
                      00206 ;------------------------------------------------------------------------------
                      00207 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00208 ;*reg: the register to shift
                      00209 ;*lit: a literal containing the number of bits to shift left
                      00210 ROTR macro reg, lit     ;public
                      00211     ROTL reg, 8-lit
                      00212 endm
                      00213 
                      00214 ;------------------------------------------------------------------------------
                      00215 ;*Shifts regA left by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00216 ;*regA: register to shift
                      00217 ;*regB: register that determines shift (7 to 0 are valid)
                      00218 VSHIFTL macro regA, regB ;public
                      00219     bcf STATUS, C   ;Conditional shift by 1
                      00220     btfsc regB, 0
                      00221         rlf regA, f
                      00222     bcf STATUS, C   ;Conditional shift by 2
                      00223     btfsc regB, 1
                      00224         rlf regA, f
                      00225     bcf STATUS, C
                      00226     btfsc regB, 1
                      00227         rlf regA, f
                      00228     swapf regA, w      ;Conditional shift by 4
                      00229     andlw 0xF0
                      00230     btfsc regB, 2
                      00231         movwf regA
                      00232 endm
                      00233 
                      00234 ;------------------------------------------------------------------------------
                      00235 ;*Shifts regA right by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00236 ;*regA: register to shift
                      00237 ;*regB: register that determines shift (7 to 0 are valid)
                      00238 VSHIFTR macro regA, regB ;public
                      00239     bcf STATUS, C   ;Conditional shift by 1
                      00240     btfsc regB, 0
                      00241         rrf regA, f
                      00242     bcf STATUS, C   ;Conditional shift by 2
                      00243     btfsc regB, 1
                      00244         rrf regA, f
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00245     bcf STATUS, C
                      00246     btfsc regB, 1
                      00247         rrf regA, f
                      00248     swapf regA, w      ;Conditional shift by 4
                      00249     andlw 0x0F
                      00250     btfsc regB, 2
                      00251         movwf regA
                      00252 endm
                      00253 
                      00254 ;------------------------------------------------------------------------------
                      00255 ;*Rotates regA left by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00256 ;*regA: register to rotate
                      00257 ;*regB: register that determines rotate (7 to 0 are valid)
                      00258 VROTL macro regA, regB ;public
                      00259     rlf regA, w        ;Conditional rotate by 1
                      00260     btfsc regB, 0
                      00261         rlf regA, f
                      00262     rlf regA, w        ;Conditional rotate by 2
                      00263     btfsc regB, 1
                      00264         rlf regA, f
                      00265     rlf regA, w
                      00266     btfsc regB, 1
                      00267         rlf regA, f
                      00268     btfsc regB, 2      ;Conditional rotate by 4
                      00269         swapf regA, f
                      00270 endm
                      00271 
                      00272 ;------------------------------------------------------------------------------
                      00273 ;*Rotates regA right by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00274 ;*regA: register to rotate
                      00275 ;*regB: register that determines rotate (7 to 0 are valid)
                      00276 VROTR macro regA, regB ;public
                      00277     rrf regA, w        ;Conditional rotate by 1
                      00278     btfsc regB, 0
                      00279         rrf regA, f
                      00280     rrf regA, w        ;Conditional rotate by 2
                      00281     btfsc regB, 1
                      00282         rrf regA, f
                      00283     rrf regA, w
                      00284     btfsc regB, 1
                      00285         rrf regA, f
                      00286     btfsc regB, 2      ;Conditional rotate by 4
                      00287         swapf regA, f
                      00288 endm
                      00289 
                      00290 ;------------------------------------------------------------------------------
                      00291 ;*Subracts regA from regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00292 ;*regA: the register to subtract
                      00293 ;*regB: the register to subtract from
                      00294 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00295 SUBFF macro regA, regB, dest    ;public
                      00296     movf regA, w
                      00297     subwf regB, dest
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00298 endm
                      00299 
                      00300 ;------------------------------------------------------------------------------
                      00301 ;*Exclusive ors regA and regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00302 ;*regA: the register to exclusive or with regB
                      00303 ;*regB: the register to exclusive or with regA
                      00304 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00305 XORFF macro regA, regB, dest    ;public
                      00306     movf regA, w
                      00307     xorwf regB, dest
                      00308 endm
                      00309 
                      00310 ;------------------------------------------------------------------------------
                      00311 ;*Adds lit and reg and stores in WREG or reg.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00312 ;*lit: the literal to add with reg
                      00313 ;*reg: the register to add with lit
                      00314 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00315 ADDLF macro lit, reg, dest      ;public
                      00316     movlw lit
                      00317     addwf reg, dest
                      00318 endm
                      00319 
                      00320 ;------------------------------------------------------------------------------
                      00321 ;*Ands lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00322 ;*lit: literal to and with reg
                      00323 ;*reg: register to and with lit
                      00324 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00325 ANDLF macro lit, reg, dest      ;public
                      00326     movlw lit
                      00327     andwf reg, dest
                      00328 endm
                      00329 
                      00330 ;------------------------------------------------------------------------------
                      00331 ;*Inclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00332 ;*lit: literal to inclusive or with reg
                      00333 ;*reg: register to inclusive or with lit
                      00334 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00335 IORLF macro lit, reg, dest      ;public
                      00336     movlw lit
                      00337     iorwf reg, dest
                      00338 endm
                      00339 
                      00340 ;------------------------------------------------------------------------------
                      00341 ;*Moves lit to reg.  Affects WREG.  2 Instruction Cycles.
                      00342 ;*lit: literal to move
                      00343 ;*reg: register to move literal to
                      00344 MOVLF macro lit, reg    ;public
                      00345     movlw lit
                      00346     movwf reg
                      00347 endm
                      00348 
                      00349 ;------------------------------------------------------------------------------
                      00350 ;*Subtracts reg from lit and stores in WREG or reg.  Affects WREG, STATUS.  2 to 3 Instruction Cycles.
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00351 ;*lit: literal to subtract from
                      00352 ;*reg: register to subtract from literal
                      00353 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00354 SUBLF macro lit, reg, dest      ;public
                      00355     movf reg, w
                      00356     sublw lit
                      00357     if dest == 1
                      00358         movwf reg
                      00359     endif
                      00360 endm
                      00361 
                      00362 ;------------------------------------------------------------------------------
                      00363 ;*Exclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00364 ;*lit: literal to exclusive or with reg
                      00365 ;*reg: register to exclusive or with literal
                      00366 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00367 XORLF macro lit, reg, dest      ;public
                      00368     movlw lit
                      00369     xorwf reg, dest
                      00370 endm
                      00371 
                      00372 ;------------------------------------------------------------------------------
                      00373 ;*Negates reg and stores in WREG or reg.  Affects STATUS.  2 Instruction Cycles.
                      00374 ;*reg: register to negate (result is 0 - register)
                      00375 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00376 NEGATEF macro reg, dest ;public
                      00377     if dest == 1
                      00378         comf reg, f
                      00379         incf reg, f
                      00380     else
                      00381         movf reg, w
                      00382         sublw 0x00      ;WREG = 0 - reg
                      00383     endif
                      00384 endm
                      00385 
                      00386 ;------------------------------------------------------------------------------
                      00387 ;*Sets WREG equal to reg and reg equal to WREG.  Affects STATUS.  2 Instruction Cycles.
                      00388 ;*reg: the register to swap with WREG
                      00389 SWAPWF macro reg        ;public
                      00390     xorwf reg, f        ;reg = reg xor WREG
                      00391     xorwf reg, w        ;WREG = reg xor WREG xor WREG = reg
                      00392     xorwf reg, f        ;reg = reg xor WREG xor reg = WREG
                      00393 endm
                      00394 
                      00395 ;------------------------------------------------------------------------------
                      00396 ;*Sets regA equal to regB and regB equal to regA.  Affects STATUS, WREG.  4 Instruction Cycles.
                      00397 ;*regA: register to move to regB
                      00398 ;*regB: register to move to regA
                      00399 SWAPFF macro regA, regB ;public
                      00400     movf regA, w
                      00401     xorwf regB, w       ;WREG = regA xor regB
                      00402     xorwf regA, f       ;regA = regA xor regB xor regA = regB
                      00403     xorwf regB, f       ;regB = regB xor regA xor regB = regA
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00404 endm
                      00405 
                      00406 ;------------------------------------------------------------------------------
                      00407 ;*Adds regA to regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00408 ;*regA: register to add to regB
                      00409 ;*regB: register to add to regA
                      00410 ADDFF_TW macro regA, regB       ;public
                      00411     xorwf regA, f       ;regA = regA xor WREG
                      00412     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00413     addwf regB, f       ;regB = regB - regA
                      00414     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00415     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00416 endm
                      00417 
                      00418 ;------------------------------------------------------------------------------
                      00419 ;*Ands regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00420 ;*regA: register to and with regB
                      00421 ;*regB: register to and with regA
                      00422 ANDFF_TW macro regA, regB       ;public
                      00423     xorwf regA, f       ;regA = regA xor WREG
                      00424     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00425     andwf regB, f       ;regB = regB and regA
                      00426     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00427     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00428 endm
                      00429 
                      00430 ;------------------------------------------------------------------------------
                      00431 ;*Inclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00432 ;*regA: register to inclusive or with regB
                      00433 ;*regB: register to inclusive or with regA
                      00434 IORFF_TW macro regA, regB       ;public
                      00435     xorwf regA, f       ;regA = regA xor WREG
                      00436     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00437     iorwf regB, f       ;regB = regB or regA
                      00438     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00439     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00440 endm
                      00441 
                      00442 ;------------------------------------------------------------------------------
                      00443 ;*Moves the value in regA to regB, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00444 ;*regA: register to move to regB
                      00445 ;*regB: destination register
                      00446 MOVFF_TW macro regA, regB       ;public
                      00447     xorwf regA, w
                      00448     movwf regB          ;regB = regA xor WREG
                      00449     xorwf regA, w       ;WREG = regA xor WREG xor regA = WREG
                      00450     xorwf regB, f       ;regB = regA xor WREG xor WREG = regA
                      00451 endm
                      00452 
                      00453 ;------------------------------------------------------------------------------
                      00454 ;*Subracts regA from regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles
                            .
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00455 ;*regA: register to subtract from regB
                      00456 ;*regB: register regA is subtracted from and the destination register
                      00457 SUBFF_TW macro regA, regB       ;public
                      00458     xorwf regA, f       ;regA = regA xor WREG
                      00459     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00460     subwf regB, f       ;regB = regB - regA
                      00461     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00462     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00463 endm
                      00464 
                      00465 ;------------------------------------------------------------------------------
                      00466 ;*Exclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00467 ;*regA: register to exclusive or with regB
                      00468 ;*regB: register to exclusive or with regA
                      00469 XORFF_TW macro regA, regB       ;public
                      00470     xorwf regB, f       ;regB = WREG xor regB
                      00471     xorwf regA, w       ;WREG = WREG xor regA
                      00472     xorwf regB, f       ;regB = WREG xor regB xor WREG xor regA = regA xor regB
                      00473     xorwf regA, w       ;WREG = WREG xor regA xor regA = WREG
                      00474 endm
                      00475 
                      00476 ;------------------------------------------------------------------------------
                      00477 ;*Adds lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00478 ;*lit: literal to add to reg
                      00479 ;*reg: register which to add literal
                      00480 ADDLF_TW macro lit, reg ;public
                      00481     subwf reg, f        ;reg = reg - WREG
                      00482     addlw lit           ;WREG = WREG + lit
                      00483     addwf reg, f        ;reg = reg - WREG + WREG + lit = reg + lit
                      00484     addlw 0-lit         ;WREG = WREG - lit
                      00485 endm
                      00486 
                      00487 ;------------------------------------------------------------------------------
                      00488 ;*Ands lit and reg and stores in reg, but preserves WREG.  Affect STATUS.  7 Instruction Cycles.
                      00489 ;*lit: literal to and with reg
                      00490 ;*reg: register which to and with literal
                      00491 ANDLF_TW macro lit, reg ;public
                      00492     SWAPWF reg
                      00493     andlw lit           ;WREG = reg and lit
                      00494     SWAPWF reg
                      00495 endm
                      00496 
                      00497 ;------------------------------------------------------------------------------
                      00498 ;*Inclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  7 Instruction Cycle
                            s.
                      00499 ;*lit: literal to inclusive or with reg
                      00500 ;*reg: register which to inclusive or with literal
                      00501 IORLF_TW macro lit, reg ;public
                      00502     SWAPWF reg
                      00503     iorlw lit           ;WREG = reg or lit
                      00504     SWAPWF reg
                      00505 endm
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00506 
                      00507 ;------------------------------------------------------------------------------
                      00508 ;*Moves lit to reg, but preserves WREG.  Affects STATUS.  4 instruction cycles.
                      00509 ;*lit: literal to move
                      00510 ;*reg: register to move literal to
                      00511 MOVLF_TW macro lit, reg ;public
                      00512     movwf reg           ;reg = WREG
                      00513     xorlw lit           ;WREG = WREG xor lit
                      00514     xorwf reg, f        ;reg = WREG xor WREG xor lit = lit
                      00515     xorlw lit           ;WREG = WREG xor lit xor lit
                      00516 endm
                      00517 
                      00518 ;------------------------------------------------------------------------------
                      00519 ;*Subtracts reg from lit and stores in reg, but preserves WREG.  Affects STATUS.  6 Instruction Cycles.
                      00520 ;*lit: literal to subtract reg from
                      00521 ;*reg: register to subtract from lit and destination register
                      00522 SUBLF_TW macro lit, reg ;public
                      00523     subwf reg, f        ;reg = reg - WREG
                      00524     addlw 0-lit         ;WREG = WREG - lit
                      00525     addwf reg, f        ;reg = reg - WREG + WREG - lit = reg - lit
                      00526     addlw lit           ;WREG = WREG - lit + lit = WREG
                      00527     NEGATEF reg, f      ;Negate reg, 2 cycles
                      00528 endm
                      00529 
                      00530 ;------------------------------------------------------------------------------
                      00531 ;*Exclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycle
                            s.
                      00532 ;*lit: literal to exclusive or reg with
                      00533 ;*reg: register to exclusive or with lit and destination register
                      00534 XORLF_TW macro lit, reg ;public
                      00535     xorwf reg, f        ;reg = reg xor WREG
                      00536     xorlw lit           ;WREG = WREG xor lit
                      00537     xorwf reg, f        ;reg = reg xor WREG xor WREG xor lit = reg xor lit
                      00538     xorlw lit           ;WREG = WREG xor lit xor lit = WREG
                      00539 endm
                      00540 
                      00541 ;------------------------------------------------------------------------------
                      00542 ;*Sets regA equal to regB and regB equal to regA, but preserves WREG.  Affects STATUS.  8 Instruction Cy
                            cles.
                      00543 ;*regA: register to move regB to
                      00544 ;*regB: register to more regA to
                      00545 SWAPFF_TW macro regA, regB      ;public
                      00546     xorwf regA, f       ;regA = regA xor WREG
                      00547     xorwf regB, f       ;regB = regB xor WREG
                      00548     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00549     xorwf regB, w       ;WREG = regA xor WREG xor regB
                      00550     xorwf regA, f       ;regA = WREG xor regA xor regB xor regA xor WREG = regB
                      00551     xorwf regB, f       ;regB = WREG xor regA xor regB xor regB xor WREG = regA
                      00552     xorwf regA, w       ;WREG = WREG xor regA xor regB xor regA = WREG xor regB
                      00553     xorwf regB, w       ;WREG = WREG xor regB xor regB = WREG
                      00554 endm
                      00555 
                      00556 ;------------------------------------------------------------------------------
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00557 ;*Adds WREG to the Program Counter.  Usually used to lookup a value in a table of retlw between labels T
                            ableStart and TableEnd.  1 to 6 Instruction Cycles.
                      00558 ;*TableStart:  starting address in program memory of the table, should be immediately following call to 
                            ADDWPC
                      00559 ;*TableEnd:  ending address in program memory of the table.  For support if table crosses a page boundar
                            y (gives warning).
                      00560 ADDWPC macro TableStart, TableEnd       ;public
                      00561     if (high TableStart)
                      00562         movlw high TableStart
                      00563         movwf PCLATH
                      00564     endif
                      00565     if (high TableStart) == (high TableEnd)
                      00566         addwf PCL, f
                      00567     else
                      00568         messg "Table crosses page boundary"
                      00569         addwf PCL, w
                      00570         btfss STATUS, C
                      00571             incf PCLATH, f
                      00572         movwf PCL
                      00573     endif
                      00574 endm
                      00575 
                      00576 
                      00287 
                      00288 ;Sets up PCLATH for a jump to the address given
                      00289 ;------------------------------------------------------------------------------
                      00290 MGOTOSETUP macro address
                      00291         if (address & (0x1000))
                      00292                 bsf PCLATH, 4
                      00293         else
                      00294                 bcf PCLATH, 4
                      00295         endif
                      00296         if (address & (0x800))
                      00297                 bsf PCLATH, 3
                      00298         else
                      00299                 bcf PCLATH, 3
                      00300         endif
                      00301         endm
                      00302 
                      00303 ;Sets up PCLATH and jumps to address (universal jump anywhere)
                      00304 ;------------------------------------------------------------------------------
                      00305 MGOTO macro address
                      00306         MGOTOSETUP address
                      00307         goto address
                      00308         endm
                      00309 
                      00310 ;Recieve configuration from the PC
                      00311 ;------------------------------------------------------------------------------
                      00312 CONFRECIEVE macro
                      00313     call GetByte                        ;Recieve ConfigLoc1
                      00314     movf i2csdata, w
                      00315     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                      00316     if clockFreq == 20              ;if necessary
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00317         iorlw 1 << CLOCKFREQBIT
                      00318     endif
                      00319     movwf configLoc1
                      00320     call GetByte                        ;Recieve trigger delay
                      00321     MOVFF i2csdata, triggerDelay1
                      00322     call GetByte
                      00323     MOVFF i2csdata, triggerDelay2
                      00324     call GetByte                
                      00325     MOVFF i2csdata, triggerDelay3
                      00326     call GetByte                                        ;Recieve sample rate
                      00327     MOVFF i2csdata, sampleRate1
                      00328     call GetByte
                      00329     MOVFF i2csdata, sampleRate2
                      00330     endm
                      00331 
                      00332 ;Send configuration to the PC
                      00333 ;------------------------------------------------------------------------------
                      00334 CONFSEND macro
                      00335     ;Send number of datapoints (2 bytes)
                      00336     MOVLF high TOTALBUFFERSIZE, i2csdata
                      00337     call PutByte
                      00338     MOVLF low TOTALBUFFERSIZE, i2csdata
                      00339     call PutByte
                      00340     ;Send clock frequency configuration
                      00341     MOVFF configLoc1, i2csdata
                      00342     call PutByte
                      00343     MOVFF triggerDelay1, i2csdata
                      00344     call PutByte
                      00345     MOVFF triggerDelay2, i2csdata
                      00346     call PutByte
                      00347     MOVFF triggerDelay3, i2csdata
                      00348     call PutByte
                      00349     MOVFF sampleRate1, i2csdata
                      00350     call PutByte
                      00351     MOVFF sampleRate2, i2csdata
                      00352     call PutByte
                      00353     endm
                      00354 
                      00355 ;Send front panel status to the PC
                      00356 ;------------------------------------------------------------------------------
                      00357 CHANNELCONFSEND macro
                      00358         MOVFF dataConfig, i2csdata              ;Channel configuration
                      00359     call PutByte
                      00360         clrf i2csdata
                      00361     call PutByte                                        ;Channel 1 offset
                      00362     call PutByte                                        ;Channel 2 offset
                      00363         MOVFF triggerLevel, i2csdata
                      00364     call PutByte                                        ;Triggerlevel
                      00365         MOVFF triggerChannel, i2csdata
                      00366         call PutByte                                    ;Trigger source channel
                      00367         endm
                      00368 
                      00369 ;Get front panel status
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00370 ;------------------------------------------------------------------------------
                      00371 CHANNELCONFSTORE macro
                      00372     ;Format of channel configuration is: Channel 1 Scale (2) bits
                      00373     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                      00374     ;                                    Channel 2 Scale (2) bits
                      00375     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                      00376     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                      00377     ;                                    Channel 1 Attenuation (No Attenuation = 1, attenuation by 10 = 
                            0) (1) bit
                      00378         ;                                                                        Channel 2 Attenuation (
                            No attenuation = 1, attenuation by 10 = 0) (1) bit
                      00379     clrf dataConfig
                      00380         BNKSEL TRISC
                      00381         bcf TRISC, CH1SEL                               ;Ch1Sel output
                      00382         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
                      00383         bcf TRISA, CH1SELG                              ;Ch1Sel output
                      00384         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
                      00385         BNKSEL ANALOG_SEL       
                      00386         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
                      00387         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                      00388         if HARDWARE == 0x10
                      00389                 bsf dataConfig, 7
                      00390                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00391                         bcf dataConfig, 7
                      00392                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00393                         bcf dataConfig, 7
                      00394                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00395                         bsf dataConfig, 6
                      00396         else
                      00397                 bsf dataConfig, 6                               ;Assume Gain = 2
                      00398                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00399                         bcf dataConfig, 6
                      00400                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00401                         bcf dataConfig, 6
                      00402                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00403                         bsf dataConfig, 7
                      00404         endif
                      00405         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00406                 bsf dataConfig, 3
                      00407         bsf ANALOG_SEL, CH1SEL
                      00408         bsf ANALOG_GAIN, CH1SELG
                      00409         BNKSEL TRISC
                      00410         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
                      00411         bcf TRISC, CH2SEL                               ;Ch2Sel output
                      00412         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
                      00413         bcf TRISA, CH2SELG                              ;Ch2Sel output
                      00414         BNKSEL ANALOG_SEL
                      00415         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
                      00416         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                      00417         if HARDWARE == 0x10
                      00418                 bsf dataConfig, 5
                      00419                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00420                         bcf dataConfig, 5
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00421                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00422                         bcf dataConfig, 5
                      00423                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00424                         bsf dataConfig, 4
                      00425         else
                      00426                 bsf dataConfig, 4                               ;Assume Gain = 2
                      00427                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00428                         bcf dataConfig, 4
                      00429                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00430                         bcf dataConfig, 4
                      00431                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00432                         bsf dataConfig, 5
                      00433         endif
                      00434         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00435                 bsf dataConfig, 2
                      00436     bsf ANALOG_SEL, CH2SEL
                      00437         bsf ANALOG_GAIN, CH2SELG
                      00438 
                      00439         btfss ATTNPORT, CH1ATTN                         ;If Channel 1 is Attenuated by 10 then mark
                      00440                 bsf dataConfig, 1
                      00441         btfss ATTNPORT, CH2ATTN                         ;If Channel 2 is Attenuated by 10 then mark
                      00442                 bsf dataConfig, 0
                      00443 
                      00444         ;Next byte is Trigger Level
                      00445         bcf ADC_CONTROLPORT, ADDR0                      ;Select address for trigger level
                      00446         bsf ADC_PORT, ADDR1
                      00447         bcf ADC_PORT, ADDR2
                      00448         bcf ADC_PORT, CS                                        ;Select maxim ADC
                      00449         bcf ADC_CONTROLPORT, RDD                        ;Begin conversion
                      00450 
                      00451         ;Next byte/bit is Trigger Source Channel.  Get Trigger Source while waiting for conversion
                      00452         clrf triggerChannel
                      00453         btfss TRGSRCPORT, TRGCH                         ;If Trigger Source is Channel 2 then mark
                      00454                 bsf     triggerChannel, 0
                      00455 
                      00456         movf ADC_DATAPORT, w                            ;Save trigger level
                      00457         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
                      00458         bsf ADC_PORT, CS                                        ;unselect
                      00459         bcf ADC_CONTROLPORT, ADDR0                      ;Unselect address for trigger level
                      00460         bcf ADC_PORT, ADDR1
                      00461         bcf ADC_PORT, ADDR2
                      00462         movwf triggerLevel
                      00463     endm
                      00464 
                      00465 
                      00466 ;=============================================================================
                      00467 ; R E S E T   V E C T O R
                      00468 ;=============================================================================
0000                  00469 org 0x000
                      00470 ;Initialize
                      00471 ;First three lines of initialization included here to save on memory.
                      00472     MOVLF B'11000110', ADC_CONTROLPORT
0000   30C6               M     movlw B'11000110'
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0001   0089               M     movwf ADC_CONTROLPORT
0002   0188           00473     clrf ADC_DATAPORT
0003   2870           00474     goto Initial
                      00475 
                      00476 ;=============================================================================
                      00477 ; I N T E R R U P T  V E C T O R
                      00478 ;=============================================================================
0004                  00479 org 0x004
0004                  00480 IntHandler
0004   1B0B           00481         btfsc INTCON, PEIE                                      ;Check for Timer 1 interrupt
0005   2813           00482                 goto IntSaveContext
0006                  00483 IntHandlerB
0006   1283           00484     bcf STATUS, RP0                                             ;Ensure we're in Bank0
0007   087B           00485         movf cntr, w                                            ;Skip the post trigger delay if not used
0008   0782           00486         addwf PCL, f
0009                  00487 IntHandlerC
0009   0BF6           00488         decfsz cntra, f                                         ;Handle the post trigger delay
000A   2809           00489         goto IntHandlerC
000B   0BF7           00490     decfsz cntrb, f
000C   2809           00491                 goto IntHandlerC
000D   0BF8           00492         decfsz cntrc, f
000E   2809           00493                 goto IntHandlerC
000F                  00494 MainSelect
                      00495         MOVFF functptrhigh, PCLATH                      ;Jump to the proper sampling mode
000F   0879               M     movf functptrhigh, w
0010   008A               M     movwf PCLATH
                      00496         MOVFF functptrlow, PCL
0011   087A               M     movf functptrlow, w
0012   0082               M     movwf PCL
0013                  00497 IntSaveContext
0013   00FE           00498     movwf       wregTemp                                        ;Save off current W register contents
0014   0E03           00499         swapf   STATUS, w                                       ;Move status register into W register
0015   00FD           00500         movwf   statusTemp                                      ;Save off contents of a "swapped" STATUS
                             register
0016   1283           00501         bcf STATUS, RP0                                         ;Ensure we're in Bank0
0017   280F           00502         goto MainSelect
                      00503 
                      00504 ;=============================================================================
                      00505 ; I N C L U D E S
                      00506 ;=============================================================================
                      00507     include "i2cs.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: Software immulated I2C Slave Device.  I2CPort sets I/O port for I2C.  CLK sets clock pin.
                              SDA sets data pin.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 10/28/2009
                      00007 ;*Filename: i2cs.inc
                      00008 ;
                      00009 ;Program Words: 78
                      00010 ;Data Words:     2
                      00011 ;
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00012 ;Versions:  1.0 - 12/29/2002 -- Code finished, tested, and cleaned.
                      00013 ;                       1.0 - 07/10/2003 -- Made code portable with external constants.
                      00014 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00015 ;                       1.0 - 10/28/2009 -- Fixed bug so that code will work with interrupts
                      00016 ;
                      00017 ;Copyright (C) 2002-2009 Jonathan Weaver
                      00018 ;
                      00019 ;This program is free software; you can redistribute it and/or modify it under
                      00020 ;the terms of the GNU General Public License as published by the Free Software
                      00021 ;Foundation; either version 2 of the License, or (at your option) any later
                      00022 ;version.
                      00023 ;
                      00024 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00025 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00026 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00027 ;details.
                      00028 ;
                      00029 ;You should have received a copy of the GNU General Public License along with
                      00030 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00031 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00032 ;
                      00033 ;==============================================================================
                      00034 
                      00035 ;;;;;; External Constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00036 
                      00037 ;*CLK is a literal which determines which pin will be the clock signal
                      00038 ;external CLK
                      00039 
                      00040 ;*SDA is a literal which determines which pin will be the data signal
                      00041 ;external CLK
                      00042 
                      00043 ;*I2CPORT is a literal which determines which port will be used as the I2C port.  Example setup for CLK 
                            = RB6 and SDA = RB7.<br><br>  CLK equ 0x06<br>  SDA equ 0x07<br> I2CPORT equ PORTB
                      00044 ;external I2CPORT
                      00045 
                      00046 
                      00047 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 
                      00049 ;*I2C Data byte, declare as register in main program
                      00050 ;external i2csdata
                      00051 
                      00052 ;*Temporary Counter, declare as register in main program
                      00053 ;external cntr
                      00054 
                      00055 ;;;;;;; I2CSGetStop Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00056 ;*Tests if the next clock cycle is stop, start, or continued transmission.
                      00057 ;*Returns:  If Stop detected, returns hFF in WREG.  If Start detected, returns hFE in WREG.  If continue
                            d transmission, recieves next byte and returns h00 in WREG.  Next byte appears in i2csdata
0018                  00058 I2CSGetStop ;public
0018   1E86           00059                 btfss I2CPORT, CLK                      ;Clock line high?
0019   2818           00060                         goto I2CSGetStop
001A   1A06           00061                 btfsc I2CPORT, SDA
001B   2823           00062                         goto I2CSGetStopL2              ;SDA was high
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001C                  00063 I2CSGetStopL1
001C   1A06           00064                 btfsc I2CPORT, SDA
001D   34FF           00065                         retlw 0xFF                              ;Detected stop bit
001E   1A86           00066                 btfsc I2CPORT, CLK
001F   281C           00067                         goto I2CSGetStopL1              ;Wait for clock to go low
0020   3002           00068                 movlw 0x02
0021   00FC           00069                 movwf i2csdata
0022   283D           00070                 goto I2CSGetByteL1                      ;Get next byte, no stop bit
0023                  00071 I2CSGetStopL2
0023   1E06           00072                 btfss I2CPORT, SDA
0024   282A           00073                         goto I2CSGetStopL3              ;Detected start bit
0025   1A86           00074                 btfsc I2CPORT, CLK
0026   2823           00075                         goto I2CSGetStopL2              ;Wait for clock to go low
0027   3003           00076                 movlw 0x03
0028   00FC           00077                 movwf i2csdata
0029   283D           00078                 goto I2CSGetByteL1                      ;Get next byte, no start bit
002A                  00079 I2CSGetStopL3
002A   1A86           00080                 btfsc I2CPORT, CLK
002B   282A           00081                         goto I2CSGetStopL3              ;Wait for clock to go low
002C   34FE           00082                 retlw 0xFE
                      00083 
                      00084 ;;;;;;; I2CSWaitStart Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00085 ;*Waits for a start condition.  Never returns unless Start detected and byte recieved.
                      00086 ;*Returns: 0x00 in WREG.  Byte returned in i2csdata
002D                  00087 I2CSWaitStart ;public
                      00088                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
002D   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
002E   1606           00089                 bsf I2CPORT, SDA                        ;Release SDA
                      00090                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
002F   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0030                  00091 I2CSWaitStartL3
0030   1E86           00092                 btfss I2CPORT, CLK                      ;Clock line high?
0031   2830           00093                         goto I2CSWaitStartL3
0032   1E06           00094                 btfss I2CPORT, SDA                      ;Data line high?
0033   2830           00095                         goto I2CSWaitStartL3
0034                  00096 I2CSWaitStartL2
0034   1A06           00097                 btfsc I2CPORT, SDA                      ;Data line low?
0035   2834           00098                         goto I2CSWaitStartL2
0036   1E86           00099                 btfss I2CPORT, CLK                      ;Clock line high?
0037   2830           00100                         goto I2CSWaitStartL3
0038                  00101 I2CSWaitStartL1
0038   1A86           00102                 btfsc I2CPORT, CLK                      ;Clock line low?
0039   2838           00103                         goto I2CSWaitStartL1
                      00104                 ;Fall into I2CSGetByte
                      00105 
                      00106 ;;;;;;; I2CSGetByte Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00107 ;*Recieves a byte and sends an acknowledge.  Recieved byte appears in i2csdata
                      00108 ;*Returns:  0x00 in WREG
003A                  00109 I2CSGetByte ;public
003A   1003           00110                 bcf STATUS, C                           ;Clear carry
003B   01FC           00111                 clrf i2csdata                           ;Clear Input byte
003C   147C           00112                 bsf i2csdata, 0                         ;Set indicator
003D                  00113 I2CSGetByteL1
003D   1E86           00114                 btfss I2CPORT, CLK                      ;Clock high transition?
003E   283D           00115                         goto I2CSGetByteL1
003F   1003           00116                 bcf STATUS, C                           ;High transition, get bit into carry
0040   1A06           00117                 btfsc I2CPORT, SDA                      ;Assume clear, set if necessary
0041   1403           00118                         bsf STATUS, C
0042   0DFC           00119                 rlf i2csdata, F                         ;Add to LSB
0043                  00120 I2CSGetByteL2
0043   1A86           00121                 btfsc I2CPORT, CLK                      ;Clock low transition
0044   2843           00122                         goto I2CSGetByteL2
0045   1C03           00123                 btfss STATUS, C                         ;Check indicator.  High is done
0046   283D           00124                         goto I2CSGetByteL1
                      00125                 ;Fall into Acknowledge
                      00126 
                      00127 ;;;;;;; I2CSPutAck Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00128 ;*Send an acknowledge.
                      00129 ;*Returns: 0x00 in WREG
0047                  00130 I2CSPutAck ;public
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0047   1206           00131                 bcf I2CPORT, SDA                        ;Ensure SDA low
                      00132                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0048   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0049   1206           00133                 bcf I2CPORT, SDA                        ;Hold SDA low
                      00134                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
004A   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
004B                  00135 I2CSPutAckL1
004B   1E86           00136                 btfss I2CPORT, CLK                      ;Clock high transition
004C   284B           00137                         goto I2CSPutAckL1
004D                  00138 I2CSPutAckL2
004D   1A86           00139                 btfsc I2CPORT, CLK                      ;Clock low transition
004E   284D           00140                         goto I2CSPutAckL2
                      00141                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
004F   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0050   1606           00142                 bsf I2CPORT, SDA                        ;Release SDA
                      00143                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0051   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0052   3400           00144                 retlw 0
                      00145 
                      00146 ;;;;;;; I2CSPutByte ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00147 ;*Sends a byte.  Expects: the byte to send to be in i2csdata.
                      00148 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
0053                  00149 I2CSPutByte ;public
0053   1206           00150                 bcf I2CPORT, SDA                        ;Ensure SDA pulls low
0054   3008           00151                 movlw 0x08
0055   00FB           00152                 movwf cntr
0056   2859           00153                 goto I2CSPutByteL1S
0057                  00154 I2CSPutByteL1
0057   1A86           00155                 btfsc I2CPORT, CLK                      ;Clock low transition
0058   2857           00156                         goto I2CSPutByteL1
0059                  00157 I2CSPutByteL1S
                      00158                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0059   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
005A   1606           00159                 bsf I2CPORT, SDA                        ;Release SDA
005B   1FFC           00160                 btfss i2csdata, 7
005C   1206           00161                         bcf I2CPORT, SDA                ;Hold SDA low
                      00162                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
005D   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
005E                  00163 I2CSPutByteL2
005E   1E86           00164                 btfss I2CPORT, CLK                      ;Clock high transition
005F   285E           00165                         goto I2CSPutByteL2
0060   0DFC           00166                 rlf i2csdata, F
0061   0BFB           00167                 decfsz cntr, F
0062   2857           00168                         goto I2CSPutByteL1
0063                  00169 I2CSPutByteL3
0063   1A86           00170                 btfsc I2CPORT, CLK                      ;Clock low transition
0064   2863           00171                         goto I2CSPutByteL3
                      00172                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0065   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0066   1606           00173                 bsf I2CPORT, SDA                        ;Release SDA
                      00174                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0067   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
                      00175                 ;Fall into I2CSGetAck
                      00176 
                      00177 ;;;;;;; I2CSGetAck ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00178 ;*Detects if the master sent an acknowledge.  Expects: to be called when clock is low
                      00179 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
0068                  00180 I2CSGetAck ;public
0068   1E86           00181                 btfss I2CPORT, CLK                      ;Clock high transition
0069   2868           00182                         goto I2CSGetAck
006A   3000           00183                 movlw 0x00                                      ;Ack
006B   1A06           00184                 btfsc I2CPORT, SDA                      ;Test SDA
006C   30FF           00185                         movlw 0xFF                              ;No Ack
006D                  00186 I2CSGetAckL1
006D   1A86           00187                 btfsc I2CPORT, CLK                      ;Clock low transition
006E   286D           00188                         goto I2CSGetAckL1
006F   0008           00189                 return
                      00508 
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00509 ;=============================================================================
                      00510 ; I N I T I A L I Z E
                      00511 ;=============================================================================
0070                  00512 Initial
                      00513 if HARDWARE == 0x10
                      00514  
                      00515    clrf PORTA
                      00516     BNKSEL TRISA
                      00517     MOVLF B'00000011', TRISA                    ;Configure PORTA
                      00518     MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
                      00519         MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
                      00520     MOVLF B'00000001', ADC_CONTROLPORT
                      00521     MOVLF B'11111111', ADC_DATAPORT
                      00522     MOVLF B'00000111', TRISE            ;Set up as inputs
                      00523         MOVLF B'00000111', ADCON1           ;Turn off A/D converter
                      00524     MOVLF B'11111001', TRISC                    ;Configure PORTC
                      00525         MOVLF D'21', SPBRG                                      ;Configure serial port.  Set to 57,600 b
                            aud (nominally 56,818 baud at 20 MHz clock).
                      00526         MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mode, high 
                            speed mode
                      00527     BNKSEL RCSTA
                      00528         MOVLF B'10000000', RCSTA                        ;Eight bit recieve not yet enabled
                      00529     bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
                      00530     clrf ADCON0
                      00531         bsf TRGSRCPORT, TRGCH                           ;Ensure that trigger source is read as channel 1
                      00532 
                      00533 else
                      00534     if PIC == 0x887
                      00535 
                      00536                 ;Contributed by Paul Messer
                      00537 
0070   0185           00538                 clrf PORTA
                      00539                 BNKSEL  ANSEL                                           ;Access bank3
                          M         if ANSEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
0071   1703               M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANSEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0072   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000180                M         CURRENTBANK set ANSEL & 0x180
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0073   0188           00540                 clrf    ANSEL                                           ;Turn off analog mode on RE2,1,0
                             and RA5,3,2,1,0 so the pins read digital
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0074   0189           00541                 clrf    ANSELH                                          ;Turn off analog mode on RB5,0,4
                            ,1,3,2 so the pins read digital
                      00542                 MOVLF 0x08, BAUDCTL                                     ;Set the Serial Port baud rate g
                            enerators
0075   3008               M     movlw 0x08
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0076   0087               M     movwf BAUDCTL
                      00543                 BNKSEL  SPBRG                                           ;Access bank 1 and continue sett
                            ing baud rate generators
                          M         if SPBRG & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
0077   1303               M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if SPBRG & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set SPBRG & 0x180
                      00544                 MOVLF 0x56, SPBRG                                       ; for 57.6K baud
0078   3056               M     movlw 0x56
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0079   0099               M     movwf SPBRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
007A   019A           00545                 clrf SPBRGH
                      00546                 MOVLF 0x24, TXSTA                                       ;Set the Serial Port Transmitter
                             configuration
007B   3024               M     movlw 0x24
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
007C   0098               M     movwf TXSTA
                      00547                 MOVLF B'11000000', WPUB                         ;Turn on weak pull-ups for CH1ATTN and C
                            H2ATTN input signals
007D   30C0               M     movlw B'11000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
007E   0095               M     movwf WPUB
                      00548                 MOVLF B'00010000', INTCON                       ;Interrupt on RB0 only, but not enabled 
                            yet
007F   3010               M     movlw B'00010000'
0080   008B               M     movwf INTCON
                      00549                 MOVLF B'00010111', TRISA                        ;Configure PORTA
0081   3017               M     movlw B'00010111'
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0082   0085               M     movwf TRISA
                      00550                 MOVLF B'01000000', OPTION_REG           ;Interrupt on rising edge of RB0 plus enable POR
                            TB's weak pull-ups
0083   3040               M     movlw B'01000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0084   0081               M     movwf OPTION_REG
                      00551                 MOVLF B'11110001', TRISB                        ;Allow RB7, RB6 to be inputs with weak p
                            ull-ups
0085   30F1               M     movlw B'11110001'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0086   0086               M     movwf TRISB
                      00552                 MOVLF B'11111111', TRISD
0087   30FF               M     movlw B'11111111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0088   0088               M     movwf TRISD
                      00553                 MOVLF B'00000100', TRISE                        ;Set up USB detect as input, CS and ADDR
                            0 as outputs
0089   3004               M     movlw B'00000100'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008A   0089               M     movwf TRISE
                      00554                 MOVLF B'10111001', TRISC                        ;Configure PORTC
008B   30B9               M     movlw B'10111001'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
008C   0087               M     movwf TRISC
                      00555                 BNKSEL  RCSTA                                           ;Access bank 0
                          M         if RCSTA & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if RCSTA & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
008D   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set RCSTA & 0x180
                      00556                 MOVLF 0x90, RCSTA                                       ;Set the Serial Port Receiver co
                            nfiguration
008E   3090               M     movlw 0x90
008F   0098               M     movwf RCSTA
0090   1383           00557                 bcf STATUS, IRP                                         ;Ensure indirect addressing of B
                            ank0 and Bank1
0091   019F           00558                 clrf ADCON0                                                     ;Make sure PIC's ADC is 
                            off
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00559         
                      00560         else
                      00561                 clrf PORTA
                      00562                 BNKSEL TRISA
                      00563                 MOVLF B'00010111', TRISA                        ;Configure PORTA
                      00564                 MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
                      00565                 MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
                      00566                 MOVLF B'00110001', TRISB
                      00567                 MOVLF B'11111111', TRISD
                      00568                 MOVLF B'00000100', TRISE            ;Set up USB detect as input, CS and ADDR0 as outputs
                      00569                 MOVLF B'00000111', ADCON1           ;Turn off A/D converter
                      00570                 MOVLF B'10111001', TRISC                        ;Configure PORTC
                      00571                 MOVLF D'21', SPBRG                                      ;Set to 57,600 baud (nominally 5
                            6,818 baud at 20 MHz clock).
                      00572                 MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mod
                            e, high speed mode
                      00573                 BNKSEL RCSTA    
                      00574                 MOVLF B'10000000', RCSTA                        ;Eight bit recieve not yet enabled
                      00575                 bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
                      00576                 clrf ADCON0
                      00577                 MOVLF B'11000010', PORTB                        ;Ensure RB7 and RB6 are high
                      00578                 bsf TRGSRCPORT, TRGCH                           ;Ensure that trigger source is read as c
                            hannel 1
                      00579 
                      00580         endif
                      00581         
                      00582         MOVLF B'00000101', T1CON                                ;Set up for timer1 with prescaler of 1
0092   3005               M     movlw B'00000101'
0093   0090               M     movwf T1CON
                      00583         
                      00584 endif
                      00585         
                      00586 ;=============================================================================
                      00587 ; M A I N
                      00588 ;=============================================================================
                      00589 
                      00590 ;Debug / testing code
                      00591 ;       MOVLF D'0', configLoc1
                      00592 ;       bsf configLoc1, TRIGGERENBIT
                      00593 ;       MOVLF D'0', triggerDelay1
                      00594 ;       MOVLF D'1', triggerDelay2
                      00595 ;       MOVLF D'5', triggerDelay3
                      00596 ;       movlw D'1'
                      00597 ;       movwf sampleRate1
                      00598 ;       movwf sampleRate2
                      00599 ;       movwf cntra
                      00600 ;       movwf cntrb
                      00601 ;       movwf cntrc
                      00602 ;       goto MainA
                      00603 
0094                  00604 Main
                      00605 ;       goto IntHandler
                      00606 
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00607 ;Normal main code
0094   20E6           00608     call WaitComm
0095                  00609 MainA
0095   018A           00610         clrf PCLATH                                                     ;Prepare for jumps
0096   0870           00611         movf configLoc1, w                  ;Put configuration in WREG
0097   390F           00612     andlw (1<<FREQMODEBIT3)|(1<<FREQMODEBIT2)|(1<<FREQMODEBIT1)|(1<<FREQMODEBIT0)   ;Unmask FreqMode
0098   20C8           00613         call loadFunctptrlow                            ;Setup functptrlow based on frequency mode
0099   00FA           00614         movwf functptrlow
009A   0870           00615         movf configLoc1, w                  ;Put configuration in WREG
009B   390F           00616     andlw (1<<FREQMODEBIT3)|(1<<FREQMODEBIT2)|(1<<FREQMODEBIT1)|(1<<FREQMODEBIT0)   ;Unmask FreqMode
009C   20D7           00617         call loadFunctptrhigh                           ;Setup functptrhigh based on frequency mode
009D   00F9           00618         movwf functptrhigh
009E                  00619 MainB
009E   1089           00620     bcf ADC_CONTROLPORT, ADDR0          ;Select Channel of ADC
009F   1A70           00621     btfsc configLoc1, CHANNELBIT
00A0   1489           00622         bsf ADC_CONTROLPORT, ADDR0
00A1   1086           00623     bcf ADC_PORT, CS                            ;Select MAX114
00A2   1F70           00624     btfss configLoc1, TRIGGERENBIT      ;Decide if trigger is enabled.  If so, wait on interrupt
00A3   280F           00625         goto MainSelect        
00A4                  00626 MainWaitTrig                            ;Trigger is enabled, set up interrupt
00A4   0A71           00627         incf triggerDelay1, w                           ;Set up cntrc = triggerDelay1 + 1
00A5   00F8           00628         movwf cntrc
00A6   0A72           00629         incf triggerDelay2, w                           ;Set up cntrb = triggerDelay2 + 1
00A7   00F7           00630         movwf cntrb     
00A8   01FB           00631         clrf cntr                                                       ;Assume cntr is not used for tri
                            gger delay, set to zero
00A9   3003           00632         movlw D'3'                                                      ;If triggerDelay3 <= 3 continue 
                            otherwise jump
00AA   0273           00633         subwf triggerDelay3, w
00AB   00F6           00634         movwf cntra                                                     
00AC   0AF6           00635         incf cntra, f                                           ;cntra = triggerDelay3 - 2
00AD   1803           00636         btfsc STATUS, C                                         ;If triggerDelay3 < 3 continue otherwise
                             jump
00AE   28B9           00637                 goto MainSetTriggerDelay
00AF   08F1           00638     movf triggerDelay1, f                               ;If triggerDelay1 = 0 continue otherwise jump
00B0   1D03           00639         btfss STATUS, Z
00B1   28B9           00640                 goto MainSetTriggerDelay
00B2   08F2           00641         movf triggerDelay2, f                           ;If triggerDelay2 = 0 continue otherwise jump
00B3   1D03           00642         btfss STATUS, Z
00B4   28B9           00643                 goto MainSetTriggerDelay
00B5   3C00           00644         sublw D'0'                                                      ;wreg = 3 - triggerDelay3
00B6   00FB           00645         movwf cntr
00B7   0DFB           00646         rlf cntr, f                                                     ;cntr = 2*(3 - triggerDelay3), c
                            ntr is used for low triggerdelays
00B8   28BE           00647         goto MainSkipSetTriggerDelay
00B9                  00648 MainSetTriggerDelay                                             ;Since triggerDelay3 >= 3, we need to in
                            crement cntrb and cntrc
00B9   3001           00649         movlw D'1'
00BA   1C03           00650         btfss STATUS, C
00BB   02F7           00651                 subwf cntrb, f
00BC   1C03           00652         btfss STATUS, C
00BD   02F8           00653                 subwf cntrc, f
00BE                  00654 MainSkipSetTriggerDelay
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00655 
                      00656 ;Debug code
                      00657 ;       goto IntHandler
                      00658 
                      00659 ;Normal code
                      00660     BNKSEL OPTION_REG
                          M         if OPTION_REG & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if OPTION_REG & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
00BE   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set OPTION_REG & 0x180
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00BF   1301           00661     bcf OPTION_REG, INTEDG              ;Assume trigger on falling edge
00C0   0870           00662     movf configLoc1, w                  ;Get the trigger status
00C1   3980           00663     andlw 0x01 << TRIGGERPOSBIT
                      00664     skipZero                            ;Positive or negative trigger
00C2   1D03               M         btfss STATUS, Z
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
00C3   1701           00665         bsf OPTION_REG, INTEDG          ;Trigger on rising edge
                      00666     BNKSEL 0x0000
                          M         if 0x0000 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if 0x0000 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
00C4   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set 0x0000 & 0x180
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C5   108B           00667     bcf INTCON, INTF                    ;Ensure that the RB0 interrupt flag is clear
00C6   178B           00668     bsf INTCON, GIE                     ;Enable RB0 Interrupt
00C7                  00669 MainWTrigB
00C7   2894           00670     goto Main
                      00671 
                      00672                                         ;Note that the gitter on the interrupt is
                      00673                                         ;1 cycles.  This translates to 200 ns
                      00674                                         ;on the PIC running at 20 MHz
                      00675 
                      00676 ;=============================================================================
                      00677 ; S U B R O U T I N E S
                      00678 ;=============================================================================
                      00679 
                      00680 ;Lookup table used to set functptrlow
                      00681 ;-----------------------------------------------------------------------------
00C8                  00682 loadFunctptrlow
00C8   0782           00683         addwf PCL, f
00C9   348B           00684         retlw (low Sample1M)                            ;FreqMode = 0
00CA   349A           00685     retlw (low Sample833k)                              ;FreqMode = 1
00CB   3408           00686         retlw (low Sample625k)                          ;FreqMode = 2
00CC   3449           00687         retlw (low Sample417k250k)                      ;FreqMode = 3
00CD   3449           00688         retlw (low Sample417k250k)                      ;FreqMode = 4
00CE   34FE           00689     retlw (low SampleDelayed)                   ;FreqMode = 5
00CF   348B           00690     retlw (low SampleRep5M)                             ;FreqMode = 6
00D0   349A           00691         retlw (low SampleRep2M)                         ;FreqMode = 7
00D1   3497           00692         retlw (low SampleXY417k)                        ;FreqMode = 8
00D2   34AA           00693         retlw (low SampleXY250k192k)            ;FreqMode = 9
00D3   34AA           00694         retlw (low SampleXY250k192k)            ;FreqMode = 10
00D4   3467           00695     retlw (low SampleXYDelayed)                 ;FreqMode = 11
00D5   34DE           00696         retlw (low SampleIntStart)                      ;FreqMode = 12
00D6   3493           00697         retlw (low SampleXY500k)                        ;FreqMode = 13
                      00698 
                      00699 ;Lookup table used to set functptrhigh
                      00700 ;-----------------------------------------------------------------------------
00D7                  00701 loadFunctptrhigh
00D7   0782           00702         addwf PCL, f
00D8   3404           00703         retlw (high Sample1M)                           ;FreqMode = 0
00D9   3414           00704     retlw (high Sample833k)                             ;FreqMode = 1
00DA   3403           00705         retlw (high Sample625k)                         ;FreqMode = 2
00DB   3403           00706         retlw (high Sample417k250k)                     ;FreqMode = 3
00DC   3403           00707         retlw (high Sample417k250k)                     ;FreqMode = 4
00DD   3401           00708     retlw (high SampleDelayed)                  ;FreqMode = 5
00DE   3404           00709     retlw (high SampleRep5M)                    ;FreqMode = 6
00DF   3414           00710         retlw (high SampleRep2M)                        ;FreqMode = 7
00E0   340E           00711         retlw (high SampleXY417k)                       ;FreqMode = 8
00E1   3403           00712         retlw (high SampleXY250k192k)           ;FreqMode = 9
00E2   3403           00713         retlw (high SampleXY250k192k)           ;FreqMode = 10
00E3   3402           00714     retlw (high SampleXYDelayed)                ;FreqMode = 11
00E4   3401           00715         retlw (high SampleIntStart)                     ;FreqMode = 12
00E5   3409           00716         retlw (high SampleXY500k)                       ;FreqMode = 13
                      00717 
                      00718 ;Wait for command from computer and respond accordingly
                      00719 ;-----------------------------------------------------------------------------
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E6                  00720 WaitComm
00E6   2176           00721     call WaitByte                                       ;Wait for recieve
00E7                  00722 WaitComm_Test                                           ;Determine the command and the response
                      00723     skipEqLF B'11111000', i2csdata
00E7   087C               M         movf i2csdata, w
00E8   3AF8               M         xorlw B'11111000'
00E9   1D03               M         btfss STATUS, Z
00EA   2931           00724         goto WaitComm_Conf
00EB                  00725 WaitComm_Data
                      00726     MOVLF B'11011100', i2csdata     ;Send beginning of message
00EB   30DC               M     movlw B'11011100'
00EC   00FC               M     movwf i2csdata
00ED   218E           00727     call PutByte
                      00728     MOVLF BUFFERMIN, FSR            ;Set pointer to beginning of queue
00EE   3020               M     movlw BUFFERMIN
00EF   0084               M     movwf FSR
                      00729     MOVLF BUFFERSIZE, cntrb                     ;Set counter
00F0   3040               M     movlw BUFFERSIZE
00F1   00F7               M     movwf cntrb
00F2                  00730 WaitComm_SendDataA
                      00731     MOVFF INDF, i2csdata            ;Get data ready to send
00F2   0800               M     movf INDF, w
00F3   00FC               M     movwf i2csdata
00F4   0A84           00732     incf FSR, F                     ;Increment pointer
00F5   218E           00733     call PutByte                        ;Send data
00F6   39FF           00734     andlw 0xFF                      ;Until end of queue
                      00735     skipZero
00F7   1D03               M         btfss STATUS, Z
00F8   2922           00736         goto WaitComm_SendDataExit
00F9   0BF7           00737     decfsz cntrb, f
00FA   28F2           00738         goto WaitComm_SendDataA
                      00739         MOVLF BUFFERSIZE, cntrb                 ;Set counter
00FB   3040               M     movlw BUFFERSIZE
00FC   00F7               M     movwf cntrb
00FD   1784           00740         bsf FSR, 7                                              ;Bank 1
00FE   0384           00741         decf FSR, f
00FF                  00742 WaitComm_SendDataB
                      00743     MOVFF INDF, i2csdata            ;Get data ready to send
00FF   0800               M     movf INDF, w
0100   00FC               M     movwf i2csdata
0101   0384           00744     decf FSR, F                     ;Increment pointer
0102   218E           00745     call PutByte                        ;Send data
0103   39FF           00746     andlw 0xFF                      ;Until end of queue
                      00747     skipZero
0104   1D03               M         btfss STATUS, Z
0105   2922           00748         goto WaitComm_SendDataExit
0106   0BF7           00749     decfsz cntrb, f
0107   28FF           00750         goto WaitComm_SendDataB
                      00751         MOVLF BUFFERSIZE, cntrb                 ;Set counter
0108   3040               M     movlw BUFFERSIZE
0109   00F7               M     movwf cntrb
010A   1783           00752         bsf STATUS, IRP                                 ;Bank 3
010B   0A84           00753         incf FSR, f
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

010C                  00754 WaitComm_SendDataC
                      00755     MOVFF INDF, i2csdata            ;Get data ready to send
010C   0800               M     movf INDF, w
010D   00FC               M     movwf i2csdata
010E   0A84           00756     incf FSR, F                     ;Increment pointer
010F   218E           00757     call PutByte                        ;Send data
0110   39FF           00758     andlw 0xFF                      ;Until end of queue
                      00759     skipZero
0111   1D03               M         btfss STATUS, Z
0112   2922           00760         goto WaitComm_SendDataExit
0113   0BF7           00761     decfsz cntrb, f
0114   290C           00762         goto WaitComm_SendDataC
                      00763         MOVLF BUFFERSIZE, cntrb                 ;Set counter
0115   3040               M     movlw BUFFERSIZE
0116   00F7               M     movwf cntrb
0117   1384           00764         bcf FSR, 7                                              ;Bank 3
0118   0384           00765         decf FSR, f
0119                  00766 WaitComm_SendDataD
                      00767     MOVFF INDF, i2csdata            ;Get data ready to send
0119   0800               M     movf INDF, w
011A   00FC               M     movwf i2csdata
011B   0384           00768     decf FSR, F                     ;Increment pointer
011C   218E           00769     call PutByte                        ;Send data
011D   39FF           00770     andlw 0xFF                      ;Until end of queue
                      00771     skipZero
011E   1D03               M         btfss STATUS, Z
011F   2922           00772         goto WaitComm_SendDataExit
0120   0BF7           00773     decfsz cntrb, f
0121   2919           00774         goto WaitComm_SendDataD
0122                  00775 WaitComm_SendDataExit
0122   1384           00776         bcf FSR, 7                                              ;Bank 0
0123   1383           00777         bcf STATUS, IRP
                      00778     CHANNELCONFSEND
                          M         MOVFF dataConfig, i2csdata              ;Channel configuration
0124   087D               M     movf dataConfig, w
0125   00FC               M     movwf i2csdata
0126   218E               M     call PutByte
0127   01FC               M         clrf i2csdata
0128   218E               M     call PutByte                                        ;Channel 1 offset
0129   218E               M     call PutByte                                        ;Channel 2 offset
                          M         MOVFF triggerLevel, i2csdata
012A   087E               M     movf triggerLevel, w
012B   00FC               M     movwf i2csdata
012C   218E               M     call PutByte                                        ;Triggerlevel
                          M         MOVFF triggerChannel, i2csdata
012D   087F               M     movf triggerChannel, w
012E   00FC               M     movwf i2csdata
012F   218E               M         call PutByte                                    ;Trigger source channel
0130   28E6           00779     goto WaitComm
0131                  00780 WaitComm_Conf
                      00781     skipEqLF B'11111001', i2csdata
0131   087C               M         movf i2csdata, w
0132   3AF9               M         xorlw B'11111001'
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0133   1D03               M         btfss STATUS, Z
0134   2951           00782         goto WaitComm_Rec
                      00783     MOVLF B'11011101', i2csdata     ;Send beginning of message
0135   30DD               M     movlw B'11011101'
0136   00FC               M     movwf i2csdata
0137   218E           00784     call PutByte        
                      00785     CONFSEND
                          M     ;Send number of datapoints (2 bytes)
                          M     MOVLF high TOTALBUFFERSIZE, i2csdata
0138   3001               M     movlw high TOTALBUFFERSIZE
0139   00FC               M     movwf i2csdata
013A   218E               M     call PutByte
                          M     MOVLF low TOTALBUFFERSIZE, i2csdata
013B   3000               M     movlw low TOTALBUFFERSIZE
013C   00FC               M     movwf i2csdata
013D   218E               M     call PutByte
                          M     ;Send clock frequency configuration
                          M     MOVFF configLoc1, i2csdata
013E   0870               M     movf configLoc1, w
013F   00FC               M     movwf i2csdata
0140   218E               M     call PutByte
                          M     MOVFF triggerDelay1, i2csdata
0141   0871               M     movf triggerDelay1, w
0142   00FC               M     movwf i2csdata
0143   218E               M     call PutByte
                          M     MOVFF triggerDelay2, i2csdata
0144   0872               M     movf triggerDelay2, w
0145   00FC               M     movwf i2csdata
0146   218E               M     call PutByte
                          M     MOVFF triggerDelay3, i2csdata
0147   0873               M     movf triggerDelay3, w
0148   00FC               M     movwf i2csdata
0149   218E               M     call PutByte
                          M     MOVFF sampleRate1, i2csdata
014A   0874               M     movf sampleRate1, w
014B   00FC               M     movwf i2csdata
014C   218E               M     call PutByte
                          M     MOVFF sampleRate2, i2csdata
014D   0875               M     movf sampleRate2, w
014E   00FC               M     movwf i2csdata
014F   218E               M     call PutByte
0150   28E6           00786     goto WaitComm
0151                  00787 WaitComm_Rec
                      00788     skipEqLF B'11111010', i2csdata
0151   087C               M         movf i2csdata, w
0152   3AFA               M         xorlw B'11111010'
0153   1D03               M         btfss STATUS, Z
0154   296D           00789         goto WaitComm_BreakTrigger   
                      00790     MOVLF B'11011110', i2csdata     ;Send beginning of message
0155   30DE               M     movlw B'11011110'
0156   00FC               M     movwf i2csdata
0157   218E           00791     call PutByte
                      00792     CONFRECIEVE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0158   2179               M     call GetByte                        ;Recieve ConfigLoc1
0159   087C               M     movf i2csdata, w
015A   39DF               M     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                          M     if clockFreq == 20              ;if necessary
015B   3820               M         iorlw 1 << CLOCKFREQBIT
                          M     endif
015C   00F0               M     movwf configLoc1
015D   2179               M     call GetByte                        ;Recieve trigger delay
                          M     MOVFF i2csdata, triggerDelay1
015E   087C               M     movf i2csdata, w
015F   00F1               M     movwf triggerDelay1
0160   2179               M     call GetByte
                          M     MOVFF i2csdata, triggerDelay2
0161   087C               M     movf i2csdata, w
0162   00F2               M     movwf triggerDelay2
0163   2179               M     call GetByte                
                          M     MOVFF i2csdata, triggerDelay3
0164   087C               M     movf i2csdata, w
0165   00F3               M     movwf triggerDelay3
0166   2179               M     call GetByte                                        ;Recieve sample rate
                          M     MOVFF i2csdata, sampleRate1
0167   087C               M     movf i2csdata, w
0168   00F4               M     movwf sampleRate1
0169   2179               M     call GetByte
                          M     MOVFF i2csdata, sampleRate2
016A   087C               M     movf i2csdata, w
016B   00F5               M     movwf sampleRate2
016C   0008           00793         return
016D                  00794 WaitComm_BreakTrigger
                      00795     skipEqLF B'11110011', i2csdata              ;message is recieved
016D   087C               M         movf i2csdata, w
016E   3AF3               M         xorlw B'11110011'
016F   1D03               M         btfss STATUS, Z
0170   28E6           00796         goto WaitComm                                   ;No Valid Message Sent
                      00797     MOVLF B'11011100', i2csdata         ;Respond
0171   30DC               M     movlw B'11011100'
0172   00FC               M     movwf i2csdata
0173   218E           00798     call PutByte
0174   138B           00799         bcf INTCON, GIE                                         ;Disable RB0 Interrupt
0175   28E6           00800         goto WaitComm
                      00801 
                      00802 ;WaitByte is used to wait for a byte either on serial port or on the i2c port
                      00803 ;------------------------------------------------------------------------------
0176                  00804 WaitByte
0176   1D05           00805         btfss SPPORT, SP
0177   282D           00806             goto I2CSWaitStart          
0178   297B           00807         goto GetByteSerial
                      00808 
                      00809 ;GetByte is used to recieve a byte on either a serial port or on the i2c port
                      00810 ;------------------------------------------------------------------------------
0179                  00811 GetByte
0179   1D05           00812         btfss SPPORT, SP
017A   283A           00813             goto I2CSGetByte            
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

017B                  00814 GetByteSerial
017B   1618           00815         bsf RCSTA, CREN
017C   1E8C           00816         btfss PIR1, RCIF                        
017D   297B           00817                 goto GetByteSerial
017E                  00818 GetByteSerialB
017E   1D18           00819         btfss RCSTA, FERR                       ;Handle the frame error
017F   2982           00820                 goto GetByteSerialC
0180   081A           00821         movf RCREG, w                           ;Throw away data with errors
0181   297B           00822         goto GetByteSerial
0182                  00823 GetByteSerialC
0182   1C98           00824         btfss RCSTA, OERR                       ;Handle the over run error
0183   298A           00825                 goto GetByteSerialE
0184   1218           00826         bcf RCSTA, CREN                         ;Reset the recieve logic
0185   1618           00827         bsf RCSTA, CREN
0186                  00828 GetByteSerialD
0186   081A           00829         movf RCREG, w                           ;Throw away data with errors
0187   1A8C           00830         btfsc PIR1, RCIF
0188   2986           00831             goto GetByteSerialD
0189   297B           00832         goto GetByteSerial
018A                  00833 GetByteSerialE                                  ;No errors if we got here       
                      00834         MOVFF RCREG, i2csdata           ;Read byte from serial FIFO
018A   081A               M     movf RCREG, w
018B   00FC               M     movwf i2csdata
018C   1218           00835         bcf RCSTA, CREN
018D   3400           00836         retlw 0
                      00837         
                      00838 ;PutByte is used to put a byte either on the serial port or on the i2c port
                      00839 ;------------------------------------------------------------------------------
018E                  00840 PutByte
018E   1D05           00841         btfss SPPORT, SP
018F   2853           00842                 goto I2CSPutByte
0190                  00843 PutByteSerial
0190   1E0C           00844         btfss PIR1, TXIF
0191   2990           00845                 goto PutByteSerial
                      00846         MOVFF i2csdata, TXREG
0192   087C               M     movf i2csdata, w
0193   0099               M     movwf TXREG
0194   3400           00847         retlw 0
                      00848 
                      00849 ;Delay used to adjust sample rate and trigger delay
                      00850 ;Any delay due to using a call must be added (i.e. delay doesn't include call
                      00851 ;statement)
                      00852 ;Delay = 5+7*(cntrb:cntra)+3*cntrb if cntra > 0, cntrb >= 0
                      00853 ;If cntra = 0 then delay as if cntra = 256
                      00854 ;If cntrb:cntra = 0x0000 then Delay as if cntrb = 255, cntra = 256
                      00855 ;-----------------------------------------------------------------------------
0195                  00856 Delay
0195   3001           00857     movlw 0x01
0196                  00858 DelayLoop
0196   02F6           00859     subwf cntra, F
0197   1C03           00860     btfss STATUS, C
0198   02F7           00861         subwf cntrb, F
0199   08F6           00862     movf cntra, F
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00863     skipZero
019A   1D03               M         btfss STATUS, Z
019B   2996           00864         goto DelayLoop
019C   08F7           00865     movf cntrb, F
                      00866     skipZero
019D   1D03               M         btfss STATUS, Z
019E   2996           00867         goto DelayLoop
019F   0008           00868         return
                      00869 
                      00870 ;ADCShutdown, shutsdown the MAX114/MAX118
                      00871 ;-----------------------------------------------------------------------------
01A0                  00872 ADCShutdown
01A0   0080           00873     movwf INDF                      ;Save to QUEUE
01A1   1486           00874     bsf ADC_PORT, CS                    ;Unselect MAX114
01A2   1383           00875     bcf STATUS, IRP                                     ;Set bank = 0
                      00876         CHANNELCONFSTORE
                          M     ;Format of channel configuration is: Channel 1 Scale (2) bits
                          M     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                          M     ;                                    Channel 2 Scale (2) bits
                          M     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Channel 1 Attenuation (No Attenuation = 1, attenuation by 10 = 
                            0) (1) bit
                          M         ;                                                                        Channel 2 Attenuation (
                            No attenuation = 1, attenuation by 10 = 0) (1) bit
01A3   01FD               M     clrf dataConfig
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
01A4   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01A5   1087               M         bcf TRISC, CH1SEL                               ;Ch1Sel output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01A6   1507               M         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01A7   1205               M         bcf TRISA, CH1SELG                              ;Ch1Sel output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01A8   1685               M         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
                          M         BNKSEL ANALOG_SEL       
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
01A9   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
01AA   1087               M         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
01AB   1205               M         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                          M         if HARDWARE == 0x10
                          M                 bsf dataConfig, 7
                          M                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                         bcf dataConfig, 7
                          M                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                         bcf dataConfig, 7
                          M                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                         bsf dataConfig, 6
                          M         else
01AC   177D               M                 bsf dataConfig, 6                               ;Assume Gain = 2
01AD   1C05               M                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
01AE   137D               M                         bcf dataConfig, 6
01AF   1C85               M                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
01B0   137D               M                         bcf dataConfig, 6
01B1   1C85               M                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
01B2   17FD               M                         bsf dataConfig, 7
                          M         endif
01B3   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
01B4   15FD               M                 bsf dataConfig, 3
01B5   1487               M         bsf ANALOG_SEL, CH1SEL
01B6   1605               M         bsf ANALOG_GAIN, CH1SELG
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
01B7   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B8   1487               M         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01B9   1107               M         bcf TRISC, CH2SEL                               ;Ch2Sel output
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BA   1605               M         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01BB   1285               M         bcf TRISA, CH2SELG                              ;Ch2Sel output
                          M         BNKSEL ANALOG_SEL
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
01BC   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
01BD   1107               M         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
01BE   1285               M         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                          M         if HARDWARE == 0x10
                          M                 bsf dataConfig, 5
                          M                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                         bcf dataConfig, 5
                          M                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                         bcf dataConfig, 5
                          M                 btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                         bsf dataConfig, 4
                          M         else
01BF   167D               M                 bsf dataConfig, 4                               ;Assume Gain = 2
01C0   1C05               M                 btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
01C1   127D               M                         bcf dataConfig, 4
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01C2   1C85               M                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
01C3   127D               M                         bcf dataConfig, 4
01C4   1C85               M                 btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
01C5   16FD               M                         bsf dataConfig, 5
                          M         endif
01C6   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
01C7   157D               M                 bsf dataConfig, 2
01C8   1507               M     bsf ANALOG_SEL, CH2SEL
01C9   1685               M         bsf ANALOG_GAIN, CH2SELG
                          M 
01CA   1F06               M         btfss ATTNPORT, CH1ATTN                         ;If Channel 1 is Attenuated by 10 then mark
01CB   14FD               M                 bsf dataConfig, 1
01CC   1F86               M         btfss ATTNPORT, CH2ATTN                         ;If Channel 2 is Attenuated by 10 then mark
01CD   147D               M                 bsf dataConfig, 0
                          M 
                          M         ;Next byte is Trigger Level
01CE   1089               M         bcf ADC_CONTROLPORT, ADDR0                      ;Select address for trigger level
01CF   1506               M         bsf ADC_PORT, ADDR1
01D0   1186               M         bcf ADC_PORT, ADDR2
01D1   1086               M         bcf ADC_PORT, CS                                        ;Select maxim ADC
01D2   1009               M         bcf ADC_CONTROLPORT, RDD                        ;Begin conversion
                          M 
                          M         ;Next byte/bit is Trigger Source Channel.  Get Trigger Source while waiting for conversion
01D3   01FF               M         clrf triggerChannel
01D4   1D85               M         btfss TRGSRCPORT, TRGCH                         ;If Trigger Source is Channel 2 then mark
01D5   147F               M                 bsf     triggerChannel, 0
                          M 
01D6   0808               M         movf ADC_DATAPORT, w                            ;Save trigger level
01D7   1409               M         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
01D8   1486               M         bsf ADC_PORT, CS                                        ;unselect
01D9   1089               M         bcf ADC_CONTROLPORT, ADDR0                      ;Unselect address for trigger level
01DA   1106               M         bcf ADC_PORT, ADDR1
01DB   1186               M         bcf ADC_PORT, ADDR2
01DC   00FE               M         movwf triggerLevel
01DD   2894           00877     goto Main
                      00878 
                      00879 ;Interrupt based sampling mode.  Original idea from Paul Messer
                      00880 ;Interrupt based sampling mode start
                      00881 ;-----------------------------------------------------------------------------
01DE                  00882 SampleIntStart
01DE   1009           00883         bcf ADC_CONTROLPORT, RDD                ;Begin conversion
01DF   1010           00884         bcf T1CON, TMR1ON                               ;Timer1 off
01E0   0974           00885         comf sampleRate1, w                             ;Set timer value
01E1   008F           00886         movwf TMR1H
01E2   0975           00887         comf sampleRate2, w
01E3   008E           00888         movwf TMR1L
01E4   1410           00889         bsf T1CON, TMR1ON                               ;Timer1 on
01E5   170B           00890         bsf INTCON, PEIE                                ;Set up Timer1 interrupt
01E6   100C           00891         bcf PIR1, TMR1IF
                      00892         BNKSEL PIE1
                          M         if PIE1 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if PIE1 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
01E7   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set PIE1 & 0x180
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
01E8   140C           00893         bsf PIE1, TMR1IE
                      00894         BNKSEL 0x0000
                          M         if 0x0000 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if 0x0000 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
01E9   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set 0x0000 & 0x180
01EA   178B           00895         bsf INTCON, GIE
                      00896         MOVLF BUFFERMIN, FSR                    ;Initialize pointer
01EB   3020               M     movlw BUFFERMIN
01EC   0084               M     movwf FSR
                      00897         MOVLF BUFFERSIZE-1, cntra
01ED   303F               M     movlw BUFFERSIZE-1
01EE   00F6               M     movwf cntra
01EF   0808           00898         movf ADC_DATAPORT, w                    ;Sample
01F0   0080           00899         movwf INDF
01F1   0A84           00900         incf FSR, F
                      00901         MOVLF D'66', functptrlow
01F2   3042               M     movlw D'66'
01F3   00FA               M     movwf functptrlow
01F4                  00902 SampleIntReturn
                      00903         ;restore previous state 
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01F4   0E7D           00904     swapf       statusTemp, w                   ;retrieve copy of STATUS register and "unswap" it
01F5   0083           00905     movwf   STATUS                                      ;restore pre-isr STATUS register contents
01F6   0EFE           00906     swapf   wregTemp, f                         ;the ol' swap'er-roo to
01F7   0E7E           00907     swapf   wregTemp, w                         ;restore pre-isr W register contents without clobbering 
                            STATUS register
01F8   0009           00908     retfie                                                      ;return from interrupt and activate GIE
                      00909         
01F9                  00910 SampleIntBank0
01F9   1009           00911         bcf ADC_CONTROLPORT, RDD                ;Begin Conversion
                      00912         
01FA   0808           00913         movf ADC_DATAPORT, w                    ;Sample
01FB   1409           00914         bsf ADC_CONTROLPORT, RDD                ;Stop conversion
01FC   0080           00915         movwf INDF
01FD   0A84           00916         incf FSR, F
                      00917         
                      00918         
                      00919 ;Sample Delayed
                      00920 ;Sampling rate = 5e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      00921 ;Sampling rate = 1e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      00922 ;-----------------------------------------------------------------------------
01FE                  00923 SampleDelayed
01FE   1009           00924     bcf ADC_CONTROLPORT, RDD                    ;Begin Conversion
                      00925     MOVLF BUFFERSIZE-1, cntrc       ;Initialize counter, use cntrc as counter
01FF   303F               M     movlw BUFFERSIZE-1
0200   00F8               M     movwf cntrc
                      00926     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0201   3020               M     movlw BUFFERMIN
0202   0084               M     movwf FSR
                      00927     MOVFF sampleRate2, cntra        ;Restore cntra
0203   0875               M     movf sampleRate2, w
0204   00F6               M     movwf cntra
                      00928     MOVFF sampleRate1, cntrb        ;Restore cntrb
0205   0874               M     movf sampleRate1, w
0206   00F7               M     movwf cntrb
0207   0000           00929         nop
0208   2195           00930     call Delay
0209                  00931 SampleDelayedLoopA
0209   0808           00932     movf ADC_DATAPORT, W            ;Sample
020A   1409           00933     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
020B   1009           00934     bcf ADC_CONTROLPORT, RDD                ;Begin next conversion
020C   0080           00935     movwf INDF                      ;Save to QUEUE
020D   0A84           00936     incf FSR, F                     ;Increment QUEUE pointer
020E                  00937 StSampleDelayedLoopA
                      00938     MOVFF sampleRate2, cntra        ;Restore cntra
020E   0875               M     movf sampleRate2, w
020F   00F6               M     movwf cntra
                      00939     MOVFF sampleRate1, cntrb        ;Restore cntrb
0210   0874               M     movf sampleRate1, w
0211   00F7               M     movwf cntrb
0212   2195           00940     call Delay
0213   0BF8           00941     decfsz cntrc, F             ;Increment counter, 64 samples?
0214   2A09           00942         goto SampleDelayedLoopA
0215   0000           00943         nop
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0216   0808           00944         movf ADC_DATAPORT, W                    ;Last sample in Bank 1
0217   1409           00945     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
0218   1009           00946     bcf ADC_CONTROLPORT, RDD                    ;Begin next conversion
0219   0080           00947     movwf INDF                      ;Save to QUEUE
021A   1784           00948         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00949         MOVLF BUFFERSIZE-1, cntrc
021B   303F               M     movlw BUFFERSIZE-1
021C   00F8               M     movwf cntrc
                      00950     MOVFF sampleRate2, cntra         ;Restore cntra
021D   0875               M     movf sampleRate2, w
021E   00F6               M     movwf cntra
                      00951     MOVFF sampleRate1, cntrb        ;Restore cntrb
021F   0874               M     movf sampleRate1, w
0220   00F7               M     movwf cntrb
0221   2195           00952         call Delay
0222   0000           00953         nop
0223                  00954 SampleDelayedLoopB
0223   0808           00955     movf ADC_DATAPORT, W            ;Sample
0224   1409           00956     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0225   1009           00957     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0226   0080           00958     movwf INDF                      ;Save to QUEUE
0227   0384           00959     decf FSR, F                     ;Increment QUEUE pointer
                      00960     MOVFF sampleRate2, cntra         ;Restore cntra
0228   0875               M     movf sampleRate2, w
0229   00F6               M     movwf cntra
                      00961     MOVFF sampleRate1, cntrb        ;Restore cntrb
022A   0874               M     movf sampleRate1, w
022B   00F7               M     movwf cntrb
022C   2195           00962     call Delay
022D   0BF8           00963     decfsz cntrc, F                         ;Increment counter, 64 samples?
022E   2A23           00964         goto SampleDelayedLoopB
022F   0000           00965         nop
0230   0808           00966         movf ADC_DATAPORT, W                    ;Last sample in Bank 2
0231   1409           00967     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0232   1009           00968     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0233   0080           00969     movwf INDF                      ;Save to QUEUE
0234   1783           00970         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
                      00971         MOVLF BUFFERSIZE-1, cntrc
0235   303F               M     movlw BUFFERSIZE-1
0236   00F8               M     movwf cntrc
                      00972     MOVFF sampleRate2, cntra         ;Restore cntra
0237   0875               M     movf sampleRate2, w
0238   00F6               M     movwf cntra
                      00973     MOVFF sampleRate1, cntrb        ;Restore cntrb
0239   0874               M     movf sampleRate1, w
023A   00F7               M     movwf cntrb
023B   2195           00974         call Delay
023C   0000           00975         nop
023D                  00976 SampleDelayedLoopC
023D   0808           00977     movf ADC_DATAPORT, W            ;Sample
023E   1409           00978     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
023F   1009           00979     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0240   0080           00980     movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0241   0A84           00981     incf FSR, F                     ;Increment QUEUE pointer
                      00982     MOVFF sampleRate2, cntra         ;Restore cntra
0242   0875               M     movf sampleRate2, w
0243   00F6               M     movwf cntra
                      00983     MOVFF sampleRate1, cntrb        ;Restore cntrb
0244   0874               M     movf sampleRate1, w
0245   00F7               M     movwf cntrb
0246   2195           00984     call Delay
0247   0BF8           00985     decfsz cntrc, F                         ;Increment counter, 64 samples?
0248   2A3D           00986         goto SampleDelayedLoopC
0249   0000           00987         nop
024A   0808           00988         movf ADC_DATAPORT, W                    ;Last sample in Bank 4
024B   1409           00989     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
024C   1009           00990     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
024D   0080           00991     movwf INDF                      ;Save to QUEUE
024E   1384           00992         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00993         MOVLF BUFFERSIZE-1, cntrc
024F   303F               M     movlw BUFFERSIZE-1
0250   00F8               M     movwf cntrc
                      00994     MOVFF sampleRate2, cntra         ;Restore cntra
0251   0875               M     movf sampleRate2, w
0252   00F6               M     movwf cntra
                      00995     MOVFF sampleRate1, cntrb        ;Restore cntrb
0253   0874               M     movf sampleRate1, w
0254   00F7               M     movwf cntrb
0255   2195           00996         call Delay
0256   0000           00997         nop
0257                  00998 SampleDelayedLoopD
0257   0808           00999     movf ADC_DATAPORT, W            ;Sample
0258   1409           01000     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0259   1009           01001     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
025A   0080           01002     movwf INDF                      ;Save to QUEUE
025B   0384           01003     decf FSR, F                     ;Increment QUEUE pointer
                      01004     MOVFF sampleRate2, cntra         ;Restore cntra
025C   0875               M     movf sampleRate2, w
025D   00F6               M     movwf cntra
                      01005     MOVFF sampleRate1, cntrb        ;Restore cntrb
025E   0874               M     movf sampleRate1, w
025F   00F7               M     movwf cntrb
0260   2195           01006     call Delay
0261   0BF8           01007     decfsz cntrc, F                         ;Increment counter, 64 samples?
0262   2A57           01008         goto SampleDelayedLoopD
0263   0000           01009     nop
0264   0808           01010     movf ADC_DATAPORT, W            ;Last sample
0265   1409           01011     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0266   29A0           01012     goto ADCShutdown
                      01013 
                      01014 ;SampleXYDelayed
                      01015 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      01016 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      01017 ;SampleXYDelayed does not sample X and Y at the same time.  Y is sampled 6 clock cycles
                      01018 ;behind X.  For a 20 MHz clock this is 1.2 uS, for a 4 MHz clock this is 6 uS.
                      01019 ;-----------------------------------------------------------------------------
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0267                  01020 SampleXYDelayed
0267   1009           01021     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0268   1489           01022     bsf ADC_CONTROLPORT, ADDR0              ;Set channel to Y
                      01023     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0269   3020               M     movlw BUFFERMIN
026A   0084               M     movwf FSR
026B   0808           01024     movf ADC_DATAPORT, W            ;Sample X
026C   1409           01025         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
026D   1009           01026         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
026E   1089           01027     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
026F   0080           01028     movwf INDF                      ;Save to QUEUE
0270   0A84           01029     incf FSR, F                     ;Increment QUEUE pointer
                      01030     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
0271   301F               M     movlw BUFFERSIZE/2-1
0272   00F8               M     movwf cntrc
                      01031     MOVFF sampleRate2, cntra         ;Restore cntra
0273   0875               M     movf sampleRate2, w
0274   00F6               M     movwf cntra
                      01032     MOVFF sampleRate1, cntrb        ;Restore cntrb
0275   0874               M     movf sampleRate1, w
0276   00F7               M     movwf cntrb
0277   2195           01033         call Delay
0278   0000           01034         nop
0279                  01035 SampleXYDelayedLA
0279   0808           01036     movf ADC_DATAPORT, W            ;Sample Y
027A   1409           01037     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
027B   1009           01038         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
027C   1489           01039         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
027D   0080           01040     movwf INDF                      ;Save to QUEUE
027E   0A84           01041     incf FSR, F                     ;Increment QUEUE pointer
027F   0808           01042     movf ADC_DATAPORT, W            ;Sample X
0280   1409           01043         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0281   1009           01044         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0282   1089           01045         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0283   0080           01046     movwf INDF                      ;Save to QUEUE
0284   0A84           01047     incf FSR, F                     ;Increment QUEUE pointer
                      01048     MOVFF sampleRate2, cntra         ;Restore cntra
0285   0875               M     movf sampleRate2, w
0286   00F6               M     movwf cntra
                      01049     MOVFF sampleRate1, cntrb        ;Restore cntrb
0287   0874               M     movf sampleRate1, w
0288   00F7               M     movwf cntrb
0289   2195           01050     call Delay
028A   0BF8           01051     decfsz cntrc, F                     ;Increment counter, 64 samples?
028B   2A79           01052         goto SampleXYDelayedLA
028C   0000           01053     nop
028D   0808           01054     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
028E   1409           01055     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
028F   1009           01056         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0290   1489           01057         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0291   0080           01058     movwf INDF                      ;Save to QUEUE
0292   1784           01059         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0293   0808           01060     movf ADC_DATAPORT, W            ;Sample X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0294   1409           01061         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0295   1009           01062         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0296   1089           01063         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0297   0080           01064     movwf INDF                      ;Save to QUEUE
0298   0384           01065         decf FSR, f                                             ;Increment QUEUE pointer
                      01066     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
0299   301F               M     movlw BUFFERSIZE/2-1
029A   00F8               M     movwf cntrc
                      01067     MOVFF sampleRate2, cntra         ;Restore cntra
029B   0875               M     movf sampleRate2, w
029C   00F6               M     movwf cntra
                      01068     MOVFF sampleRate1, cntrb        ;Restore cntrb
029D   0874               M     movf sampleRate1, w
029E   00F7               M     movwf cntrb
029F   2195           01069     call Delay
02A0   0000           01070         nop
02A1                  01071 SampleXYDelayedLB
02A1   0808           01072     movf ADC_DATAPORT, W            ;Sample Y
02A2   1409           01073     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02A3   1009           01074         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02A4   1489           01075         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02A5   0080           01076     movwf INDF                      ;Save to QUEUE
02A6   0384           01077     decf FSR, F                     ;Increment QUEUE pointer
02A7   0808           01078     movf ADC_DATAPORT, W            ;Sample X
02A8   1409           01079         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02A9   1009           01080         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02AA   1089           01081         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02AB   0080           01082     movwf INDF                      ;Save to QUEUE
02AC   0384           01083     decf FSR, F                     ;Increment QUEUE pointer
                      01084     MOVFF sampleRate2, cntra         ;Restore cntra
02AD   0875               M     movf sampleRate2, w
02AE   00F6               M     movwf cntra
                      01085     MOVFF sampleRate1, cntrb        ;Restore cntrb
02AF   0874               M     movf sampleRate1, w
02B0   00F7               M     movwf cntrb
02B1   2195           01086     call Delay
02B2   0BF8           01087     decfsz cntrc, F                     ;Increment counter, 64 samples?
02B3   2AA1           01088         goto SampleXYDelayedLB
02B4   0000           01089     nop
02B5   0808           01090     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
02B6   1409           01091     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02B7   1009           01092         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02B8   1489           01093         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02B9   0080           01094     movwf INDF                      ;Save to QUEUE
02BA   1783           01095         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
02BB   0808           01096     movf ADC_DATAPORT, W            ;Sample X
02BC   1409           01097         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02BD   1009           01098         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02BE   1089           01099         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02BF   0080           01100     movwf INDF                      ;Save to QUEUE
02C0   0A84           01101         incf FSR, f                                             ;Increment QUEUE pointer
                      01102     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
02C1   301F               M     movlw BUFFERSIZE/2-1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02C2   00F8               M     movwf cntrc
                      01103     MOVFF sampleRate2, cntra         ;Restore cntra
02C3   0875               M     movf sampleRate2, w
02C4   00F6               M     movwf cntra
                      01104     MOVFF sampleRate1, cntrb        ;Restore cntrb
02C5   0874               M     movf sampleRate1, w
02C6   00F7               M     movwf cntrb
02C7   2195           01105     call Delay
02C8   0000           01106         nop
02C9                  01107 SampleXYDelayedLC
02C9   0808           01108     movf ADC_DATAPORT, W            ;Sample Y
02CA   1409           01109     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02CB   1009           01110         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02CC   1489           01111         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02CD   0080           01112     movwf INDF                      ;Save to QUEUE
02CE   0A84           01113     incf FSR, F                     ;Increment QUEUE pointer
02CF   0808           01114     movf ADC_DATAPORT, W            ;Sample X
02D0   1409           01115         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02D1   1009           01116         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02D2   1089           01117         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02D3   0080           01118     movwf INDF                      ;Save to QUEUE
02D4   0A84           01119     incf FSR, F                     ;Increment QUEUE pointer
                      01120     MOVFF sampleRate2, cntra         ;Restore cntra
02D5   0875               M     movf sampleRate2, w
02D6   00F6               M     movwf cntra
                      01121     MOVFF sampleRate1, cntrb        ;Restore cntrb
02D7   0874               M     movf sampleRate1, w
02D8   00F7               M     movwf cntrb
02D9   2195           01122     call Delay
02DA   0BF8           01123     decfsz cntrc, F                     ;Increment counter, 64 samples?
02DB   2AC9           01124         goto SampleXYDelayedLC
02DC   0000           01125     nop
02DD   0808           01126     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
02DE   1409           01127     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02DF   1009           01128         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02E0   1489           01129         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02E1   0080           01130     movwf INDF                      ;Save to QUEUE
02E2   1384           01131         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
02E3   0808           01132     movf ADC_DATAPORT, W            ;Sample X
02E4   1409           01133         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02E5   1009           01134         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02E6   1089           01135         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02E7   0080           01136     movwf INDF                      ;Save to QUEUE
02E8   0384           01137         decf FSR, f                                             ;Increment QUEUE pointer
                      01138     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
02E9   301F               M     movlw BUFFERSIZE/2-1
02EA   00F8               M     movwf cntrc
                      01139     MOVFF sampleRate2, cntra         ;Restore cntra
02EB   0875               M     movf sampleRate2, w
02EC   00F6               M     movwf cntra
                      01140     MOVFF sampleRate1, cntrb        ;Restore cntrb
02ED   0874               M     movf sampleRate1, w
02EE   00F7               M     movwf cntrb
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02EF   2195           01141     call Delay
02F0   0000           01142         nop
02F1                  01143 SampleXYDelayedLD
02F1   0808           01144     movf ADC_DATAPORT, W            ;Sample Y
02F2   1409           01145     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02F3   1009           01146         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02F4   1489           01147         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02F5   0080           01148     movwf INDF                      ;Save to QUEUE
02F6   0384           01149     decf FSR, F                     ;Increment QUEUE pointer
02F7   0808           01150     movf ADC_DATAPORT, W            ;Sample X
02F8   1409           01151     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02F9   1009           01152         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02FA   1089           01153         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02FB   0080           01154     movwf INDF                      ;Save to QUEUE
02FC   0384           01155     decf FSR, F                     ;Increment QUEUE pointer
                      01156     MOVFF sampleRate2, cntra         ;Restore cntra
02FD   0875               M     movf sampleRate2, w
02FE   00F6               M     movwf cntra
                      01157     MOVFF sampleRate1, cntrb        ;Restore cntrb
02FF   0874               M     movf sampleRate1, w
0300   00F7               M     movwf cntrb
0301   2195           01158     call Delay
0302   0BF8           01159     decfsz cntrc, F                     ;Increment counter, 64 samples?
0303   2AF1           01160         goto SampleXYDelayedLD
0304   0000           01161     nop
0305   0808           01162     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
0306   1409           01163     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0307   29A0           01164     goto ADCShutdown
                      01165 
                      01166 ;Fast sample
                      01167 ;Sampling rate = 625 kHz with 20 MHz clock
                      01168 ;Sampling rate = 125 kHz with 4 MHz clock
                      01169 ;-----------------------------------------------------------------------------
0308                  01170 Sample625k
0308   1009           01171     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01172     MOVLF BUFFERSIZE-1, cntra               ;Initialize counter
0309   303F               M     movlw BUFFERSIZE-1
030A   00F6               M     movwf cntra
                      01173     MOVLF BUFFERMIN, FSR                ;Initialize pointer
030B   3020               M     movlw BUFFERMIN
030C   0084               M     movwf FSR
030D   0000           01174         nop
030E                  01175 Sample625kLoopA
030E   0808           01176     movf ADC_DATAPORT, W                ;Sample
030F   1409           01177     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0310   1009           01178     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
0311   0080           01179     movwf INDF                          ;Save to QUEUE
0312   0A84           01180     incf FSR, F                         ;Increment QUEUE pointer
0313   0BF6           01181     decfsz cntra, F                      ;Increment counter, 64 samples?
0314   2B0E           01182         goto Sample625kLoopA
0315   0000           01183     nop
0316   0808           01184         movf ADC_DATAPORT, w                            ;Last sample in Bank 1
0317   1409           01185         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0318   1009           01186         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
0319   0080           01187         movwf INDF                                                      ;Save to QUEUE
031A   1784           01188         bsf FSR, 7                                                      ;Move QUEUE pointer to Bank 2
                      01189         MOVLF BUFFERSIZE-1, cntra
031B   303F               M     movlw BUFFERSIZE-1
031C   00F6               M     movwf cntra
031D   0000           01190         nop
031E                  01191 Sample625kLoopB
031E   0808           01192     movf ADC_DATAPORT, W                ;Sample
031F   1409           01193     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0320   1009           01194     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
0321   0080           01195     movwf INDF                          ;Save to QUEUE
0322   0384           01196     decf FSR, F                         ;Increment QUEUE pointer
0323   0BF6           01197     decfsz cntra, F                      ;Increment counter, 64 samples?
0324   2B1E           01198         goto Sample625kLoopB
0325   0000           01199         nop
0326   0808           01200         movf ADC_DATAPORT, w                            ;Last sample in Bank 2
0327   1409           01201         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
0328   1009           01202         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
0329   0080           01203         movwf INDF                                                      ;Save to QUEUE
032A   1783           01204         bsf STATUS, IRP                                         ;Move QUEUE pointer to Bank 4
                      01205         MOVLF BUFFERSIZE-1, cntra
032B   303F               M     movlw BUFFERSIZE-1
032C   00F6               M     movwf cntra
032D   0000           01206         nop
032E                  01207 Sample625kLoopC
032E   0808           01208     movf ADC_DATAPORT, W                ;Sample
032F   1409           01209     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0330   1009           01210     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
0331   0080           01211     movwf INDF                          ;Save to QUEUE
0332   0A84           01212     incf FSR, F                         ;Increment QUEUE pointer
0333   0BF6           01213     decfsz cntra, F                      ;Increment counter, 64 samples?
0334   2B2E           01214         goto Sample625kLoopC
0335   0000           01215         nop
0336   0808           01216         movf ADC_DATAPORT, w                            ;Last sample in Bank 4
0337   1409           01217         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
0338   1009           01218         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
0339   0080           01219         movwf INDF                                                      ;Save to QUEUE
033A   1384           01220         bcf FSR, 7                                                      ;Move QUEUE pointer to Bank 3
                      01221         MOVLF BUFFERSIZE-1, cntra
033B   303F               M     movlw BUFFERSIZE-1
033C   00F6               M     movwf cntra
033D   0000           01222         nop
033E                  01223 Sample625kLoopD
033E   0808           01224     movf ADC_DATAPORT, W                ;Sample
033F   1409           01225     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0340   1009           01226     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
0341   0080           01227     movwf INDF                          ;Save to QUEUE
0342   0384           01228     decf FSR, F                         ;Increment QUEUE pointer
0343   0BF6           01229     decfsz cntra, F                      ;Increment counter, 64 samples?
0344   2B3E           01230         goto Sample625kLoopD
0345   0000           01231         nop
0346   0808           01232     movf ADC_DATAPORT, W                ;Last sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0347   1409           01233     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
0348   29A0           01234     goto ADCShutdown
                      01235 
                      01236 ;Fast sample
                      01237 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      01238 ;Sampling rate =  83.333 kHz with 4 MHz clock
                      01239 ;or
                      01240 ;Sampling rate = 250 kHz with 20 MHz clock
                      01241 ;Sampling rate =  50 kHz with 4 MHz clock
                      01242 ;-----------------------------------------------------------------------------
0349                  01243 Sample417k250k
0349   1009           01244     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
                      01245     MOVLF BUFFERSIZE - 1, cntra     ;Initialize counter
034A   303F               M     movlw BUFFERSIZE - 1
034B   00F6               M     movwf cntra
                      01246     MOVLF BUFFERMIN, FSR            ;Initialize pointer
034C   3020               M     movlw BUFFERMIN
034D   0084               M     movwf FSR
034E   2B4F           01247         goto $ + 1                                              ;Delay 3
034F   1D70           01248         btfss configLoc1, 2                             ;Choose to delay by 3 more or by 11 more
0350   2B52           01249                 goto Sample417kLoopA
0351   23A6           01250         call DelaySeven                                 ;Delay 9 cycles
0352                  01251 Sample417kLoopA
0352   0808           01252     movf ADC_DATAPORT, W            ;Sample
0353   1409           01253     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0354   1009           01254     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0355   0080           01255     movwf INDF                      ;Save to QUEUE
0356   0A84           01256     incf FSR, F                     ;Increment QUEUE pointer
0357   1D70           01257     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0358   2B5A           01258         goto Sample417kA            ;Delaying 4 cycles, sample at 417k
0359                  01259 Sample250kA
0359   23A6           01260         call DelaySeven                                 ;Delay 9 cycles
035A                  01261 Sample417kA
035A   0000           01262     nop
035B   0BF6           01263     decfsz cntra, F                  ;Increment counter, 64 samples?
035C   2B52           01264         goto Sample417kLoopA
035D   0000           01265     nop
035E   0808           01266         movf ADC_DATAPORT, W                    ;Last sample bank 1
035F   1409           01267     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0360   1009           01268     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0361   0080           01269     movwf INDF                      ;Save to QUEUE
0362   1784           01270         bsf FSR, 7                                              ;Goto bank 2
                      01271         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0363   303F               M     movlw BUFFERSIZE - 1
0364   00F6               M     movwf cntra
0365   2B66           01272         goto $ + 1
0366   1D70           01273     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0367   2B69           01274         goto Sample417kLoopB        ;Delaying  cycles, sample at 417k
0368   23A6           01275         call DelaySeven                                 ;Delay 9 cycles
0369                  01276 Sample417kLoopB
0369   0808           01277     movf ADC_DATAPORT, W            ;Sample
036A   1409           01278     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
036B   1009           01279     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

036C   0080           01280     movwf INDF                      ;Save to QUEUE
036D   0384           01281     decf FSR, F                     ;Increment QUEUE pointer
036E                  01282 StSample417kLoopB
036E   1D70           01283     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
036F   2B71           01284         goto Sample417kB            ;Delaying 4 cycles, sample at 417k
0370                  01285 Sample250kB
0370   23A6           01286         call DelaySeven                                 ;Delay 9 cycles
0371                  01287 Sample417kB
0371   0000           01288     nop
0372   0BF6           01289     decfsz cntra, F                  ;Increment counter, 64 samples?
0373   2B69           01290         goto Sample417kLoopB
0374   0000           01291     nop
0375   0808           01292         movf ADC_DATAPORT, W                    ;Last sample bank 2
0376   1409           01293     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0377   1009           01294     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0378   0080           01295     movwf INDF                      ;Save to QUEUE
0379   1783           01296         bsf STATUS, IRP                                 ;Goto bank 4
                      01297         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
037A   303F               M     movlw BUFFERSIZE - 1
037B   00F6               M     movwf cntra
037C   2B7D           01298         goto $ + 1
037D   1D70           01299     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
037E   2B80           01300         goto Sample417kLoopC        ;Delaying  cycles, sample at 417k
037F   23A6           01301         call DelaySeven                                 ;Delay 9 cycles
0380                  01302 Sample417kLoopC
0380   0808           01303     movf ADC_DATAPORT, W            ;Sample
0381   1409           01304     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0382   1009           01305     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0383   0080           01306     movwf INDF                      ;Save to QUEUE
0384   0A84           01307     incf FSR, F                     ;Increment QUEUE pointer
0385                  01308 StSample417kLoopC
0385   1D70           01309     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0386   2B88           01310         goto Sample417kC            ;Delaying 4 cycles, sample at 417k
0387                  01311 Sample250kC
0387   23A6           01312         call DelaySeven                                 ;Delay 9 cycles
0388                  01313 Sample417kC
0388   0000           01314     nop
0389   0BF6           01315     decfsz cntra, F                  ;Increment counter, 64 samples?
038A   2B80           01316         goto Sample417kLoopC
038B   0000           01317     nop
038C   0808           01318         movf ADC_DATAPORT, W                    ;Last sample bank 4
038D   1409           01319     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
038E   1009           01320     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
038F   0080           01321     movwf INDF                      ;Save to QUEUE
0390   1384           01322         bcf FSR, 7                                              ;Goto bank 3
                      01323         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0391   303F               M     movlw BUFFERSIZE - 1
0392   00F6               M     movwf cntra
0393   2B94           01324         goto $ + 1
0394   1D70           01325     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0395   2B97           01326         goto Sample417kLoopD        ;Delaying  cycles, sample at 417k
0396   23A6           01327         call DelaySeven                                 ;Delay 9 cycles
0397                  01328 Sample417kLoopD
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0397   0808           01329     movf ADC_DATAPORT, W            ;Sample
0398   1409           01330     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0399   1009           01331     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
039A   0080           01332     movwf INDF                      ;Save to QUEUE
039B   0384           01333     decf FSR, F                     ;Increment QUEUE pointer
039C                  01334 StSample417kLoopD
039C   1D70           01335     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
039D   2B9F           01336         goto Sample417kD            ;Delaying 4 cycles, sample at 417k
039E                  01337 Sample250kD
039E   23A6           01338         call DelaySeven                                 ;Delay 9 cycles
039F                  01339 Sample417kD
039F   0000           01340     nop
03A0   0BF6           01341     decfsz cntra, F                  ;Increment counter, 64 samples?
03A1   2B97           01342         goto Sample417kLoopD
03A2   0000           01343     nop
03A3   0808           01344     movf ADC_DATAPORT, W            ;Last sample
03A4   1409           01345     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03A5   29A0           01346     goto ADCShutdown
                      01347 
                      01348 ;Delay Seven Cycles, helper to Sample417k250k
03A6                  01349 DelaySeven
03A6   2BA7           01350         goto $ + 1                                              ;7
                      01351 ;Delay Five Cycles, helper to SampleXY250k192k
03A7                  01352 DelayFive
03A7   0000           01353         nop                                                             ;5
03A8   2BA9           01354         goto $ + 1                                              
                      01355 ;Delay Five Cycles, helper to SampleXY250k192k
03A9                  01356 DelayTwo
03A9   0008           01357         return                                                  ;2
                      01358 
                      01359 ;Fast sample XY
                      01360 ;Sampling rate = 250 kHz with 20 MHz clock
                      01361 ;-----------------------------------------------------------------------------
03AA                  01362 SampleXY250k192k
03AA   1009           01363     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
03AB   1489           01364     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01365     MOVLF BUFFERMIN, FSR            ;Initialize pointer
03AC   3020               M     movlw BUFFERMIN
03AD   0084               M     movwf FSR
03AE   0808           01366     movf ADC_DATAPORT, W            ;Sample X
03AF   1409           01367         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03B0   1009           01368         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03B1   1089           01369     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03B2   0080           01370     movwf INDF                      ;Save to QUEUE
03B3   0A84           01371     incf FSR, F                     ;Increment QUEUE pointer
                      01372     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
03B4   301F               M     movlw BUFFERSIZE/2-1
03B5   00F8               M     movwf cntrc
03B6   1C70           01373     btfss configLoc1, 0                         ;Delay 250k or 192k
03B7   23A7           01374         call DelayFive                          ;192k
03B8   23A9           01375         call DelayTwo
03B9                  01376 SampleXY250kLA
03B9   0808           01377     movf ADC_DATAPORT, W            ;Sample Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03BA   1409           01378     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03BB   1009           01379         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03BC   1489           01380         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03BD   0080           01381     movwf INDF                      ;Save to QUEUE
03BE   0A84           01382     incf FSR, F                     ;Increment QUEUE pointer
03BF   0808           01383     movf ADC_DATAPORT, W            ;Sample X
03C0   1409           01384         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03C1   1009           01385         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03C2   1089           01386         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03C3   0080           01387     movwf INDF                      ;Save to QUEUE
03C4   0A84           01388     incf FSR, F                     ;Increment QUEUE pointer
03C5   1C70           01389     btfss configLoc1, 0                         ;Delay 250k or 192k
03C6   23A7           01390         call DelayFive                          ;192k
03C7   2BC8           01391     goto $ + 1
03C8   0000           01392     nop
03C9   0BF8           01393     decfsz cntrc, F                     ;Increment counter, 64 samples?
03CA   2BB9           01394         goto SampleXY250kLA
03CB   0000           01395     nop
03CC   0808           01396     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
03CD   1409           01397     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03CE   1009           01398         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03CF   1489           01399         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03D0   0080           01400     movwf INDF                      ;Save to QUEUE
03D1   1784           01401         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
03D2   0808           01402     movf ADC_DATAPORT, W            ;Sample X
03D3   1409           01403         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03D4   1009           01404         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03D5   1089           01405         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03D6   0080           01406     movwf INDF                      ;Save to QUEUE
03D7   0384           01407         decf FSR, f                                             ;Increment QUEUE pointer
                      01408     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03D8   301F               M     movlw BUFFERSIZE/2-1
03D9   00F8               M     movwf cntrc
03DA   1C70           01409     btfss configLoc1, 0                         ;Delay 250k or 192k
03DB   23A7           01410         call DelayFive                          ;192k
03DC   23A9           01411         call DelayTwo
03DD                  01412 SampleXY250kLB
03DD   0808           01413     movf ADC_DATAPORT, W            ;Sample Y
03DE   1409           01414     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03DF   1009           01415         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03E0   1489           01416         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03E1   0080           01417     movwf INDF                      ;Save to QUEUE
03E2   0384           01418     decf FSR, F                     ;Increment QUEUE pointer
03E3   0808           01419     movf ADC_DATAPORT, W            ;Sample X
03E4   1409           01420         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03E5   1009           01421         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03E6   1089           01422         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03E7   0080           01423     movwf INDF                      ;Save to QUEUE
03E8   0384           01424     decf FSR, F                     ;Increment QUEUE pointer
03E9   1C70           01425     btfss configLoc1, 0                         ;Delay 250k or 192k
03EA   23A7           01426         call DelayFive                          ;192k
03EB   2BEC           01427     goto $ + 1
03EC   0000           01428         nop
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03ED   0BF8           01429     decfsz cntrc, F                     ;Increment counter, 64 samples?
03EE   2BDD           01430         goto SampleXY250kLB
03EF   0000           01431     nop
03F0   0808           01432     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
03F1   1409           01433     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03F2   1009           01434         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03F3   1489           01435         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03F4   0080           01436     movwf INDF                      ;Save to QUEUE
03F5   1783           01437         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
03F6   0808           01438     movf ADC_DATAPORT, W            ;Sample X
03F7   1409           01439         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03F8   1009           01440         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03F9   1089           01441         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03FA   0080           01442     movwf INDF                      ;Save to QUEUE
03FB   0A84           01443         incf FSR, f                                             ;Increment QUEUE pointer
                      01444     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03FC   301F               M     movlw BUFFERSIZE/2-1
03FD   00F8               M     movwf cntrc
03FE   1C70           01445     btfss configLoc1, 0                         ;Delay 250k or 192k
03FF   23A7           01446         call DelayFive                          ;192k
0400   23A9           01447         call DelayTwo
0401                  01448 SampleXY250kLC
0401   0808           01449     movf ADC_DATAPORT, W            ;Sample Y
0402   1409           01450     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0403   1009           01451         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0404   1489           01452         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0405   0080           01453     movwf INDF                      ;Save to QUEUE
0406   0A84           01454     incf FSR, F                     ;Increment QUEUE pointer
0407   0808           01455     movf ADC_DATAPORT, W            ;Sample X
0408   1409           01456         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0409   1009           01457         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
040A   1089           01458         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
040B   0080           01459     movwf INDF                      ;Save to QUEUE
040C   0A84           01460     incf FSR, F                     ;Increment QUEUE pointer
040D   1C70           01461     btfss configLoc1, 0                         ;Delay 250k or 192k
040E   23A7           01462         call DelayFive                          ;192k
040F   2C10           01463     goto $ + 1
0410   0000           01464     nop
0411   0BF8           01465     decfsz cntrc, F                     ;Increment counter, 64 samples?
0412   2C01           01466         goto SampleXY250kLC
0413   0000           01467     nop
0414   0808           01468     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
0415   1409           01469     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0416   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0417   1489           01471         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0418   0080           01472     movwf INDF                      ;Save to QUEUE
0419   1384           01473         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
041A   0808           01474     movf ADC_DATAPORT, W            ;Sample X
041B   1409           01475         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
041C   1009           01476         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
041D   1089           01477         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
041E   0080           01478     movwf INDF                      ;Save to QUEUE
041F   0384           01479         decf FSR, f                                             ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01480     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
0420   301F               M     movlw BUFFERSIZE/2-1
0421   00F8               M     movwf cntrc
0422   1C70           01481     btfss configLoc1, 0                         ;Delay 250k or 192k
0423   23A7           01482         call DelayFive                          ;192k
0424   23A9           01483         call DelayTwo
0425                  01484 SampleXY250kLD
0425   0808           01485     movf ADC_DATAPORT, W            ;Sample Y
0426   1409           01486     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0427   1009           01487         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0428   1489           01488         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0429   0080           01489     movwf INDF                      ;Save to QUEUE
042A   0384           01490     decf FSR, F                     ;Increment QUEUE pointer
042B   0808           01491     movf ADC_DATAPORT, W            ;Sample X
042C   1409           01492     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
042D   1009           01493         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
042E   1089           01494         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
042F   0080           01495     movwf INDF                      ;Save to QUEUE
0430   0384           01496     decf FSR, F                     ;Increment QUEUE pointer
0431   1C70           01497     btfss configLoc1, 0                         ;Delay 250k or 192k
0432   23A7           01498         call DelayFive                          ;192k
0433   2C34           01499     goto $ + 1
0434   0000           01500         nop
0435   0BF8           01501         decfsz cntrc, F                 ;Increment counter, 64 samples?
0436   2C25           01502         goto SampleXY250kLD
0437   0000           01503     nop
0438   0808           01504     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
0439   1409           01505     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
043A   29A0           01506     goto ADCShutdown
                      01507 
                      01508 ;Repetative sample helper functions
                      01509 ;Equivalent sampling rate = 5 MHz with 20 MHz clock
                      01510 ;-----------------------------------------------------------------------------
043B                  01511 SampleRep5MEnd
043B   308B           01512         movlw (low SampleRep5M)                                 ;Test for step 1
043C   067A           01513         xorwf functptrlow, w
043D   1D03           01514         btfss STATUS, Z                                         
043E   2C43           01515                 goto SampleRep5MEndC                            ;End of another step
                      01516         MOVLF (low SampleRep5MStep2), functptrlow       ;End of step 1
043F   3058               M     movlw (low SampleRep5MStep2)
0440   00FA               M     movwf functptrlow
0441   1383           01517         bcf STATUS, IRP                                                 ;Restore buffer pointer for step
                             2
0442                  01518 SampleRep5MEndB
0442   28A4           01519         goto MainWaitTrig                                               ;Wait for next trigger
0443                  01520 SampleRep5MEndC
0443   3058           01521         movlw (low SampleRep5MStep2)                    ;Test for step 2
0444   067A           01522         xorwf functptrlow, w
0445   1D03           01523         btfss STATUS, Z
0446   2C4A           01524                 goto SampleRep5MEndD                            ;End of another step
                      01525         MOVLF (low SampleRep5MStep3), functptrlow       ;End of step 2
0447   305C               M     movlw (low SampleRep5MStep3)
0448   00FA               M     movwf functptrlow
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0449   28A4           01526         goto MainWaitTrig
044A                  01527 SampleRep5MEndD
044A   305C           01528         movlw (low SampleRep5MStep3)                    ;Test for step 3
044B   067A           01529         xorwf functptrlow, w
044C   1D03           01530         btfss STATUS, Z
044D   2C51           01531                 goto SampleRep5MEndE                            ;End of another step
                      01532         MOVLF (low SampleRep5MStep4), functptrlow       ;End of step 3
044E   3061               M     movlw (low SampleRep5MStep4)
044F   00FA               M     movwf functptrlow
0450   28A4           01533         goto MainWaitTrig
0451                  01534 SampleRep5MEndE
0451   3061           01535         movlw (low SampleRep5MStep4)                    ;Test for step 4
0452   067A           01536         xorwf functptrlow, w
0453   1D03           01537         btfss STATUS, Z
0454   29A0           01538                 goto ADCShutdown                                        ;End of step 5
                      01539         MOVLF (low SampleRep5MStep5), functptrlow       ;End of step 4
0455   3066               M     movlw (low SampleRep5MStep5)
0456   00FA               M     movwf functptrlow
0457   28A4           01540         goto MainWaitTrig
                      01541         
0458                  01542 SampleRep5MStep2
0458   3054           01543         movlw BUFFERMIN + D'52'
0459   1009           01544     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
045A   0084           01545         movwf FSR
045B   2D93           01546         goto Sample1MEntry2
                      01547         
045C                  01548 SampleRep5MStep3
                      01549         MOVLF BUFFERMIN + D'24' + B'10000000', FSR      ;Restore buffer pointer for step 3
045C   30B8               M     movlw BUFFERMIN + D'24' + B'10000000'
045D   0084               M     movwf FSR
045E   1009           01550     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
045F   1383           01551         bcf STATUS, IRP                                         ;Some of buffer pointer restoration is i
                            ncluded here to save a programming word
0460   2E92           01552         goto Sample1MEntry3
                      01553         
0461                  01554 SampleRep5MStep4
0461   2C62           01555     goto $ + 1
0462   30BA           01556         movlw BUFFERMIN + D'26' + B'10000000' ;Restore buffer pointer for step 4 to save some programmin
                            g space
0463   1009           01557     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
0464   0084           01558         movwf FSR
0465   2F91           01559         goto Sample1MEntry4
                      01560 
0466                  01561 SampleRep5MStep5
                      01562         MGOTOSETUP Sample1MhzEnd
                          M         if (Sample1MhzEnd & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0466   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample1MhzEnd & (0x800))
0467   158A               M                 bsf PCLATH, 3
                          M         else
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bcf PCLATH, 3
                          M         endif
                      01563         MOVLF BUFFERMIN + D'50', FSR            ;Restore buffer pointer for step 5 to save some programm
                            ing space
0468   3052               M     movlw BUFFERMIN + D'50'
0469   0084               M     movwf FSR
046A   1009           01564     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
046B   0000           01565         nop
Message[306]: Crossing page boundary -- ensure page bits are set.
046C   2890           01566         goto Sample1MhzEnd
                      01567 
                      01568 ;Repetative sample helper functions
                      01569 ;Equivalent sample rate of 2.5 MHz with 20 MHz clock
                      01570 ;-----------------------------------------------------------------------------
046D                  01571 SampleRep2MEnd
046D   309A           01572         movlw (low SampleRep2M)                                 ;Test for step 1
046E   067A           01573         xorwf functptrlow, w
046F   1D03           01574         btfss STATUS, Z
0470   2C78           01575                 goto SampleRep2MEndB
                      01576         MOVLF BUFFERMIN + D'41', FSR                    ;End step 1
0471   3049               M     movlw BUFFERMIN + D'41'
0472   0084               M     movwf FSR
                      01577         MOVLF (high SampleRep2MStep2), functptrhigh
0473   3004               M     movlw (high SampleRep2MStep2)
0474   00F9               M     movwf functptrhigh
                      01578         MOVLF (low SampleRep2MStep2), functptrlow
0475   307F               M     movlw (low SampleRep2MStep2)
0476   00FA               M     movwf functptrlow
0477   28A4           01579         goto MainWaitTrig
0478                  01580 SampleRep2MEndB
0478   307F           01581         movlw (low SampleRep2MStep2)                    ;Test for step 2
0479   067A           01582         xorwf functptrlow, w
047A   1D03           01583         btfss STATUS, Z
047B   29A0           01584                 goto ADCShutdown                                        ;End of step 3
                      01585         MOVLF (low SampleRep2MStep3), functptrlow       ;End of step 2
047C   3084               M     movlw (low SampleRep2MStep3)
047D   00FA               M     movwf functptrlow
047E   28A4           01586         goto MainWaitTrig                                       
                      01587 
047F                  01588 SampleRep2MStep2
                      01589         MGOTOSETUP Sample833kEntry1
                          M         if (Sample833kEntry1 & (0x1000))
047F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample833kEntry1 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0480   118A               M                 bcf PCLATH, 3
                          M         endif
0481   1009           01590     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
0482   1383           01591         bcf STATUS, IRP                                         ;Managing address here to save programmi
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            ng space
Message[306]: Crossing page boundary -- ensure page bits are set.
0483   2EA2           01592         goto Sample833kEntry1
                      01593 
0484                  01594 SampleRep2MStep3
                      01595         MOVLF BUFFERMIN + D'43' + B'10000000', FSR              ;Delay 4.  Managing FSR here to save pro
                            gramming space
0484   30CB               M     movlw BUFFERMIN + D'43' + B'10000000'
0485   0084               M     movwf FSR
                      01596         MGOTOSETUP Sample833kEntry2
                          M         if (Sample833kEntry2 & (0x1000))
0486   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample833kEntry2 & (0x800))
0487   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
0488   1009           01597     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
0489   0000           01598     nop
Message[306]: Crossing page boundary -- ensure page bits are set.
048A   28A0           01599         goto Sample833kEntry2
                      01600 
                      01601 ;Fastest sample
                      01602 ;Sampling rate = 1 MHz with 20 MHz clock
                      01603 ;Sampling rate = 200 kHz with 4 MHz clock
                      01604 ;-----------------------------------------------------------------------------
048B                  01605 Sample1M
                      01606 
                      01607 ;Repetative sample (shared with Sample1M)
                      01608 ;Equivalent sampling rate = 5 MHz with 20 MHz clock
                      01609 ;-----------------------------------------------------------------------------
048B                  01610 SampleRep5M
048B   1009           01611     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01612     MOVLF BUFFERMIN, FSR                ;Initialize pointer
048C   3020               M     movlw BUFFERMIN
048D   0084               M     movwf FSR
048E   0000           01613         nop
  0000                01614     local count
  00000001            01615     count = 1
                      01616     while count < D'53'
048F   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0490   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0491   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0492   0080           01620         movwf INDF                      ;Save to QUEUE
0493   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01622         count = count + 1
0494   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0495   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0496   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0497   0080           01620         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0498   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01622         count = count + 1
0499   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
049A   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
049B   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
049C   0080           01620         movwf INDF                      ;Save to QUEUE
049D   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01622         count = count + 1
049E   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
049F   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04A0   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04A1   0080           01620         movwf INDF                      ;Save to QUEUE
04A2   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01622         count = count + 1
04A3   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A4   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04A5   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04A6   0080           01620         movwf INDF                      ;Save to QUEUE
04A7   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01622         count = count + 1
04A8   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A9   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04AA   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04AB   0080           01620         movwf INDF                      ;Save to QUEUE
04AC   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01622         count = count + 1
04AD   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04AE   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04AF   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04B0   0080           01620         movwf INDF                      ;Save to QUEUE
04B1   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01622         count = count + 1
04B2   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B3   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B4   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04B5   0080           01620         movwf INDF                      ;Save to QUEUE
04B6   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01622         count = count + 1
04B7   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B8   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B9   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04BA   0080           01620         movwf INDF                      ;Save to QUEUE
04BB   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01622         count = count + 1
04BC   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04BD   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04BE   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04BF   0080           01620         movwf INDF                      ;Save to QUEUE
04C0   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01622         count = count + 1
04C1   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C2   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C3   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C4   0080           01620         movwf INDF                      ;Save to QUEUE
04C5   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01622         count = count + 1
04C6   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C7   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C8   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04C9   0080           01620         movwf INDF                      ;Save to QUEUE
04CA   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01622         count = count + 1
04CB   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04CC   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04CD   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04CE   0080           01620         movwf INDF                      ;Save to QUEUE
04CF   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01622         count = count + 1
04D0   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D1   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D2   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04D3   0080           01620         movwf INDF                      ;Save to QUEUE
04D4   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01622         count = count + 1
04D5   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D6   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D7   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04D8   0080           01620         movwf INDF                      ;Save to QUEUE
04D9   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01622         count = count + 1
04DA   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04DB   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04DC   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04DD   0080           01620         movwf INDF                      ;Save to QUEUE
04DE   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01622         count = count + 1
04DF   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E0   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E1   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04E2   0080           01620         movwf INDF                      ;Save to QUEUE
04E3   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01622         count = count + 1
04E4   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E5   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E6   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04E7   0080           01620         movwf INDF                      ;Save to QUEUE
04E8   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01622         count = count + 1
04E9   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04EA   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04EB   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04EC   0080           01620         movwf INDF                      ;Save to QUEUE
04ED   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01622         count = count + 1
04EE   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04EF   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F0   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04F1   0080           01620         movwf INDF                      ;Save to QUEUE
04F2   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01622         count = count + 1
04F3   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F4   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04F5   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04F6   0080           01620         movwf INDF                      ;Save to QUEUE
04F7   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01622         count = count + 1
04F8   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F9   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04FA   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
04FB   0080           01620         movwf INDF                      ;Save to QUEUE
04FC   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01622         count = count + 1
04FD   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04FE   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04FF   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0500   0080           01620         movwf INDF                      ;Save to QUEUE
0501   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01622         count = count + 1
0502   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0503   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0504   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0505   0080           01620         movwf INDF                      ;Save to QUEUE
0506   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01622         count = count + 1
0507   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0508   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0509   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
050A   0080           01620         movwf INDF                      ;Save to QUEUE
050B   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01622         count = count + 1
050C   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
050D   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
050E   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
050F   0080           01620         movwf INDF                      ;Save to QUEUE
0510   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01622         count = count + 1
0511   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0512   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0513   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0514   0080           01620         movwf INDF                      ;Save to QUEUE
0515   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01622         count = count + 1
0516   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0517   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0518   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0519   0080           01620         movwf INDF                      ;Save to QUEUE
051A   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01622         count = count + 1
051B   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

051C   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
051D   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
051E   0080           01620         movwf INDF                      ;Save to QUEUE
051F   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01622         count = count + 1
0520   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0521   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0522   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0523   0080           01620         movwf INDF                      ;Save to QUEUE
0524   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01622         count = count + 1
0525   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0526   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0527   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0528   0080           01620         movwf INDF                      ;Save to QUEUE
0529   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01622         count = count + 1
052A   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
052B   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
052C   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
052D   0080           01620         movwf INDF                      ;Save to QUEUE
052E   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01622         count = count + 1
052F   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0530   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0531   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0532   0080           01620         movwf INDF                      ;Save to QUEUE
0533   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01622         count = count + 1
0534   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0535   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0536   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0537   0080           01620         movwf INDF                      ;Save to QUEUE
0538   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01622         count = count + 1
0539   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
053A   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
053B   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
053C   0080           01620         movwf INDF                      ;Save to QUEUE
053D   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01622         count = count + 1
053E   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
053F   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0540   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0541   0080           01620         movwf INDF                      ;Save to QUEUE
0542   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01622         count = count + 1
0543   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0544   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0545   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0546   0080           01620         movwf INDF                      ;Save to QUEUE
0547   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01622         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0548   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0549   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
054A   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
054B   0080           01620         movwf INDF                      ;Save to QUEUE
054C   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01622         count = count + 1
054D   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
054E   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
054F   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0550   0080           01620         movwf INDF                      ;Save to QUEUE
0551   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01622         count = count + 1
0552   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0553   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0554   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0555   0080           01620         movwf INDF                      ;Save to QUEUE
0556   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01622         count = count + 1
0557   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0558   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0559   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
055A   0080           01620         movwf INDF                      ;Save to QUEUE
055B   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01622         count = count + 1
055C   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
055D   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
055E   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
055F   0080           01620         movwf INDF                      ;Save to QUEUE
0560   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01622         count = count + 1
0561   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0562   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0563   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0564   0080           01620         movwf INDF                      ;Save to QUEUE
0565   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01622         count = count + 1
0566   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0567   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0568   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0569   0080           01620         movwf INDF                      ;Save to QUEUE
056A   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01622         count = count + 1
056B   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
056C   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
056D   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
056E   0080           01620         movwf INDF                      ;Save to QUEUE
056F   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01622         count = count + 1
0570   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0571   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0572   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0573   0080           01620         movwf INDF                      ;Save to QUEUE
0574   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002F            01622         count = count + 1
0575   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0576   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0577   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0578   0080           01620         movwf INDF                      ;Save to QUEUE
0579   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01622         count = count + 1
057A   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
057B   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
057C   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
057D   0080           01620         movwf INDF                      ;Save to QUEUE
057E   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01622         count = count + 1
057F   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0580   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0581   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0582   0080           01620         movwf INDF                      ;Save to QUEUE
0583   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01622         count = count + 1
0584   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0585   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0586   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0587   0080           01620         movwf INDF                      ;Save to QUEUE
0588   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01622         count = count + 1
0589   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
058A   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
058B   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
058C   0080           01620         movwf INDF                      ;Save to QUEUE
058D   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01622         count = count + 1
058E   1409           01617             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
058F   1009           01618             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0590   0808           01619         movf ADC_DATAPORT, W            ;Save Sample
0591   0080           01620         movwf INDF                      ;Save to QUEUE
0592   0A84           01621         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01622         count = count + 1
                      01623     endw
0593                  01624 Sample1MEntry2
                      01625     while count < BUFFERSIZE
0593   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0594   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0595   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
0596   0080           01629         movwf INDF                      ;Save to QUEUE
0597   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01631         count = count + 1
0598   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0599   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
059A   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
059B   0080           01629         movwf INDF                      ;Save to QUEUE
059C   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01631         count = count + 1
059D   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

059E   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
059F   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05A0   0080           01629         movwf INDF                      ;Save to QUEUE
05A1   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01631         count = count + 1
05A2   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05A3   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05A4   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05A5   0080           01629         movwf INDF                      ;Save to QUEUE
05A6   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  00000039            01631         count = count + 1
05A7   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05A8   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05A9   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05AA   0080           01629         movwf INDF                      ;Save to QUEUE
05AB   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01631         count = count + 1
05AC   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05AD   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05AE   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05AF   0080           01629         movwf INDF                      ;Save to QUEUE
05B0   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01631         count = count + 1
05B1   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05B2   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05B3   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05B4   0080           01629         movwf INDF                      ;Save to QUEUE
05B5   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01631         count = count + 1
05B6   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05B7   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05B8   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05B9   0080           01629         movwf INDF                      ;Save to QUEUE
05BA   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01631         count = count + 1
05BB   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05BC   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05BD   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05BE   0080           01629         movwf INDF                      ;Save to QUEUE
05BF   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003E            01631         count = count + 1
05C0   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05C1   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05C2   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05C3   0080           01629         movwf INDF                      ;Save to QUEUE
05C4   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01631         count = count + 1
05C5   1409           01626             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
05C6   1009           01627             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
05C7   0808           01628         movf ADC_DATAPORT, W            ;Save Sample
05C8   0080           01629         movwf INDF                      ;Save to QUEUE
05C9   0A84           01630         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01631         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01632     endw
05CA   1409           01633     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
05CB   1009           01634     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
05CC   0808           01635     movf ADC_DATAPORT, W
05CD   0080           01636     movwf INDF
05CE   1784           01637     bsf FSR, 7                                                  ;goto bank 2
  00000001            01638     count = 1
                      01639     while count < D'40'
05CF   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D0   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D1   0808           01642         movf ADC_DATAPORT, W            ;Sample
05D2   0080           01643         movwf INDF                      ;Save to QUEUE
05D3   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01645         count = count + 1
05D4   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D5   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D6   0808           01642         movf ADC_DATAPORT, W            ;Sample
05D7   0080           01643         movwf INDF                      ;Save to QUEUE
05D8   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01645         count = count + 1
05D9   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05DA   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05DB   0808           01642         movf ADC_DATAPORT, W            ;Sample
05DC   0080           01643         movwf INDF                      ;Save to QUEUE
05DD   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01645         count = count + 1
05DE   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05DF   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E0   0808           01642         movf ADC_DATAPORT, W            ;Sample
05E1   0080           01643         movwf INDF                      ;Save to QUEUE
05E2   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01645         count = count + 1
05E3   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E4   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E5   0808           01642         movf ADC_DATAPORT, W            ;Sample
05E6   0080           01643         movwf INDF                      ;Save to QUEUE
05E7   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01645         count = count + 1
05E8   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E9   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05EA   0808           01642         movf ADC_DATAPORT, W            ;Sample
05EB   0080           01643         movwf INDF                      ;Save to QUEUE
05EC   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01645         count = count + 1
05ED   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05EE   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05EF   0808           01642         movf ADC_DATAPORT, W            ;Sample
05F0   0080           01643         movwf INDF                      ;Save to QUEUE
05F1   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01645         count = count + 1
05F2   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F3   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F4   0808           01642         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05F5   0080           01643         movwf INDF                      ;Save to QUEUE
05F6   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01645         count = count + 1
05F7   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F8   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F9   0808           01642         movf ADC_DATAPORT, W            ;Sample
05FA   0080           01643         movwf INDF                      ;Save to QUEUE
05FB   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01645         count = count + 1
05FC   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05FD   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05FE   0808           01642         movf ADC_DATAPORT, W            ;Sample
05FF   0080           01643         movwf INDF                      ;Save to QUEUE
0600   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01645         count = count + 1
0601   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0602   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0603   0808           01642         movf ADC_DATAPORT, W            ;Sample
0604   0080           01643         movwf INDF                      ;Save to QUEUE
0605   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01645         count = count + 1
0606   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0607   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0608   0808           01642         movf ADC_DATAPORT, W            ;Sample
0609   0080           01643         movwf INDF                      ;Save to QUEUE
060A   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01645         count = count + 1
060B   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
060C   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
060D   0808           01642         movf ADC_DATAPORT, W            ;Sample
060E   0080           01643         movwf INDF                      ;Save to QUEUE
060F   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01645         count = count + 1
0610   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0611   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0612   0808           01642         movf ADC_DATAPORT, W            ;Sample
0613   0080           01643         movwf INDF                      ;Save to QUEUE
0614   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01645         count = count + 1
0615   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0616   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0617   0808           01642         movf ADC_DATAPORT, W            ;Sample
0618   0080           01643         movwf INDF                      ;Save to QUEUE
0619   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01645         count = count + 1
061A   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
061B   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
061C   0808           01642         movf ADC_DATAPORT, W            ;Sample
061D   0080           01643         movwf INDF                      ;Save to QUEUE
061E   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01645         count = count + 1
061F   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0620   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0621   0808           01642         movf ADC_DATAPORT, W            ;Sample
0622   0080           01643         movwf INDF                      ;Save to QUEUE
0623   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01645         count = count + 1
0624   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0625   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0626   0808           01642         movf ADC_DATAPORT, W            ;Sample
0627   0080           01643         movwf INDF                      ;Save to QUEUE
0628   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01645         count = count + 1
0629   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
062A   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
062B   0808           01642         movf ADC_DATAPORT, W            ;Sample
062C   0080           01643         movwf INDF                      ;Save to QUEUE
062D   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01645         count = count + 1
062E   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
062F   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0630   0808           01642         movf ADC_DATAPORT, W            ;Sample
0631   0080           01643         movwf INDF                      ;Save to QUEUE
0632   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01645         count = count + 1
0633   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0634   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0635   0808           01642         movf ADC_DATAPORT, W            ;Sample
0636   0080           01643         movwf INDF                      ;Save to QUEUE
0637   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01645         count = count + 1
0638   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0639   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
063A   0808           01642         movf ADC_DATAPORT, W            ;Sample
063B   0080           01643         movwf INDF                      ;Save to QUEUE
063C   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01645         count = count + 1
063D   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
063E   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
063F   0808           01642         movf ADC_DATAPORT, W            ;Sample
0640   0080           01643         movwf INDF                      ;Save to QUEUE
0641   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01645         count = count + 1
0642   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0643   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0644   0808           01642         movf ADC_DATAPORT, W            ;Sample
0645   0080           01643         movwf INDF                      ;Save to QUEUE
0646   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01645         count = count + 1
0647   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0648   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0649   0808           01642         movf ADC_DATAPORT, W            ;Sample
064A   0080           01643         movwf INDF                      ;Save to QUEUE
064B   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01645         count = count + 1
064C   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

064D   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
064E   0808           01642         movf ADC_DATAPORT, W            ;Sample
064F   0080           01643         movwf INDF                      ;Save to QUEUE
0650   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01645         count = count + 1
0651   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0652   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0653   0808           01642         movf ADC_DATAPORT, W            ;Sample
0654   0080           01643         movwf INDF                      ;Save to QUEUE
0655   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01645         count = count + 1
0656   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0657   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0658   0808           01642         movf ADC_DATAPORT, W            ;Sample
0659   0080           01643         movwf INDF                      ;Save to QUEUE
065A   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01645         count = count + 1
065B   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
065C   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
065D   0808           01642         movf ADC_DATAPORT, W            ;Sample
065E   0080           01643         movwf INDF                      ;Save to QUEUE
065F   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01645         count = count + 1
0660   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0661   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0662   0808           01642         movf ADC_DATAPORT, W            ;Sample
0663   0080           01643         movwf INDF                      ;Save to QUEUE
0664   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01645         count = count + 1
0665   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0666   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0667   0808           01642         movf ADC_DATAPORT, W            ;Sample
0668   0080           01643         movwf INDF                      ;Save to QUEUE
0669   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01645         count = count + 1
066A   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
066B   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
066C   0808           01642         movf ADC_DATAPORT, W            ;Sample
066D   0080           01643         movwf INDF                      ;Save to QUEUE
066E   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01645         count = count + 1
066F   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0670   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0671   0808           01642         movf ADC_DATAPORT, W            ;Sample
0672   0080           01643         movwf INDF                      ;Save to QUEUE
0673   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01645         count = count + 1
0674   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0675   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0676   0808           01642         movf ADC_DATAPORT, W            ;Sample
0677   0080           01643         movwf INDF                      ;Save to QUEUE
0678   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01645         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0679   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
067A   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
067B   0808           01642         movf ADC_DATAPORT, W            ;Sample
067C   0080           01643         movwf INDF                      ;Save to QUEUE
067D   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01645         count = count + 1
067E   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
067F   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0680   0808           01642         movf ADC_DATAPORT, W            ;Sample
0681   0080           01643         movwf INDF                      ;Save to QUEUE
0682   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01645         count = count + 1
0683   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0684   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0685   0808           01642         movf ADC_DATAPORT, W            ;Sample
0686   0080           01643         movwf INDF                      ;Save to QUEUE
0687   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01645         count = count + 1
0688   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0689   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
068A   0808           01642         movf ADC_DATAPORT, W            ;Sample
068B   0080           01643         movwf INDF                      ;Save to QUEUE
068C   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01645         count = count + 1
068D   1409           01640         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
068E   1009           01641         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
068F   0808           01642         movf ADC_DATAPORT, W            ;Sample
0690   0080           01643         movwf INDF                      ;Save to QUEUE
0691   0384           01644         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01645         count = count + 1
                      01646         endw
0692                  01647 Sample1MEntry3
                      01648     while count < BUFFERSIZE
0692   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0693   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0694   0808           01651         movf ADC_DATAPORT, W            ;Sample
0695   0080           01652         movwf INDF                      ;Save to QUEUE
0696   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01654         count = count + 1
0697   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0698   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0699   0808           01651         movf ADC_DATAPORT, W            ;Sample
069A   0080           01652         movwf INDF                      ;Save to QUEUE
069B   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01654         count = count + 1
069C   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
069D   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
069E   0808           01651         movf ADC_DATAPORT, W            ;Sample
069F   0080           01652         movwf INDF                      ;Save to QUEUE
06A0   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01654         count = count + 1
06A1   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A2   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06A3   0808           01651         movf ADC_DATAPORT, W            ;Sample
06A4   0080           01652         movwf INDF                      ;Save to QUEUE
06A5   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01654         count = count + 1
06A6   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A7   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06A8   0808           01651         movf ADC_DATAPORT, W            ;Sample
06A9   0080           01652         movwf INDF                      ;Save to QUEUE
06AA   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01654         count = count + 1
06AB   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06AC   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06AD   0808           01651         movf ADC_DATAPORT, W            ;Sample
06AE   0080           01652         movwf INDF                      ;Save to QUEUE
06AF   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01654         count = count + 1
06B0   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B1   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B2   0808           01651         movf ADC_DATAPORT, W            ;Sample
06B3   0080           01652         movwf INDF                      ;Save to QUEUE
06B4   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01654         count = count + 1
06B5   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B6   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B7   0808           01651         movf ADC_DATAPORT, W            ;Sample
06B8   0080           01652         movwf INDF                      ;Save to QUEUE
06B9   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01654         count = count + 1
06BA   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06BB   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06BC   0808           01651         movf ADC_DATAPORT, W            ;Sample
06BD   0080           01652         movwf INDF                      ;Save to QUEUE
06BE   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01654         count = count + 1
06BF   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C0   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C1   0808           01651         movf ADC_DATAPORT, W            ;Sample
06C2   0080           01652         movwf INDF                      ;Save to QUEUE
06C3   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01654         count = count + 1
06C4   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C5   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C6   0808           01651         movf ADC_DATAPORT, W            ;Sample
06C7   0080           01652         movwf INDF                      ;Save to QUEUE
06C8   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01654         count = count + 1
06C9   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06CA   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06CB   0808           01651         movf ADC_DATAPORT, W            ;Sample
06CC   0080           01652         movwf INDF                      ;Save to QUEUE
06CD   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01654         count = count + 1
06CE   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06CF   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D0   0808           01651         movf ADC_DATAPORT, W            ;Sample
06D1   0080           01652         movwf INDF                      ;Save to QUEUE
06D2   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01654         count = count + 1
06D3   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D4   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D5   0808           01651         movf ADC_DATAPORT, W            ;Sample
06D6   0080           01652         movwf INDF                      ;Save to QUEUE
06D7   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000036            01654         count = count + 1
06D8   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D9   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06DA   0808           01651         movf ADC_DATAPORT, W            ;Sample
06DB   0080           01652         movwf INDF                      ;Save to QUEUE
06DC   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01654         count = count + 1
06DD   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06DE   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06DF   0808           01651         movf ADC_DATAPORT, W            ;Sample
06E0   0080           01652         movwf INDF                      ;Save to QUEUE
06E1   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01654         count = count + 1
06E2   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E3   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E4   0808           01651         movf ADC_DATAPORT, W            ;Sample
06E5   0080           01652         movwf INDF                      ;Save to QUEUE
06E6   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01654         count = count + 1
06E7   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E8   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E9   0808           01651         movf ADC_DATAPORT, W            ;Sample
06EA   0080           01652         movwf INDF                      ;Save to QUEUE
06EB   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01654         count = count + 1
06EC   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06ED   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06EE   0808           01651         movf ADC_DATAPORT, W            ;Sample
06EF   0080           01652         movwf INDF                      ;Save to QUEUE
06F0   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01654         count = count + 1
06F1   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F2   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F3   0808           01651         movf ADC_DATAPORT, W            ;Sample
06F4   0080           01652         movwf INDF                      ;Save to QUEUE
06F5   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01654         count = count + 1
06F6   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F7   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F8   0808           01651         movf ADC_DATAPORT, W            ;Sample
06F9   0080           01652         movwf INDF                      ;Save to QUEUE
06FA   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01654         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06FB   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06FC   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06FD   0808           01651         movf ADC_DATAPORT, W            ;Sample
06FE   0080           01652         movwf INDF                      ;Save to QUEUE
06FF   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01654         count = count + 1
0700   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0701   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0702   0808           01651         movf ADC_DATAPORT, W            ;Sample
0703   0080           01652         movwf INDF                      ;Save to QUEUE
0704   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01654         count = count + 1
0705   1409           01649         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0706   1009           01650         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0707   0808           01651         movf ADC_DATAPORT, W            ;Sample
0708   0080           01652         movwf INDF                      ;Save to QUEUE
0709   0384           01653         decf FSR, F                     ;Increment QUEUE pointer
  00000040            01654         count = count + 1
                      01655         endw
070A   1409           01656     bsf ADC_CONTROLPORT, RDD
070B   1009           01657     bcf ADC_CONTROLPORT, RDD
070C   0808           01658     movf ADC_DATAPORT, W
070D   0080           01659     movwf INDF
070E   1783           01660     bsf STATUS, IRP                                             ;goto bank 4
  00000001            01661     count = 1
                      01662     while count < D'27'
070F   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0710   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0711   0808           01665         movf ADC_DATAPORT, W            ;Sample
0712   0080           01666         movwf INDF                      ;Save to QUEUE
0713   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01668         count = count + 1
0714   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0715   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0716   0808           01665         movf ADC_DATAPORT, W            ;Sample
0717   0080           01666         movwf INDF                      ;Save to QUEUE
0718   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01668         count = count + 1
0719   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
071A   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
071B   0808           01665         movf ADC_DATAPORT, W            ;Sample
071C   0080           01666         movwf INDF                      ;Save to QUEUE
071D   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01668         count = count + 1
071E   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
071F   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0720   0808           01665         movf ADC_DATAPORT, W            ;Sample
0721   0080           01666         movwf INDF                      ;Save to QUEUE
0722   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01668         count = count + 1
0723   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0724   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0725   0808           01665         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0726   0080           01666         movwf INDF                      ;Save to QUEUE
0727   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01668         count = count + 1
0728   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0729   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
072A   0808           01665         movf ADC_DATAPORT, W            ;Sample
072B   0080           01666         movwf INDF                      ;Save to QUEUE
072C   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01668         count = count + 1
072D   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
072E   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
072F   0808           01665         movf ADC_DATAPORT, W            ;Sample
0730   0080           01666         movwf INDF                      ;Save to QUEUE
0731   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01668         count = count + 1
0732   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0733   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0734   0808           01665         movf ADC_DATAPORT, W            ;Sample
0735   0080           01666         movwf INDF                      ;Save to QUEUE
0736   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01668         count = count + 1
0737   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0738   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0739   0808           01665         movf ADC_DATAPORT, W            ;Sample
073A   0080           01666         movwf INDF                      ;Save to QUEUE
073B   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01668         count = count + 1
073C   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
073D   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
073E   0808           01665         movf ADC_DATAPORT, W            ;Sample
073F   0080           01666         movwf INDF                      ;Save to QUEUE
0740   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01668         count = count + 1
0741   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0742   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0743   0808           01665         movf ADC_DATAPORT, W            ;Sample
0744   0080           01666         movwf INDF                      ;Save to QUEUE
0745   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01668         count = count + 1
0746   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0747   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0748   0808           01665         movf ADC_DATAPORT, W            ;Sample
0749   0080           01666         movwf INDF                      ;Save to QUEUE
074A   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01668         count = count + 1
074B   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
074C   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
074D   0808           01665         movf ADC_DATAPORT, W            ;Sample
074E   0080           01666         movwf INDF                      ;Save to QUEUE
074F   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01668         count = count + 1
0750   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0751   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0752   0808           01665         movf ADC_DATAPORT, W            ;Sample
0753   0080           01666         movwf INDF                      ;Save to QUEUE
0754   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01668         count = count + 1
0755   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0756   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0757   0808           01665         movf ADC_DATAPORT, W            ;Sample
0758   0080           01666         movwf INDF                      ;Save to QUEUE
0759   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01668         count = count + 1
075A   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
075B   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
075C   0808           01665         movf ADC_DATAPORT, W            ;Sample
075D   0080           01666         movwf INDF                      ;Save to QUEUE
075E   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01668         count = count + 1
075F   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0760   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0761   0808           01665         movf ADC_DATAPORT, W            ;Sample
0762   0080           01666         movwf INDF                      ;Save to QUEUE
0763   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01668         count = count + 1
0764   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0765   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0766   0808           01665         movf ADC_DATAPORT, W            ;Sample
0767   0080           01666         movwf INDF                      ;Save to QUEUE
0768   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01668         count = count + 1
0769   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
076A   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
076B   0808           01665         movf ADC_DATAPORT, W            ;Sample
076C   0080           01666         movwf INDF                      ;Save to QUEUE
076D   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01668         count = count + 1
076E   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
076F   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0770   0808           01665         movf ADC_DATAPORT, W            ;Sample
0771   0080           01666         movwf INDF                      ;Save to QUEUE
0772   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01668         count = count + 1
0773   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0774   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0775   0808           01665         movf ADC_DATAPORT, W            ;Sample
0776   0080           01666         movwf INDF                      ;Save to QUEUE
0777   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01668         count = count + 1
0778   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0779   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
077A   0808           01665         movf ADC_DATAPORT, W            ;Sample
077B   0080           01666         movwf INDF                      ;Save to QUEUE
077C   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01668         count = count + 1
077D   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

077E   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
077F   0808           01665         movf ADC_DATAPORT, W            ;Sample
0780   0080           01666         movwf INDF                      ;Save to QUEUE
0781   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01668         count = count + 1
0782   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0783   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0784   0808           01665         movf ADC_DATAPORT, W            ;Sample
0785   0080           01666         movwf INDF                      ;Save to QUEUE
0786   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01668         count = count + 1
0787   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0788   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0789   0808           01665         movf ADC_DATAPORT, W            ;Sample
078A   0080           01666         movwf INDF                      ;Save to QUEUE
078B   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01668         count = count + 1
078C   1409           01663         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
078D   1009           01664         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
078E   0808           01665         movf ADC_DATAPORT, W            ;Sample
078F   0080           01666         movwf INDF                      ;Save to QUEUE
0790   0A84           01667         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01668         count = count + 1
                      01669         endw
0791                  01670 Sample1MEntry4
                      01671     while count < BUFFERSIZE
0791   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0792   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0793   0808           01674         movf ADC_DATAPORT, W            ;Sample
0794   0080           01675         movwf INDF                      ;Save to QUEUE
0795   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01677         count = count + 1
0796   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0797   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0798   0808           01674         movf ADC_DATAPORT, W            ;Sample
0799   0080           01675         movwf INDF                      ;Save to QUEUE
079A   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01677         count = count + 1
079B   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
079C   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
079D   0808           01674         movf ADC_DATAPORT, W            ;Sample
079E   0080           01675         movwf INDF                      ;Save to QUEUE
079F   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01677         count = count + 1
07A0   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A1   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A2   0808           01674         movf ADC_DATAPORT, W            ;Sample
07A3   0080           01675         movwf INDF                      ;Save to QUEUE
07A4   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01677         count = count + 1
07A5   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A6   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A7   0808           01674         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07A8   0080           01675         movwf INDF                      ;Save to QUEUE
07A9   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01677         count = count + 1
07AA   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07AB   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07AC   0808           01674         movf ADC_DATAPORT, W            ;Sample
07AD   0080           01675         movwf INDF                      ;Save to QUEUE
07AE   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01677         count = count + 1
07AF   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07B0   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07B1   0808           01674         movf ADC_DATAPORT, W            ;Sample
07B2   0080           01675         movwf INDF                      ;Save to QUEUE
07B3   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01677         count = count + 1
07B4   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07B5   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07B6   0808           01674         movf ADC_DATAPORT, W            ;Sample
07B7   0080           01675         movwf INDF                      ;Save to QUEUE
07B8   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01677         count = count + 1
07B9   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07BA   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07BB   0808           01674         movf ADC_DATAPORT, W            ;Sample
07BC   0080           01675         movwf INDF                      ;Save to QUEUE
07BD   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01677         count = count + 1
07BE   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07BF   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C0   0808           01674         movf ADC_DATAPORT, W            ;Sample
07C1   0080           01675         movwf INDF                      ;Save to QUEUE
07C2   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01677         count = count + 1
07C3   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C4   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C5   0808           01674         movf ADC_DATAPORT, W            ;Sample
07C6   0080           01675         movwf INDF                      ;Save to QUEUE
07C7   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01677         count = count + 1
07C8   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C9   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07CA   0808           01674         movf ADC_DATAPORT, W            ;Sample
07CB   0080           01675         movwf INDF                      ;Save to QUEUE
07CC   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01677         count = count + 1
07CD   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07CE   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07CF   0808           01674         movf ADC_DATAPORT, W            ;Sample
07D0   0080           01675         movwf INDF                      ;Save to QUEUE
07D1   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01677         count = count + 1
07D2   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D3   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07D4   0808           01674         movf ADC_DATAPORT, W            ;Sample
07D5   0080           01675         movwf INDF                      ;Save to QUEUE
07D6   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01677         count = count + 1
07D7   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D8   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07D9   0808           01674         movf ADC_DATAPORT, W            ;Sample
07DA   0080           01675         movwf INDF                      ;Save to QUEUE
07DB   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01677         count = count + 1
07DC   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07DD   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07DE   0808           01674         movf ADC_DATAPORT, W            ;Sample
07DF   0080           01675         movwf INDF                      ;Save to QUEUE
07E0   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01677         count = count + 1
07E1   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07E2   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E3   0808           01674         movf ADC_DATAPORT, W            ;Sample
07E4   0080           01675         movwf INDF                      ;Save to QUEUE
07E5   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01677         count = count + 1
07E6   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07E7   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E8   0808           01674         movf ADC_DATAPORT, W            ;Sample
07E9   0080           01675         movwf INDF                      ;Save to QUEUE
07EA   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01677         count = count + 1
07EB   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07EC   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07ED   0808           01674         movf ADC_DATAPORT, W            ;Sample
07EE   0080           01675         movwf INDF                      ;Save to QUEUE
07EF   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01677         count = count + 1
07F0   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F1   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F2   0808           01674         movf ADC_DATAPORT, W            ;Sample
07F3   0080           01675         movwf INDF                      ;Save to QUEUE
07F4   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000002F            01677         count = count + 1
07F5   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F6   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F7   0808           01674         movf ADC_DATAPORT, W            ;Sample
07F8   0080           01675         movwf INDF                      ;Save to QUEUE
07F9   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01677         count = count + 1
07FA   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07FB   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07FC   0808           01674         movf ADC_DATAPORT, W            ;Sample
07FD   0080           01675         movwf INDF                      ;Save to QUEUE
07FE   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01677         count = count + 1
07FF   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0800   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0801   0808           01674         movf ADC_DATAPORT, W            ;Sample
0802   0080           01675         movwf INDF                      ;Save to QUEUE
0803   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01677         count = count + 1
0804   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0805   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0806   0808           01674         movf ADC_DATAPORT, W            ;Sample
0807   0080           01675         movwf INDF                      ;Save to QUEUE
0808   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01677         count = count + 1
0809   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
080A   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
080B   0808           01674         movf ADC_DATAPORT, W            ;Sample
080C   0080           01675         movwf INDF                      ;Save to QUEUE
080D   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01677         count = count + 1
080E   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
080F   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0810   0808           01674         movf ADC_DATAPORT, W            ;Sample
0811   0080           01675         movwf INDF                      ;Save to QUEUE
0812   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01677         count = count + 1
0813   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0814   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0815   0808           01674         movf ADC_DATAPORT, W            ;Sample
0816   0080           01675         movwf INDF                      ;Save to QUEUE
0817   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01677         count = count + 1
0818   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0819   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
081A   0808           01674         movf ADC_DATAPORT, W            ;Sample
081B   0080           01675         movwf INDF                      ;Save to QUEUE
081C   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01677         count = count + 1
081D   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
081E   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
081F   0808           01674         movf ADC_DATAPORT, W            ;Sample
0820   0080           01675         movwf INDF                      ;Save to QUEUE
0821   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01677         count = count + 1
0822   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0823   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0824   0808           01674         movf ADC_DATAPORT, W            ;Sample
0825   0080           01675         movwf INDF                      ;Save to QUEUE
0826   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000039            01677         count = count + 1
0827   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0828   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0829   0808           01674         movf ADC_DATAPORT, W            ;Sample
082A   0080           01675         movwf INDF                      ;Save to QUEUE
082B   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01677         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

082C   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
082D   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
082E   0808           01674         movf ADC_DATAPORT, W            ;Sample
082F   0080           01675         movwf INDF                      ;Save to QUEUE
0830   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01677         count = count + 1
0831   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0832   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0833   0808           01674         movf ADC_DATAPORT, W            ;Sample
0834   0080           01675         movwf INDF                      ;Save to QUEUE
0835   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01677         count = count + 1
0836   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0837   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0838   0808           01674         movf ADC_DATAPORT, W            ;Sample
0839   0080           01675         movwf INDF                      ;Save to QUEUE
083A   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01677         count = count + 1
083B   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
083C   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
083D   0808           01674         movf ADC_DATAPORT, W            ;Sample
083E   0080           01675         movwf INDF                      ;Save to QUEUE
083F   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003E            01677         count = count + 1
0840   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0841   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0842   0808           01674         movf ADC_DATAPORT, W            ;Sample
0843   0080           01675         movwf INDF                      ;Save to QUEUE
0844   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01677         count = count + 1
0845   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0846   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0847   0808           01674         movf ADC_DATAPORT, W            ;Sample
0848   0080           01675         movwf INDF                      ;Save to QUEUE
0849   0A84           01676         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01677         count = count + 1
                      01678         endw
084A   1409           01679     bsf ADC_CONTROLPORT, RDD
084B   1009           01680     bcf ADC_CONTROLPORT, RDD
084C   0808           01681     movf ADC_DATAPORT, W            ;Sample
084D   0080           01682     movwf INDF
084E   1384           01683     bcf FSR, 7                                                  ;goto bank 3
  00000001            01684     count = 1
                      01685     while count < D'14'
084F   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0850   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0851   0808           01688             movf ADC_DATAPORT, W
0852   0080           01689         movwf INDF                      ;Save to QUEUE
0853   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01691         count = count + 1
0854   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0855   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0856   0808           01688             movf ADC_DATAPORT, W
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0857   0080           01689         movwf INDF                      ;Save to QUEUE
0858   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01691         count = count + 1
0859   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
085A   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
085B   0808           01688             movf ADC_DATAPORT, W
085C   0080           01689         movwf INDF                      ;Save to QUEUE
085D   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01691         count = count + 1
085E   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
085F   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0860   0808           01688             movf ADC_DATAPORT, W
0861   0080           01689         movwf INDF                      ;Save to QUEUE
0862   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01691         count = count + 1
0863   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0864   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0865   0808           01688             movf ADC_DATAPORT, W
0866   0080           01689         movwf INDF                      ;Save to QUEUE
0867   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01691         count = count + 1
0868   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0869   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
086A   0808           01688             movf ADC_DATAPORT, W
086B   0080           01689         movwf INDF                      ;Save to QUEUE
086C   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01691         count = count + 1
086D   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
086E   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
086F   0808           01688             movf ADC_DATAPORT, W
0870   0080           01689         movwf INDF                      ;Save to QUEUE
0871   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01691         count = count + 1
0872   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0873   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0874   0808           01688             movf ADC_DATAPORT, W
0875   0080           01689         movwf INDF                      ;Save to QUEUE
0876   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01691         count = count + 1
0877   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0878   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0879   0808           01688             movf ADC_DATAPORT, W
087A   0080           01689         movwf INDF                      ;Save to QUEUE
087B   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01691         count = count + 1
087C   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
087D   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
087E   0808           01688             movf ADC_DATAPORT, W
087F   0080           01689         movwf INDF                      ;Save to QUEUE
0880   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01691         count = count + 1
0881   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0882   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0883   0808           01688             movf ADC_DATAPORT, W
0884   0080           01689         movwf INDF                      ;Save to QUEUE
0885   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01691         count = count + 1
0886   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0887   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0888   0808           01688             movf ADC_DATAPORT, W
0889   0080           01689         movwf INDF                      ;Save to QUEUE
088A   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01691         count = count + 1
088B   1409           01686         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
088C   1009           01687         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
088D   0808           01688             movf ADC_DATAPORT, W
088E   0080           01689         movwf INDF                      ;Save to QUEUE
088F   0384           01690         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01691         count = count + 1
                      01692         endw
0890                  01693 Sample1MhzEnd
                      01694     while count < BUFFERSIZE
0890   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0891   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0892   0808           01697             movf ADC_DATAPORT, W
0893   0080           01698         movwf INDF                      ;Save to QUEUE
0894   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01700         count = count + 1
0895   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0896   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0897   0808           01697             movf ADC_DATAPORT, W
0898   0080           01698         movwf INDF                      ;Save to QUEUE
0899   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01700         count = count + 1
089A   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
089B   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
089C   0808           01697             movf ADC_DATAPORT, W
089D   0080           01698         movwf INDF                      ;Save to QUEUE
089E   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01700         count = count + 1
089F   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A0   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A1   0808           01697             movf ADC_DATAPORT, W
08A2   0080           01698         movwf INDF                      ;Save to QUEUE
08A3   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01700         count = count + 1
08A4   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A5   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A6   0808           01697             movf ADC_DATAPORT, W
08A7   0080           01698         movwf INDF                      ;Save to QUEUE
08A8   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01700         count = count + 1
08A9   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08AA   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08AB   0808           01697             movf ADC_DATAPORT, W
08AC   0080           01698         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08AD   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01700         count = count + 1
08AE   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08AF   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B0   0808           01697             movf ADC_DATAPORT, W
08B1   0080           01698         movwf INDF                      ;Save to QUEUE
08B2   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01700         count = count + 1
08B3   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B4   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B5   0808           01697             movf ADC_DATAPORT, W
08B6   0080           01698         movwf INDF                      ;Save to QUEUE
08B7   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01700         count = count + 1
08B8   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B9   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08BA   0808           01697             movf ADC_DATAPORT, W
08BB   0080           01698         movwf INDF                      ;Save to QUEUE
08BC   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01700         count = count + 1
08BD   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08BE   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08BF   0808           01697             movf ADC_DATAPORT, W
08C0   0080           01698         movwf INDF                      ;Save to QUEUE
08C1   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01700         count = count + 1
08C2   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C3   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C4   0808           01697             movf ADC_DATAPORT, W
08C5   0080           01698         movwf INDF                      ;Save to QUEUE
08C6   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01700         count = count + 1
08C7   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C8   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C9   0808           01697             movf ADC_DATAPORT, W
08CA   0080           01698         movwf INDF                      ;Save to QUEUE
08CB   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01700         count = count + 1
08CC   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08CD   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08CE   0808           01697             movf ADC_DATAPORT, W
08CF   0080           01698         movwf INDF                      ;Save to QUEUE
08D0   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01700         count = count + 1
08D1   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D2   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D3   0808           01697             movf ADC_DATAPORT, W
08D4   0080           01698         movwf INDF                      ;Save to QUEUE
08D5   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01700         count = count + 1
08D6   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D7   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D8   0808           01697             movf ADC_DATAPORT, W
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08D9   0080           01698         movwf INDF                      ;Save to QUEUE
08DA   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01700         count = count + 1
08DB   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08DC   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08DD   0808           01697             movf ADC_DATAPORT, W
08DE   0080           01698         movwf INDF                      ;Save to QUEUE
08DF   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01700         count = count + 1
08E0   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E1   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E2   0808           01697             movf ADC_DATAPORT, W
08E3   0080           01698         movwf INDF                      ;Save to QUEUE
08E4   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01700         count = count + 1
08E5   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E6   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E7   0808           01697             movf ADC_DATAPORT, W
08E8   0080           01698         movwf INDF                      ;Save to QUEUE
08E9   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01700         count = count + 1
08EA   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08EB   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08EC   0808           01697             movf ADC_DATAPORT, W
08ED   0080           01698         movwf INDF                      ;Save to QUEUE
08EE   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01700         count = count + 1
08EF   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08F0   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08F1   0808           01697             movf ADC_DATAPORT, W
08F2   0080           01698         movwf INDF                      ;Save to QUEUE
08F3   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01700         count = count + 1
08F4   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08F5   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08F6   0808           01697             movf ADC_DATAPORT, W
08F7   0080           01698         movwf INDF                      ;Save to QUEUE
08F8   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01700         count = count + 1
08F9   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08FA   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08FB   0808           01697             movf ADC_DATAPORT, W
08FC   0080           01698         movwf INDF                      ;Save to QUEUE
08FD   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01700         count = count + 1
08FE   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08FF   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0900   0808           01697             movf ADC_DATAPORT, W
0901   0080           01698         movwf INDF                      ;Save to QUEUE
0902   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01700         count = count + 1
0903   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0904   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0905   0808           01697             movf ADC_DATAPORT, W
0906   0080           01698         movwf INDF                      ;Save to QUEUE
0907   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01700         count = count + 1
0908   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0909   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
090A   0808           01697             movf ADC_DATAPORT, W
090B   0080           01698         movwf INDF                      ;Save to QUEUE
090C   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01700         count = count + 1
090D   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
090E   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
090F   0808           01697             movf ADC_DATAPORT, W
0910   0080           01698         movwf INDF                      ;Save to QUEUE
0911   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01700         count = count + 1
0912   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0913   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0914   0808           01697             movf ADC_DATAPORT, W
0915   0080           01698         movwf INDF                      ;Save to QUEUE
0916   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01700         count = count + 1
0917   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0918   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0919   0808           01697             movf ADC_DATAPORT, W
091A   0080           01698         movwf INDF                      ;Save to QUEUE
091B   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01700         count = count + 1
091C   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
091D   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
091E   0808           01697             movf ADC_DATAPORT, W
091F   0080           01698         movwf INDF                      ;Save to QUEUE
0920   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01700         count = count + 1
0921   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0922   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0923   0808           01697             movf ADC_DATAPORT, W
0924   0080           01698         movwf INDF                      ;Save to QUEUE
0925   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01700         count = count + 1
0926   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0927   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0928   0808           01697             movf ADC_DATAPORT, W
0929   0080           01698         movwf INDF                      ;Save to QUEUE
092A   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01700         count = count + 1
092B   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
092C   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
092D   0808           01697             movf ADC_DATAPORT, W
092E   0080           01698         movwf INDF                      ;Save to QUEUE
092F   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01700         count = count + 1
0930   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0931   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0932   0808           01697             movf ADC_DATAPORT, W
0933   0080           01698         movwf INDF                      ;Save to QUEUE
0934   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01700         count = count + 1
0935   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0936   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0937   0808           01697             movf ADC_DATAPORT, W
0938   0080           01698         movwf INDF                      ;Save to QUEUE
0939   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01700         count = count + 1
093A   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
093B   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
093C   0808           01697             movf ADC_DATAPORT, W
093D   0080           01698         movwf INDF                      ;Save to QUEUE
093E   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01700         count = count + 1
093F   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0940   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0941   0808           01697             movf ADC_DATAPORT, W
0942   0080           01698         movwf INDF                      ;Save to QUEUE
0943   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01700         count = count + 1
0944   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0945   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0946   0808           01697             movf ADC_DATAPORT, W
0947   0080           01698         movwf INDF                      ;Save to QUEUE
0948   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01700         count = count + 1
0949   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
094A   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
094B   0808           01697             movf ADC_DATAPORT, W
094C   0080           01698         movwf INDF                      ;Save to QUEUE
094D   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01700         count = count + 1
094E   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
094F   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0950   0808           01697             movf ADC_DATAPORT, W
0951   0080           01698         movwf INDF                      ;Save to QUEUE
0952   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01700         count = count + 1
0953   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0954   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0955   0808           01697             movf ADC_DATAPORT, W
0956   0080           01698         movwf INDF                      ;Save to QUEUE
0957   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000036            01700         count = count + 1
0958   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0959   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
095A   0808           01697             movf ADC_DATAPORT, W
095B   0080           01698         movwf INDF                      ;Save to QUEUE
095C   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01700         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

095D   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
095E   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
095F   0808           01697             movf ADC_DATAPORT, W
0960   0080           01698         movwf INDF                      ;Save to QUEUE
0961   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01700         count = count + 1
0962   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0963   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0964   0808           01697             movf ADC_DATAPORT, W
0965   0080           01698         movwf INDF                      ;Save to QUEUE
0966   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01700         count = count + 1
0967   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0968   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0969   0808           01697             movf ADC_DATAPORT, W
096A   0080           01698         movwf INDF                      ;Save to QUEUE
096B   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01700         count = count + 1
096C   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
096D   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
096E   0808           01697             movf ADC_DATAPORT, W
096F   0080           01698         movwf INDF                      ;Save to QUEUE
0970   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01700         count = count + 1
0971   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0972   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0973   0808           01697             movf ADC_DATAPORT, W
0974   0080           01698         movwf INDF                      ;Save to QUEUE
0975   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01700         count = count + 1
0976   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0977   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0978   0808           01697             movf ADC_DATAPORT, W
0979   0080           01698         movwf INDF                      ;Save to QUEUE
097A   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01700         count = count + 1
097B   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
097C   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
097D   0808           01697             movf ADC_DATAPORT, W
097E   0080           01698         movwf INDF                      ;Save to QUEUE
097F   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01700         count = count + 1
0980   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0981   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0982   0808           01697             movf ADC_DATAPORT, W
0983   0080           01698         movwf INDF                      ;Save to QUEUE
0984   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01700         count = count + 1
0985   1409           01695         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0986   1009           01696         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0987   0808           01697             movf ADC_DATAPORT, W
0988   0080           01698         movwf INDF                      ;Save to QUEUE
0989   0384           01699         decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000040            01700         count = count + 1
                      01701         endw
098A   1409           01702     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
098B   0808           01703     movf ADC_DATAPORT, W                ;Sample
                      01704         MGOTOSETUP SampleRep5MEnd
                          M         if (SampleRep5MEnd & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
098C   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEnd & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
098D   118A               M                 bcf PCLATH, 3
                          M         endif
098E   18F0           01705         btfsc configLoc1, 1                                     ;Check if ending 5MHz repetative samplin
                            g mode
Message[306]: Crossing page boundary -- ensure page bits are set.
098F   2C3B           01706                 goto SampleRep5MEnd
                      01707 ;Ending regular 1 MHz sampling
0990                  01708 SampleRep5MEndStep5
                      01709         MGOTO ADCShutdown
                          M         MGOTOSETUP ADCShutdown
                          M         if (ADCShutdown & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0990   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (ADCShutdown & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0991   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0992   29A0               M         goto ADCShutdown
                      01710 
                      01711 ;Fastest XY sample
                      01712 ;Sampling rate = 500 kHz with 20 MHz clock
                      01713 ;Sampling rate =  100 kHz with 4 MHz clock
                      01714 ;-----------------------------------------------------------------------------
0993                  01715 SampleXY500k
0993   1009           01716     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0994   1089           01717     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to x
                      01718     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0995   3020               M     movlw BUFFERMIN
0996   0084               M     movwf FSR
0997   0389           01719         decf ADC_CONTROLPORT, f                 ;Stop Conversion and set channel to y
0998   0389           01720         decf ADC_CONTROLPORT, f                 ;Begin next conversion
0999   0808           01721         movf ADC_DATAPORT, W            ;Sample X
099A   0080           01722     movwf INDF                      ;Save to QUEUE
099B   0A84           01723     incf FSR, F                     ;Increment QUEUE pointer
  00000001            01724     count = 1
                      01725     while count < BUFFERSIZE / 2
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

099C   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
099D   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
099E   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
099F   0080           01729                 movwf INDF                      ;Save to QUEUE
09A0   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09A1   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09A2   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09A3   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09A4   0080           01734                 movwf INDF                      ;Save to QUEUE
09A5   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01736                 count = count + 1
09A6   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09A7   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09A8   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09A9   0080           01729                 movwf INDF                      ;Save to QUEUE
09AA   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09AB   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09AC   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09AD   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09AE   0080           01734                 movwf INDF                      ;Save to QUEUE
09AF   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01736                 count = count + 1
09B0   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09B1   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09B2   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09B3   0080           01729                 movwf INDF                      ;Save to QUEUE
09B4   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09B5   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09B6   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09B7   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09B8   0080           01734                 movwf INDF                      ;Save to QUEUE
09B9   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01736                 count = count + 1
09BA   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09BB   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09BC   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09BD   0080           01729                 movwf INDF                      ;Save to QUEUE
09BE   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09BF   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09C0   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09C1   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09C2   0080           01734                 movwf INDF                      ;Save to QUEUE
09C3   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01736                 count = count + 1
09C4   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09C5   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09C6   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09C7   0080           01729                 movwf INDF                      ;Save to QUEUE
09C8   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09C9   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09CA   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09CB   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09CC   0080           01734                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09CD   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01736                 count = count + 1
09CE   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09CF   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09D0   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09D1   0080           01729                 movwf INDF                      ;Save to QUEUE
09D2   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09D3   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09D4   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09D5   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09D6   0080           01734                 movwf INDF                      ;Save to QUEUE
09D7   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01736                 count = count + 1
09D8   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09D9   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09DA   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09DB   0080           01729                 movwf INDF                      ;Save to QUEUE
09DC   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09DD   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09DE   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09DF   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09E0   0080           01734                 movwf INDF                      ;Save to QUEUE
09E1   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01736                 count = count + 1
09E2   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09E3   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09E4   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09E5   0080           01729                 movwf INDF                      ;Save to QUEUE
09E6   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09E7   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09E8   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09E9   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09EA   0080           01734                 movwf INDF                      ;Save to QUEUE
09EB   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01736                 count = count + 1
09EC   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09ED   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09EE   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09EF   0080           01729                 movwf INDF                      ;Save to QUEUE
09F0   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09F1   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09F2   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
09F3   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09F4   0080           01734                 movwf INDF                      ;Save to QUEUE
09F5   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01736                 count = count + 1
09F6   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09F7   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
09F8   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
09F9   0080           01729                 movwf INDF                      ;Save to QUEUE
09FA   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
09FB   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
09FC   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09FD   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
09FE   0080           01734                 movwf INDF                      ;Save to QUEUE
09FF   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01736                 count = count + 1
0A00   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A01   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A02   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A03   0080           01729                 movwf INDF                      ;Save to QUEUE
0A04   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A05   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A06   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A07   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A08   0080           01734                 movwf INDF                      ;Save to QUEUE
0A09   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01736                 count = count + 1
0A0A   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A0B   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A0C   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A0D   0080           01729                 movwf INDF                      ;Save to QUEUE
0A0E   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A0F   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A10   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A11   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A12   0080           01734                 movwf INDF                      ;Save to QUEUE
0A13   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01736                 count = count + 1
0A14   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A15   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A16   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A17   0080           01729                 movwf INDF                      ;Save to QUEUE
0A18   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A19   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A1A   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A1B   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A1C   0080           01734                 movwf INDF                      ;Save to QUEUE
0A1D   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01736                 count = count + 1
0A1E   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A1F   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A20   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A21   0080           01729                 movwf INDF                      ;Save to QUEUE
0A22   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A23   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A24   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A25   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A26   0080           01734                 movwf INDF                      ;Save to QUEUE
0A27   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01736                 count = count + 1
0A28   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A29   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A2A   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A2B   0080           01729                 movwf INDF                      ;Save to QUEUE
0A2C   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A2D   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A2E   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A2F   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A30   0080           01734                 movwf INDF                      ;Save to QUEUE
0A31   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01736                 count = count + 1
0A32   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A33   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A34   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A35   0080           01729                 movwf INDF                      ;Save to QUEUE
0A36   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A37   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A38   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A39   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A3A   0080           01734                 movwf INDF                      ;Save to QUEUE
0A3B   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01736                 count = count + 1
0A3C   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A3D   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A3E   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A3F   0080           01729                 movwf INDF                      ;Save to QUEUE
0A40   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A41   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A42   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A43   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A44   0080           01734                 movwf INDF                      ;Save to QUEUE
0A45   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01736                 count = count + 1
0A46   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A47   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A48   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A49   0080           01729                 movwf INDF                      ;Save to QUEUE
0A4A   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A4B   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A4C   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A4D   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A4E   0080           01734                 movwf INDF                      ;Save to QUEUE
0A4F   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01736                 count = count + 1
0A50   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A51   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A52   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A53   0080           01729                 movwf INDF                      ;Save to QUEUE
0A54   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A55   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A56   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A57   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A58   0080           01734                 movwf INDF                      ;Save to QUEUE
0A59   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01736                 count = count + 1
0A5A   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A5B   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A5C   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A5D   0080           01729                 movwf INDF                      ;Save to QUEUE
0A5E   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A5F   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A60   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A61   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A62   0080           01734                 movwf INDF                      ;Save to QUEUE
0A63   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01736                 count = count + 1
0A64   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A65   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A66   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A67   0080           01729                 movwf INDF                      ;Save to QUEUE
0A68   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A69   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A6A   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A6B   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A6C   0080           01734                 movwf INDF                      ;Save to QUEUE
0A6D   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01736                 count = count + 1
0A6E   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A6F   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A70   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A71   0080           01729                 movwf INDF                      ;Save to QUEUE
0A72   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A73   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A74   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A75   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A76   0080           01734                 movwf INDF                      ;Save to QUEUE
0A77   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01736                 count = count + 1
0A78   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A79   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A7A   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A7B   0080           01729                 movwf INDF                      ;Save to QUEUE
0A7C   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A7D   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A7E   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A7F   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A80   0080           01734                 movwf INDF                      ;Save to QUEUE
0A81   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01736                 count = count + 1
0A82   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A83   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A84   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A85   0080           01729                 movwf INDF                      ;Save to QUEUE
0A86   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A87   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A88   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A89   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A8A   0080           01734                 movwf INDF                      ;Save to QUEUE
0A8B   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01736                 count = count + 1
0A8C   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A8D   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A8E   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A8F   0080           01729                 movwf INDF                      ;Save to QUEUE
0A90   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A91   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A92   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A93   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A94   0080           01734                 movwf INDF                      ;Save to QUEUE
0A95   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01736                 count = count + 1
0A96   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A97   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0A98   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0A99   0080           01729                 movwf INDF                      ;Save to QUEUE
0A9A   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0A9B   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0A9C   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0A9D   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0A9E   0080           01734                 movwf INDF                      ;Save to QUEUE
0A9F   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01736                 count = count + 1
0AA0   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AA1   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AA2   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0AA3   0080           01729                 movwf INDF                      ;Save to QUEUE
0AA4   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0AA5   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AA6   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AA7   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0AA8   0080           01734                 movwf INDF                      ;Save to QUEUE
0AA9   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01736                 count = count + 1
0AAA   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AAB   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AAC   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0AAD   0080           01729                 movwf INDF                      ;Save to QUEUE
0AAE   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0AAF   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AB0   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AB1   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0AB2   0080           01734                 movwf INDF                      ;Save to QUEUE
0AB3   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01736                 count = count + 1
0AB4   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AB5   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AB6   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0AB7   0080           01729                 movwf INDF                      ;Save to QUEUE
0AB8   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0AB9   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0ABA   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0ABB   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0ABC   0080           01734                 movwf INDF                      ;Save to QUEUE
0ABD   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001E            01736                 count = count + 1
0ABE   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0ABF   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AC0   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0AC1   0080           01729                 movwf INDF                      ;Save to QUEUE
0AC2   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0AC3   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AC4   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AC5   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0AC6   0080           01734                 movwf INDF                      ;Save to QUEUE
0AC7   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01736                 count = count + 1
0AC8   0389           01726                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AC9   0389           01727                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0ACA   0808           01728                 movf ADC_DATAPORT, W            ;Sample Y
0ACB   0080           01729                 movwf INDF                      ;Save to QUEUE
0ACC   0A84           01730                 incf FSR, F                     ;Increment QUEUE pointer
0ACD   0389           01731                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0ACE   0389           01732                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0ACF   0808           01733                 movf ADC_DATAPORT, W            ;Sample X
0AD0   0080           01734                 movwf INDF                      ;Save to QUEUE
0AD1   0A84           01735                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01736                 count = count + 1
                      01737         endw
0AD2   0389           01738         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AD3   0389           01739         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AD4   0808           01740     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
0AD5   0080           01741     movwf INDF                      ;Save to QUEUE
0AD6   1784           01742         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0AD7   0389           01743         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AD8   0389           01744         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AD9   0808           01745     movf ADC_DATAPORT, W            ;Sample X
0ADA   0080           01746     movwf INDF                      ;Save to QUEUE
0ADB   0384           01747         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01748     count = 1
                      01749     while count < BUFFERSIZE / 2
0ADC   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0ADD   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0ADE   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0ADF   0080           01753                 movwf INDF                      ;Save to QUEUE
0AE0   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0AE1   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AE2   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AE3   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0AE4   0080           01758                 movwf INDF                      ;Save to QUEUE
0AE5   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01760                 count = count + 1
0AE6   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AE7   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AE8   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0AE9   0080           01753                 movwf INDF                      ;Save to QUEUE
0AEA   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0AEB   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AEC   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AED   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0AEE   0080           01758                 movwf INDF                      ;Save to QUEUE
0AEF   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01760                 count = count + 1
0AF0   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AF1   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AF2   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0AF3   0080           01753                 movwf INDF                      ;Save to QUEUE
0AF4   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0AF5   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AF6   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0AF7   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0AF8   0080           01758                 movwf INDF                      ;Save to QUEUE
0AF9   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01760                 count = count + 1
0AFA   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0AFB   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0AFC   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0AFD   0080           01753                 movwf INDF                      ;Save to QUEUE
0AFE   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0AFF   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B00   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B01   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B02   0080           01758                 movwf INDF                      ;Save to QUEUE
0B03   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01760                 count = count + 1
0B04   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B05   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B06   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B07   0080           01753                 movwf INDF                      ;Save to QUEUE
0B08   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B09   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B0A   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B0B   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B0C   0080           01758                 movwf INDF                      ;Save to QUEUE
0B0D   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01760                 count = count + 1
0B0E   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B0F   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B10   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B11   0080           01753                 movwf INDF                      ;Save to QUEUE
0B12   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B13   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B14   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B15   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B16   0080           01758                 movwf INDF                      ;Save to QUEUE
0B17   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01760                 count = count + 1
0B18   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B19   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B1A   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B1B   0080           01753                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B1C   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B1D   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B1E   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B1F   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B20   0080           01758                 movwf INDF                      ;Save to QUEUE
0B21   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01760                 count = count + 1
0B22   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B23   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B24   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B25   0080           01753                 movwf INDF                      ;Save to QUEUE
0B26   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B27   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B28   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B29   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B2A   0080           01758                 movwf INDF                      ;Save to QUEUE
0B2B   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01760                 count = count + 1
0B2C   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B2D   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B2E   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B2F   0080           01753                 movwf INDF                      ;Save to QUEUE
0B30   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B31   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B32   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B33   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B34   0080           01758                 movwf INDF                      ;Save to QUEUE
0B35   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01760                 count = count + 1
0B36   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B37   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B38   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B39   0080           01753                 movwf INDF                      ;Save to QUEUE
0B3A   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B3B   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B3C   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B3D   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B3E   0080           01758                 movwf INDF                      ;Save to QUEUE
0B3F   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01760                 count = count + 1
0B40   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B41   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B42   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B43   0080           01753                 movwf INDF                      ;Save to QUEUE
0B44   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B45   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B46   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B47   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B48   0080           01758                 movwf INDF                      ;Save to QUEUE
0B49   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01760                 count = count + 1
0B4A   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B4B   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B4C   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B4D   0080           01753                 movwf INDF                      ;Save to QUEUE
0B4E   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B4F   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B50   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B51   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B52   0080           01758                 movwf INDF                      ;Save to QUEUE
0B53   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01760                 count = count + 1
0B54   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B55   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B56   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B57   0080           01753                 movwf INDF                      ;Save to QUEUE
0B58   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B59   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B5A   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B5B   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B5C   0080           01758                 movwf INDF                      ;Save to QUEUE
0B5D   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01760                 count = count + 1
0B5E   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B5F   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B60   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B61   0080           01753                 movwf INDF                      ;Save to QUEUE
0B62   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B63   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B64   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B65   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B66   0080           01758                 movwf INDF                      ;Save to QUEUE
0B67   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01760                 count = count + 1
0B68   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B69   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B6A   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B6B   0080           01753                 movwf INDF                      ;Save to QUEUE
0B6C   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B6D   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B6E   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B6F   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B70   0080           01758                 movwf INDF                      ;Save to QUEUE
0B71   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01760                 count = count + 1
0B72   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B73   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B74   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B75   0080           01753                 movwf INDF                      ;Save to QUEUE
0B76   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B77   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B78   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B79   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B7A   0080           01758                 movwf INDF                      ;Save to QUEUE
0B7B   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01760                 count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B7C   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B7D   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B7E   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B7F   0080           01753                 movwf INDF                      ;Save to QUEUE
0B80   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B81   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B82   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B83   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B84   0080           01758                 movwf INDF                      ;Save to QUEUE
0B85   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01760                 count = count + 1
0B86   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B87   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B88   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B89   0080           01753                 movwf INDF                      ;Save to QUEUE
0B8A   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B8B   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B8C   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B8D   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B8E   0080           01758                 movwf INDF                      ;Save to QUEUE
0B8F   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01760                 count = count + 1
0B90   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B91   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B92   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B93   0080           01753                 movwf INDF                      ;Save to QUEUE
0B94   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B95   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B96   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0B97   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0B98   0080           01758                 movwf INDF                      ;Save to QUEUE
0B99   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01760                 count = count + 1
0B9A   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0B9B   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0B9C   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0B9D   0080           01753                 movwf INDF                      ;Save to QUEUE
0B9E   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0B9F   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BA0   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BA1   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BA2   0080           01758                 movwf INDF                      ;Save to QUEUE
0BA3   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01760                 count = count + 1
0BA4   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BA5   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BA6   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BA7   0080           01753                 movwf INDF                      ;Save to QUEUE
0BA8   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BA9   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BAA   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BAB   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BAC   0080           01758                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BAD   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01760                 count = count + 1
0BAE   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BAF   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BB0   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BB1   0080           01753                 movwf INDF                      ;Save to QUEUE
0BB2   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BB3   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BB4   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BB5   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BB6   0080           01758                 movwf INDF                      ;Save to QUEUE
0BB7   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01760                 count = count + 1
0BB8   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BB9   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BBA   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BBB   0080           01753                 movwf INDF                      ;Save to QUEUE
0BBC   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BBD   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BBE   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BBF   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BC0   0080           01758                 movwf INDF                      ;Save to QUEUE
0BC1   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01760                 count = count + 1
0BC2   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BC3   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BC4   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BC5   0080           01753                 movwf INDF                      ;Save to QUEUE
0BC6   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BC7   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BC8   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BC9   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BCA   0080           01758                 movwf INDF                      ;Save to QUEUE
0BCB   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01760                 count = count + 1
0BCC   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BCD   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BCE   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BCF   0080           01753                 movwf INDF                      ;Save to QUEUE
0BD0   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BD1   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BD2   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BD3   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BD4   0080           01758                 movwf INDF                      ;Save to QUEUE
0BD5   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01760                 count = count + 1
0BD6   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BD7   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BD8   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BD9   0080           01753                 movwf INDF                      ;Save to QUEUE
0BDA   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BDB   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BDC   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BDD   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BDE   0080           01758                 movwf INDF                      ;Save to QUEUE
0BDF   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01760                 count = count + 1
0BE0   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BE1   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BE2   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BE3   0080           01753                 movwf INDF                      ;Save to QUEUE
0BE4   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BE5   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BE6   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BE7   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BE8   0080           01758                 movwf INDF                      ;Save to QUEUE
0BE9   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01760                 count = count + 1
0BEA   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BEB   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BEC   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BED   0080           01753                 movwf INDF                      ;Save to QUEUE
0BEE   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BEF   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BF0   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BF1   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BF2   0080           01758                 movwf INDF                      ;Save to QUEUE
0BF3   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01760                 count = count + 1
0BF4   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BF5   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0BF6   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0BF7   0080           01753                 movwf INDF                      ;Save to QUEUE
0BF8   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0BF9   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BFA   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0BFB   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0BFC   0080           01758                 movwf INDF                      ;Save to QUEUE
0BFD   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01760                 count = count + 1
0BFE   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0BFF   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C00   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0C01   0080           01753                 movwf INDF                      ;Save to QUEUE
0C02   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
0C03   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C04   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C05   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0C06   0080           01758                 movwf INDF                      ;Save to QUEUE
0C07   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01760                 count = count + 1
0C08   0389           01750                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C09   0389           01751                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C0A   0808           01752                 movf ADC_DATAPORT, W            ;Sample Y
0C0B   0080           01753                 movwf INDF                      ;Save to QUEUE
0C0C   0384           01754                 decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C0D   0389           01755                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C0E   0389           01756                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C0F   0808           01757                 movf ADC_DATAPORT, W            ;Sample X
0C10   0080           01758                 movwf INDF                      ;Save to QUEUE
0C11   0384           01759                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01760                 count = count + 1
                      01761         endw
0C12   0389           01762         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C13   0389           01763         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C14   0808           01764     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
0C15   0080           01765     movwf INDF                      ;Save to QUEUE
0C16   1783           01766         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
0C17   0389           01767         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C18   0389           01768         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C19   0808           01769     movf ADC_DATAPORT, W            ;Sample X
0C1A   0080           01770     movwf INDF                      ;Save to QUEUE
0C1B   0A84           01771         incf FSR, f                                             ;Increment QUEUE pointer
  00000001            01772     count = 1
                      01773     while count < BUFFERSIZE / 2
0C1C   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C1D   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C1E   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C1F   0080           01777                 movwf INDF                      ;Save to QUEUE
0C20   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C21   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C22   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C23   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C24   0080           01782                 movwf INDF                      ;Save to QUEUE
0C25   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01784                 count = count + 1
0C26   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C27   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C28   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C29   0080           01777                 movwf INDF                      ;Save to QUEUE
0C2A   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C2B   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C2C   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C2D   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C2E   0080           01782                 movwf INDF                      ;Save to QUEUE
0C2F   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01784                 count = count + 1
0C30   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C31   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C32   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C33   0080           01777                 movwf INDF                      ;Save to QUEUE
0C34   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C35   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C36   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C37   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C38   0080           01782                 movwf INDF                      ;Save to QUEUE
0C39   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01784                 count = count + 1
0C3A   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C3B   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C3C   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C3D   0080           01777                 movwf INDF                      ;Save to QUEUE
0C3E   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C3F   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C40   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C41   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C42   0080           01782                 movwf INDF                      ;Save to QUEUE
0C43   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01784                 count = count + 1
0C44   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C45   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C46   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C47   0080           01777                 movwf INDF                      ;Save to QUEUE
0C48   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C49   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C4A   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C4B   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C4C   0080           01782                 movwf INDF                      ;Save to QUEUE
0C4D   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01784                 count = count + 1
0C4E   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C4F   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C50   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C51   0080           01777                 movwf INDF                      ;Save to QUEUE
0C52   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C53   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C54   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C55   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C56   0080           01782                 movwf INDF                      ;Save to QUEUE
0C57   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01784                 count = count + 1
0C58   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C59   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C5A   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C5B   0080           01777                 movwf INDF                      ;Save to QUEUE
0C5C   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C5D   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C5E   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C5F   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C60   0080           01782                 movwf INDF                      ;Save to QUEUE
0C61   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01784                 count = count + 1
0C62   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C63   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C64   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C65   0080           01777                 movwf INDF                      ;Save to QUEUE
0C66   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C67   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C68   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C69   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C6A   0080           01782                 movwf INDF                      ;Save to QUEUE
0C6B   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000009            01784                 count = count + 1
0C6C   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C6D   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C6E   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C6F   0080           01777                 movwf INDF                      ;Save to QUEUE
0C70   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C71   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C72   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C73   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C74   0080           01782                 movwf INDF                      ;Save to QUEUE
0C75   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01784                 count = count + 1
0C76   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C77   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C78   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C79   0080           01777                 movwf INDF                      ;Save to QUEUE
0C7A   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C7B   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C7C   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C7D   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C7E   0080           01782                 movwf INDF                      ;Save to QUEUE
0C7F   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01784                 count = count + 1
0C80   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C81   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C82   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C83   0080           01777                 movwf INDF                      ;Save to QUEUE
0C84   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C85   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C86   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C87   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C88   0080           01782                 movwf INDF                      ;Save to QUEUE
0C89   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01784                 count = count + 1
0C8A   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C8B   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C8C   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C8D   0080           01777                 movwf INDF                      ;Save to QUEUE
0C8E   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C8F   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C90   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C91   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0C92   0080           01782                 movwf INDF                      ;Save to QUEUE
0C93   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01784                 count = count + 1
0C94   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C95   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0C96   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0C97   0080           01777                 movwf INDF                      ;Save to QUEUE
0C98   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0C99   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C9A   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0C9B   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C9C   0080           01782                 movwf INDF                      ;Save to QUEUE
0C9D   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01784                 count = count + 1
0C9E   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0C9F   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CA0   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CA1   0080           01777                 movwf INDF                      ;Save to QUEUE
0CA2   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CA3   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CA4   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CA5   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CA6   0080           01782                 movwf INDF                      ;Save to QUEUE
0CA7   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01784                 count = count + 1
0CA8   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CA9   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CAA   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CAB   0080           01777                 movwf INDF                      ;Save to QUEUE
0CAC   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CAD   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CAE   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CAF   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CB0   0080           01782                 movwf INDF                      ;Save to QUEUE
0CB1   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01784                 count = count + 1
0CB2   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CB3   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CB4   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CB5   0080           01777                 movwf INDF                      ;Save to QUEUE
0CB6   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CB7   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CB8   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CB9   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CBA   0080           01782                 movwf INDF                      ;Save to QUEUE
0CBB   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01784                 count = count + 1
0CBC   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CBD   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CBE   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CBF   0080           01777                 movwf INDF                      ;Save to QUEUE
0CC0   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CC1   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CC2   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CC3   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CC4   0080           01782                 movwf INDF                      ;Save to QUEUE
0CC5   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01784                 count = count + 1
0CC6   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CC7   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CC8   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CC9   0080           01777                 movwf INDF                      ;Save to QUEUE
0CCA   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CCB   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CCC   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CCD   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CCE   0080           01782                 movwf INDF                      ;Save to QUEUE
0CCF   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01784                 count = count + 1
0CD0   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CD1   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CD2   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CD3   0080           01777                 movwf INDF                      ;Save to QUEUE
0CD4   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CD5   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CD6   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CD7   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CD8   0080           01782                 movwf INDF                      ;Save to QUEUE
0CD9   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01784                 count = count + 1
0CDA   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CDB   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CDC   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CDD   0080           01777                 movwf INDF                      ;Save to QUEUE
0CDE   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CDF   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CE0   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CE1   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CE2   0080           01782                 movwf INDF                      ;Save to QUEUE
0CE3   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01784                 count = count + 1
0CE4   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CE5   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CE6   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CE7   0080           01777                 movwf INDF                      ;Save to QUEUE
0CE8   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CE9   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CEA   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CEB   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CEC   0080           01782                 movwf INDF                      ;Save to QUEUE
0CED   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01784                 count = count + 1
0CEE   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CEF   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CF0   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CF1   0080           01777                 movwf INDF                      ;Save to QUEUE
0CF2   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CF3   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CF4   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CF5   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0CF6   0080           01782                 movwf INDF                      ;Save to QUEUE
0CF7   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01784                 count = count + 1
0CF8   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CF9   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0CFA   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0CFB   0080           01777                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CFC   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0CFD   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0CFE   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0CFF   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D00   0080           01782                 movwf INDF                      ;Save to QUEUE
0D01   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01784                 count = count + 1
0D02   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D03   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D04   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D05   0080           01777                 movwf INDF                      ;Save to QUEUE
0D06   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D07   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D08   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D09   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D0A   0080           01782                 movwf INDF                      ;Save to QUEUE
0D0B   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01784                 count = count + 1
0D0C   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D0D   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D0E   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D0F   0080           01777                 movwf INDF                      ;Save to QUEUE
0D10   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D11   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D12   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D13   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D14   0080           01782                 movwf INDF                      ;Save to QUEUE
0D15   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01784                 count = count + 1
0D16   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D17   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D18   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D19   0080           01777                 movwf INDF                      ;Save to QUEUE
0D1A   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D1B   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D1C   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D1D   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D1E   0080           01782                 movwf INDF                      ;Save to QUEUE
0D1F   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01784                 count = count + 1
0D20   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D21   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D22   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D23   0080           01777                 movwf INDF                      ;Save to QUEUE
0D24   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D25   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D26   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D27   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D28   0080           01782                 movwf INDF                      ;Save to QUEUE
0D29   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01784                 count = count + 1
0D2A   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D2B   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D2C   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D2D   0080           01777                 movwf INDF                      ;Save to QUEUE
0D2E   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D2F   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D30   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D31   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D32   0080           01782                 movwf INDF                      ;Save to QUEUE
0D33   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01784                 count = count + 1
0D34   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D35   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D36   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D37   0080           01777                 movwf INDF                      ;Save to QUEUE
0D38   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D39   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D3A   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D3B   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D3C   0080           01782                 movwf INDF                      ;Save to QUEUE
0D3D   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01784                 count = count + 1
0D3E   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D3F   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D40   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D41   0080           01777                 movwf INDF                      ;Save to QUEUE
0D42   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D43   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D44   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D45   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D46   0080           01782                 movwf INDF                      ;Save to QUEUE
0D47   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01784                 count = count + 1
0D48   0389           01774                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D49   0389           01775                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D4A   0808           01776                 movf ADC_DATAPORT, W            ;Sample Y
0D4B   0080           01777                 movwf INDF                      ;Save to QUEUE
0D4C   0A84           01778                 incf FSR, F                     ;Increment QUEUE pointer
0D4D   0389           01779                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D4E   0389           01780                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D4F   0808           01781                 movf ADC_DATAPORT, W            ;Sample X
0D50   0080           01782                 movwf INDF                      ;Save to QUEUE
0D51   0A84           01783                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01784                 count = count + 1
                      01785         endw
0D52   0389           01786         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D53   0389           01787         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D54   0808           01788     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
0D55   0080           01789     movwf INDF                      ;Save to QUEUE
0D56   1384           01790         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
0D57   0389           01791         decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D58   0389           01792         decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D59   0808           01793     movf ADC_DATAPORT, W            ;Sample X
0D5A   0080           01794     movwf INDF                      ;Save to QUEUE
0D5B   0384           01795         decf FSR, f                                             ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            01796     count = 1
                      01797     while count < BUFFERSIZE / 2
0D5C   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D5D   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D5E   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D5F   0080           01801                 movwf INDF                      ;Save to QUEUE
0D60   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D61   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D62   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D63   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D64   0080           01806                 movwf INDF                      ;Save to QUEUE
0D65   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01808                 count = count + 1
0D66   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D67   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D68   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D69   0080           01801                 movwf INDF                      ;Save to QUEUE
0D6A   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D6B   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D6C   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D6D   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D6E   0080           01806                 movwf INDF                      ;Save to QUEUE
0D6F   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01808                 count = count + 1
0D70   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D71   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D72   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D73   0080           01801                 movwf INDF                      ;Save to QUEUE
0D74   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D75   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D76   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D77   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D78   0080           01806                 movwf INDF                      ;Save to QUEUE
0D79   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01808                 count = count + 1
0D7A   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D7B   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D7C   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D7D   0080           01801                 movwf INDF                      ;Save to QUEUE
0D7E   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D7F   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D80   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D81   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D82   0080           01806                 movwf INDF                      ;Save to QUEUE
0D83   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01808                 count = count + 1
0D84   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D85   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D86   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D87   0080           01801                 movwf INDF                      ;Save to QUEUE
0D88   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D89   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D8A   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D8B   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D8C   0080           01806                 movwf INDF                      ;Save to QUEUE
0D8D   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01808                 count = count + 1
0D8E   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D8F   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D90   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D91   0080           01801                 movwf INDF                      ;Save to QUEUE
0D92   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D93   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D94   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D95   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0D96   0080           01806                 movwf INDF                      ;Save to QUEUE
0D97   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01808                 count = count + 1
0D98   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D99   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0D9A   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0D9B   0080           01801                 movwf INDF                      ;Save to QUEUE
0D9C   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0D9D   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0D9E   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0D9F   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DA0   0080           01806                 movwf INDF                      ;Save to QUEUE
0DA1   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01808                 count = count + 1
0DA2   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DA3   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DA4   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DA5   0080           01801                 movwf INDF                      ;Save to QUEUE
0DA6   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DA7   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DA8   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DA9   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DAA   0080           01806                 movwf INDF                      ;Save to QUEUE
0DAB   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01808                 count = count + 1
0DAC   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DAD   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DAE   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DAF   0080           01801                 movwf INDF                      ;Save to QUEUE
0DB0   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DB1   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DB2   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DB3   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DB4   0080           01806                 movwf INDF                      ;Save to QUEUE
0DB5   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01808                 count = count + 1
0DB6   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DB7   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DB8   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DB9   0080           01801                 movwf INDF                      ;Save to QUEUE
0DBA   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0DBB   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DBC   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DBD   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DBE   0080           01806                 movwf INDF                      ;Save to QUEUE
0DBF   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01808                 count = count + 1
0DC0   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DC1   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DC2   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DC3   0080           01801                 movwf INDF                      ;Save to QUEUE
0DC4   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DC5   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DC6   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DC7   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DC8   0080           01806                 movwf INDF                      ;Save to QUEUE
0DC9   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01808                 count = count + 1
0DCA   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DCB   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DCC   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DCD   0080           01801                 movwf INDF                      ;Save to QUEUE
0DCE   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DCF   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DD0   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DD1   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DD2   0080           01806                 movwf INDF                      ;Save to QUEUE
0DD3   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01808                 count = count + 1
0DD4   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DD5   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DD6   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DD7   0080           01801                 movwf INDF                      ;Save to QUEUE
0DD8   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DD9   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DDA   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DDB   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DDC   0080           01806                 movwf INDF                      ;Save to QUEUE
0DDD   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01808                 count = count + 1
0DDE   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DDF   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DE0   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DE1   0080           01801                 movwf INDF                      ;Save to QUEUE
0DE2   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DE3   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DE4   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DE5   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DE6   0080           01806                 movwf INDF                      ;Save to QUEUE
0DE7   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01808                 count = count + 1
0DE8   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DE9   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DEA   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0DEB   0080           01801                 movwf INDF                      ;Save to QUEUE
0DEC   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DED   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DEE   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DEF   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DF0   0080           01806                 movwf INDF                      ;Save to QUEUE
0DF1   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01808                 count = count + 1
0DF2   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DF3   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DF4   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DF5   0080           01801                 movwf INDF                      ;Save to QUEUE
0DF6   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0DF7   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DF8   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0DF9   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0DFA   0080           01806                 movwf INDF                      ;Save to QUEUE
0DFB   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01808                 count = count + 1
0DFC   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0DFD   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0DFE   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0DFF   0080           01801                 movwf INDF                      ;Save to QUEUE
0E00   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E01   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E02   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E03   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E04   0080           01806                 movwf INDF                      ;Save to QUEUE
0E05   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01808                 count = count + 1
0E06   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E07   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E08   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E09   0080           01801                 movwf INDF                      ;Save to QUEUE
0E0A   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E0B   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E0C   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E0D   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E0E   0080           01806                 movwf INDF                      ;Save to QUEUE
0E0F   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01808                 count = count + 1
0E10   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E11   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E12   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E13   0080           01801                 movwf INDF                      ;Save to QUEUE
0E14   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E15   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E16   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E17   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E18   0080           01806                 movwf INDF                      ;Save to QUEUE
0E19   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01808                 count = count + 1
0E1A   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E1B   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E1C   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E1D   0080           01801                 movwf INDF                      ;Save to QUEUE
0E1E   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E1F   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E20   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E21   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E22   0080           01806                 movwf INDF                      ;Save to QUEUE
0E23   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01808                 count = count + 1
0E24   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E25   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E26   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E27   0080           01801                 movwf INDF                      ;Save to QUEUE
0E28   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E29   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E2A   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E2B   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E2C   0080           01806                 movwf INDF                      ;Save to QUEUE
0E2D   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01808                 count = count + 1
0E2E   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E2F   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E30   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E31   0080           01801                 movwf INDF                      ;Save to QUEUE
0E32   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E33   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E34   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E35   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E36   0080           01806                 movwf INDF                      ;Save to QUEUE
0E37   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01808                 count = count + 1
0E38   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E39   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E3A   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E3B   0080           01801                 movwf INDF                      ;Save to QUEUE
0E3C   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E3D   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E3E   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E3F   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E40   0080           01806                 movwf INDF                      ;Save to QUEUE
0E41   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01808                 count = count + 1
0E42   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E43   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E44   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E45   0080           01801                 movwf INDF                      ;Save to QUEUE
0E46   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E47   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E48   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E49   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E4A   0080           01806                 movwf INDF                      ;Save to QUEUE
0E4B   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000019            01808                 count = count + 1
0E4C   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E4D   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E4E   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E4F   0080           01801                 movwf INDF                      ;Save to QUEUE
0E50   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E51   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E52   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E53   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E54   0080           01806                 movwf INDF                      ;Save to QUEUE
0E55   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01808                 count = count + 1
0E56   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E57   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E58   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E59   0080           01801                 movwf INDF                      ;Save to QUEUE
0E5A   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E5B   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E5C   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E5D   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E5E   0080           01806                 movwf INDF                      ;Save to QUEUE
0E5F   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01808                 count = count + 1
0E60   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E61   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E62   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E63   0080           01801                 movwf INDF                      ;Save to QUEUE
0E64   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E65   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E66   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E67   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E68   0080           01806                 movwf INDF                      ;Save to QUEUE
0E69   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01808                 count = count + 1
0E6A   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E6B   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E6C   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E6D   0080           01801                 movwf INDF                      ;Save to QUEUE
0E6E   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E6F   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E70   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E71   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E72   0080           01806                 movwf INDF                      ;Save to QUEUE
0E73   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01808                 count = count + 1
0E74   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E75   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E76   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E77   0080           01801                 movwf INDF                      ;Save to QUEUE
0E78   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E79   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E7A   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E7B   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E7C   0080           01806                 movwf INDF                      ;Save to QUEUE
0E7D   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01808                 count = count + 1
0E7E   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E7F   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E80   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E81   0080           01801                 movwf INDF                      ;Save to QUEUE
0E82   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E83   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E84   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E85   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E86   0080           01806                 movwf INDF                      ;Save to QUEUE
0E87   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01808                 count = count + 1
0E88   0389           01798                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E89   0389           01799                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to Y
0E8A   0808           01800                 movf ADC_DATAPORT, W            ;Sample Y
0E8B   0080           01801                 movwf INDF                      ;Save to QUEUE
0E8C   0384           01802                 decf FSR, F                     ;Increment QUEUE pointer
0E8D   0389           01803                 decf ADC_CONTROLPORT, f                 ;Stop Conversion
0E8E   0389           01804                 decf ADC_CONTROLPORT, f                 ;Begin next conversion and set channel to X
0E8F   0808           01805                 movf ADC_DATAPORT, W            ;Sample X
0E90   0080           01806                 movwf INDF                      ;Save to QUEUE
0E91   0384           01807                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01808                 count = count + 1
                      01809         endw
0E92   0808           01810     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
0E93   1409           01811     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
                      01812         MGOTO ADCShutdown
                          M         MGOTOSETUP ADCShutdown
                          M         if (ADCShutdown & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0E94   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (ADCShutdown & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0E95   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0E96   29A0               M         goto ADCShutdown
                      01813 
                      01814 ;Fastest XY sample
                      01815 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      01816 ;Sampling rate =  83.333 kHz with 4 MHz clock
                      01817 ;-----------------------------------------------------------------------------
0E97                  01818 SampleXY417k
0E97   1009           01819     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0E98   1489           01820     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01821     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0E99   3020               M     movlw BUFFERMIN
0E9A   0084               M     movwf FSR
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E9B   0808           01822     movf ADC_DATAPORT, W            ;Sample X
0E9C   1409           01823         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E9D   1009           01824         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E9E   1089           01825     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E9F   0080           01826     movwf INDF                      ;Save to QUEUE
0EA0   0A84           01827     incf FSR, F                     ;Increment QUEUE pointer
  00000001            01828     count = 1
                      01829     while count < BUFFERSIZE / 2
0EA1   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EA2   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA3   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EA4   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EA5   0080           01834                 movwf INDF                      ;Save to QUEUE
0EA6   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EA7   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0EA8   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA9   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EAA   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EAB   0080           01840                 movwf INDF                      ;Save to QUEUE
0EAC   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01842                 count = count + 1
0EAD   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EAE   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EAF   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EB0   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EB1   0080           01834                 movwf INDF                      ;Save to QUEUE
0EB2   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EB3   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0EB4   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EB5   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EB6   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EB7   0080           01840                 movwf INDF                      ;Save to QUEUE
0EB8   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01842                 count = count + 1
0EB9   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EBA   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EBB   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EBC   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EBD   0080           01834                 movwf INDF                      ;Save to QUEUE
0EBE   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EBF   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0EC0   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EC1   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EC2   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EC3   0080           01840                 movwf INDF                      ;Save to QUEUE
0EC4   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01842                 count = count + 1
0EC5   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EC6   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EC7   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EC8   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EC9   0080           01834                 movwf INDF                      ;Save to QUEUE
0ECA   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0ECB   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0ECC   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ECD   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ECE   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ECF   0080           01840                 movwf INDF                      ;Save to QUEUE
0ED0   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01842                 count = count + 1
0ED1   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0ED2   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED3   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ED4   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ED5   0080           01834                 movwf INDF                      ;Save to QUEUE
0ED6   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0ED7   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0ED8   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED9   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EDA   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EDB   0080           01840                 movwf INDF                      ;Save to QUEUE
0EDC   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01842                 count = count + 1
0EDD   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EDE   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EDF   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EE0   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EE1   0080           01834                 movwf INDF                      ;Save to QUEUE
0EE2   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EE3   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0EE4   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EE5   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EE6   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EE7   0080           01840                 movwf INDF                      ;Save to QUEUE
0EE8   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01842                 count = count + 1
0EE9   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EEA   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EEB   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EEC   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EED   0080           01834                 movwf INDF                      ;Save to QUEUE
0EEE   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EEF   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0EF0   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EF1   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EF2   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EF3   0080           01840                 movwf INDF                      ;Save to QUEUE
0EF4   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01842                 count = count + 1
0EF5   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0EF6   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EF7   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EF8   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EF9   0080           01834                 movwf INDF                      ;Save to QUEUE
0EFA   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0EFB   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EFC   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EFD   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EFE   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EFF   0080           01840                 movwf INDF                      ;Save to QUEUE
0F00   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01842                 count = count + 1
0F01   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F02   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F03   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F04   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F05   0080           01834                 movwf INDF                      ;Save to QUEUE
0F06   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F07   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F08   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F09   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F0A   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F0B   0080           01840                 movwf INDF                      ;Save to QUEUE
0F0C   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01842                 count = count + 1
0F0D   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F0E   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F0F   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F10   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F11   0080           01834                 movwf INDF                      ;Save to QUEUE
0F12   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F13   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F14   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F15   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F16   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F17   0080           01840                 movwf INDF                      ;Save to QUEUE
0F18   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01842                 count = count + 1
0F19   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F1A   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F1B   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F1C   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F1D   0080           01834                 movwf INDF                      ;Save to QUEUE
0F1E   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F1F   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F20   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F21   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F22   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F23   0080           01840                 movwf INDF                      ;Save to QUEUE
0F24   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01842                 count = count + 1
0F25   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F26   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F27   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F28   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F29   0080           01834                 movwf INDF                      ;Save to QUEUE
0F2A   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F2B   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F2C   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F2D   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F2E   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F2F   0080           01840                 movwf INDF                      ;Save to QUEUE
0F30   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01842                 count = count + 1
0F31   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F32   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F33   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F34   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F35   0080           01834                 movwf INDF                      ;Save to QUEUE
0F36   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F37   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F38   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F39   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F3A   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F3B   0080           01840                 movwf INDF                      ;Save to QUEUE
0F3C   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01842                 count = count + 1
0F3D   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F3E   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F3F   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F40   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F41   0080           01834                 movwf INDF                      ;Save to QUEUE
0F42   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F43   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F44   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F45   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F46   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F47   0080           01840                 movwf INDF                      ;Save to QUEUE
0F48   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01842                 count = count + 1
0F49   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F4A   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F4B   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F4C   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F4D   0080           01834                 movwf INDF                      ;Save to QUEUE
0F4E   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F4F   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F50   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F51   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F52   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F53   0080           01840                 movwf INDF                      ;Save to QUEUE
0F54   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01842                 count = count + 1
0F55   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F56   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F57   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F58   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F59   0080           01834                 movwf INDF                      ;Save to QUEUE
0F5A   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F5B   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F5C   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F5D   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F5E   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F5F   0080           01840                 movwf INDF                      ;Save to QUEUE
0F60   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01842                 count = count + 1
0F61   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F62   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F63   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F64   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F65   0080           01834                 movwf INDF                      ;Save to QUEUE
0F66   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F67   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F68   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F69   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F6A   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F6B   0080           01840                 movwf INDF                      ;Save to QUEUE
0F6C   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01842                 count = count + 1
0F6D   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F6E   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F6F   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F70   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F71   0080           01834                 movwf INDF                      ;Save to QUEUE
0F72   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F73   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F74   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F75   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F76   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F77   0080           01840                 movwf INDF                      ;Save to QUEUE
0F78   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01842                 count = count + 1
0F79   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F7A   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F7B   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F7C   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F7D   0080           01834                 movwf INDF                      ;Save to QUEUE
0F7E   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F7F   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F80   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F81   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F82   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F83   0080           01840                 movwf INDF                      ;Save to QUEUE
0F84   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01842                 count = count + 1
0F85   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F86   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F87   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F88   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F89   0080           01834                 movwf INDF                      ;Save to QUEUE
0F8A   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F8B   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F8C   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F8D   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F8E   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F8F   0080           01840                 movwf INDF                      ;Save to QUEUE
0F90   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01842                 count = count + 1
0F91   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F92   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F93   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F94   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0F95   0080           01834                 movwf INDF                      ;Save to QUEUE
0F96   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0F97   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0F98   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F99   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F9A   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0F9B   0080           01840                 movwf INDF                      ;Save to QUEUE
0F9C   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01842                 count = count + 1
0F9D   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0F9E   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F9F   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA0   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FA1   0080           01834                 movwf INDF                      ;Save to QUEUE
0FA2   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FA3   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FA4   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FA5   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA6   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FA7   0080           01840                 movwf INDF                      ;Save to QUEUE
0FA8   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01842                 count = count + 1
0FA9   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FAA   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FAB   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FAC   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FAD   0080           01834                 movwf INDF                      ;Save to QUEUE
0FAE   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FAF   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FB0   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB1   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB2   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FB3   0080           01840                 movwf INDF                      ;Save to QUEUE
0FB4   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01842                 count = count + 1
0FB5   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FB6   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB7   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB8   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FB9   0080           01834                 movwf INDF                      ;Save to QUEUE
0FBA   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FBB   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FBC   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FBD   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FBE   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FBF   0080           01840                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FC0   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01842                 count = count + 1
0FC1   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FC2   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FC3   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FC4   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FC5   0080           01834                 movwf INDF                      ;Save to QUEUE
0FC6   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FC7   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FC8   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FC9   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FCA   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FCB   0080           01840                 movwf INDF                      ;Save to QUEUE
0FCC   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01842                 count = count + 1
0FCD   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FCE   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FCF   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD0   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FD1   0080           01834                 movwf INDF                      ;Save to QUEUE
0FD2   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FD3   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FD4   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FD5   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD6   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FD7   0080           01840                 movwf INDF                      ;Save to QUEUE
0FD8   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01842                 count = count + 1
0FD9   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FDA   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FDB   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FDC   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FDD   0080           01834                 movwf INDF                      ;Save to QUEUE
0FDE   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FDF   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FE0   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE1   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE2   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FE3   0080           01840                 movwf INDF                      ;Save to QUEUE
0FE4   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01842                 count = count + 1
0FE5   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FE6   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE7   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE8   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FE9   0080           01834                 movwf INDF                      ;Save to QUEUE
0FEA   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FEB   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FEC   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FED   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FEE   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FEF   0080           01840                 movwf INDF                      ;Save to QUEUE
0FF0   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001D            01842                 count = count + 1
0FF1   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FF2   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FF3   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FF4   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0FF5   0080           01834                 movwf INDF                      ;Save to QUEUE
0FF6   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
0FF7   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
0FF8   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FF9   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FFA   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0FFB   0080           01840                 movwf INDF                      ;Save to QUEUE
0FFC   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01842                 count = count + 1
0FFD   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
0FFE   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FFF   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1000   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1001   0080           01834                 movwf INDF                      ;Save to QUEUE
1002   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
1003   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
1004   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1005   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1006   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1007   0080           01840                 movwf INDF                      ;Save to QUEUE
1008   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01842                 count = count + 1
1009   0808           01830                 movf ADC_DATAPORT, W            ;Sample Y
100A   1409           01831                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
100B   1009           01832                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
100C   1489           01833                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
100D   0080           01834                 movwf INDF                      ;Save to QUEUE
100E   0A84           01835                 incf FSR, F                     ;Increment QUEUE pointer
100F   0808           01836                 movf ADC_DATAPORT, W            ;Sample X
1010   1409           01837                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1011   1009           01838                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1012   1089           01839                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1013   0080           01840                 movwf INDF                      ;Save to QUEUE
1014   0A84           01841                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01842                 count = count + 1
                      01843         endw
1015   0808           01844     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
1016   1409           01845     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1017   1009           01846         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1018   1489           01847         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1019   0080           01848     movwf INDF                      ;Save to QUEUE
101A   1784           01849         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
101B   0808           01850     movf ADC_DATAPORT, W            ;Sample X
101C   1409           01851         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
101D   1009           01852         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
101E   1089           01853         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
101F   0080           01854     movwf INDF                      ;Save to QUEUE
1020   0384           01855         decf FSR, f                                             ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000001            01856     count = 1
                      01857     while count < BUFFERSIZE / 2
1021   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1022   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1023   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1024   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1025   0080           01862                 movwf INDF                      ;Save to QUEUE
1026   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1027   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1028   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1029   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
102A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
102B   0080           01868                 movwf INDF                      ;Save to QUEUE
102C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01870                 count = count + 1
102D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
102E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
102F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1030   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1031   0080           01862                 movwf INDF                      ;Save to QUEUE
1032   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1033   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1034   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1035   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1036   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1037   0080           01868                 movwf INDF                      ;Save to QUEUE
1038   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01870                 count = count + 1
1039   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
103A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
103B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
103C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
103D   0080           01862                 movwf INDF                      ;Save to QUEUE
103E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
103F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1040   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1041   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1042   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1043   0080           01868                 movwf INDF                      ;Save to QUEUE
1044   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01870                 count = count + 1
1045   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1046   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1047   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1048   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1049   0080           01862                 movwf INDF                      ;Save to QUEUE
104A   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
104B   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
104C   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
104D   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
104E   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
104F   0080           01868                 movwf INDF                      ;Save to QUEUE
1050   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            01870                 count = count + 1
1051   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1052   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1053   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1054   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1055   0080           01862                 movwf INDF                      ;Save to QUEUE
1056   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1057   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1058   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1059   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
105A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
105B   0080           01868                 movwf INDF                      ;Save to QUEUE
105C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01870                 count = count + 1
105D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
105E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
105F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1060   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1061   0080           01862                 movwf INDF                      ;Save to QUEUE
1062   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1063   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1064   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1065   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1066   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1067   0080           01868                 movwf INDF                      ;Save to QUEUE
1068   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01870                 count = count + 1
1069   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
106A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
106B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
106C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
106D   0080           01862                 movwf INDF                      ;Save to QUEUE
106E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
106F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1070   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1071   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1072   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1073   0080           01868                 movwf INDF                      ;Save to QUEUE
1074   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01870                 count = count + 1
1075   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1076   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1077   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1078   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1079   0080           01862                 movwf INDF                      ;Save to QUEUE
107A   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
107B   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
107C   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
107D   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
107E   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
107F   0080           01868                 movwf INDF                      ;Save to QUEUE
1080   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01870                 count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1081   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1082   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1083   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1084   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1085   0080           01862                 movwf INDF                      ;Save to QUEUE
1086   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1087   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1088   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1089   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
108A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
108B   0080           01868                 movwf INDF                      ;Save to QUEUE
108C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01870                 count = count + 1
108D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
108E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
108F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1090   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1091   0080           01862                 movwf INDF                      ;Save to QUEUE
1092   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1093   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1094   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1095   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1096   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1097   0080           01868                 movwf INDF                      ;Save to QUEUE
1098   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01870                 count = count + 1
1099   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
109A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
109B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
109C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
109D   0080           01862                 movwf INDF                      ;Save to QUEUE
109E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
109F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10A0   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A1   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A2   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10A3   0080           01868                 movwf INDF                      ;Save to QUEUE
10A4   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01870                 count = count + 1
10A5   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10A6   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A7   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A8   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10A9   0080           01862                 movwf INDF                      ;Save to QUEUE
10AA   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10AB   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10AC   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10AD   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10AE   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10AF   0080           01868                 movwf INDF                      ;Save to QUEUE
10B0   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01870                 count = count + 1
10B1   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10B2   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10B3   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10B4   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10B5   0080           01862                 movwf INDF                      ;Save to QUEUE
10B6   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10B7   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10B8   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10B9   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10BA   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10BB   0080           01868                 movwf INDF                      ;Save to QUEUE
10BC   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01870                 count = count + 1
10BD   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10BE   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10BF   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C0   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10C1   0080           01862                 movwf INDF                      ;Save to QUEUE
10C2   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10C3   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10C4   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10C5   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C6   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10C7   0080           01868                 movwf INDF                      ;Save to QUEUE
10C8   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01870                 count = count + 1
10C9   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10CA   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10CB   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10CC   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10CD   0080           01862                 movwf INDF                      ;Save to QUEUE
10CE   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10CF   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10D0   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10D1   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D2   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10D3   0080           01868                 movwf INDF                      ;Save to QUEUE
10D4   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01870                 count = count + 1
10D5   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10D6   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10D7   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D8   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10D9   0080           01862                 movwf INDF                      ;Save to QUEUE
10DA   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10DB   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10DC   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10DD   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10DE   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10DF   0080           01868                 movwf INDF                      ;Save to QUEUE
10E0   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01870                 count = count + 1
10E1   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10E2   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10E3   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10E4   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10E5   0080           01862                 movwf INDF                      ;Save to QUEUE
10E6   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10E7   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10E8   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10E9   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10EA   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10EB   0080           01868                 movwf INDF                      ;Save to QUEUE
10EC   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01870                 count = count + 1
10ED   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10EE   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10EF   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F0   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10F1   0080           01862                 movwf INDF                      ;Save to QUEUE
10F2   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10F3   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
10F4   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10F5   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F6   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
10F7   0080           01868                 movwf INDF                      ;Save to QUEUE
10F8   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01870                 count = count + 1
10F9   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
10FA   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10FB   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10FC   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
10FD   0080           01862                 movwf INDF                      ;Save to QUEUE
10FE   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
10FF   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1100   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1101   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1102   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1103   0080           01868                 movwf INDF                      ;Save to QUEUE
1104   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01870                 count = count + 1
1105   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1106   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1107   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1108   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1109   0080           01862                 movwf INDF                      ;Save to QUEUE
110A   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
110B   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
110C   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
110D   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
110E   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
110F   0080           01868                 movwf INDF                      ;Save to QUEUE
1110   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01870                 count = count + 1
1111   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1112   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1113   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1114   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1115   0080           01862                 movwf INDF                      ;Save to QUEUE
1116   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1117   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1118   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1119   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
111A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
111B   0080           01868                 movwf INDF                      ;Save to QUEUE
111C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01870                 count = count + 1
111D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
111E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
111F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1120   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1121   0080           01862                 movwf INDF                      ;Save to QUEUE
1122   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1123   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1124   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1125   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1126   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1127   0080           01868                 movwf INDF                      ;Save to QUEUE
1128   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01870                 count = count + 1
1129   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
112A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
112B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
112C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
112D   0080           01862                 movwf INDF                      ;Save to QUEUE
112E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
112F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1130   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1131   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1132   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1133   0080           01868                 movwf INDF                      ;Save to QUEUE
1134   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01870                 count = count + 1
1135   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1136   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1137   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1138   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1139   0080           01862                 movwf INDF                      ;Save to QUEUE
113A   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
113B   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
113C   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
113D   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
113E   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
113F   0080           01868                 movwf INDF                      ;Save to QUEUE
1140   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01870                 count = count + 1
1141   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1142   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1143   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1144   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1145   0080           01862                 movwf INDF                      ;Save to QUEUE
1146   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1147   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1148   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1149   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
114A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
114B   0080           01868                 movwf INDF                      ;Save to QUEUE
114C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01870                 count = count + 1
114D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
114E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
114F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1150   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1151   0080           01862                 movwf INDF                      ;Save to QUEUE
1152   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1153   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1154   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1155   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1156   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1157   0080           01868                 movwf INDF                      ;Save to QUEUE
1158   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01870                 count = count + 1
1159   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
115A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
115B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
115C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
115D   0080           01862                 movwf INDF                      ;Save to QUEUE
115E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
115F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1160   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1161   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1162   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1163   0080           01868                 movwf INDF                      ;Save to QUEUE
1164   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01870                 count = count + 1
1165   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1166   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1167   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1168   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1169   0080           01862                 movwf INDF                      ;Save to QUEUE
116A   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
116B   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
116C   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
116D   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
116E   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
116F   0080           01868                 movwf INDF                      ;Save to QUEUE
1170   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01870                 count = count + 1
1171   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
1172   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1173   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1174   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1175   0080           01862                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1176   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1177   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1178   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1179   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
117A   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
117B   0080           01868                 movwf INDF                      ;Save to QUEUE
117C   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01870                 count = count + 1
117D   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
117E   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
117F   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1180   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1181   0080           01862                 movwf INDF                      ;Save to QUEUE
1182   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
1183   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1184   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1185   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1186   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1187   0080           01868                 movwf INDF                      ;Save to QUEUE
1188   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01870                 count = count + 1
1189   0808           01858                 movf ADC_DATAPORT, W            ;Sample Y
118A   1409           01859                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
118B   1009           01860                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
118C   1489           01861                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
118D   0080           01862                 movwf INDF                      ;Save to QUEUE
118E   0384           01863                 decf FSR, F                     ;Increment QUEUE pointer
118F   0808           01864                 movf ADC_DATAPORT, W            ;Sample X
1190   1409           01865                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1191   1009           01866                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1192   1089           01867                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1193   0080           01868                 movwf INDF                      ;Save to QUEUE
1194   0384           01869                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01870                 count = count + 1
                      01871         endw
1195   0808           01872     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
1196   1409           01873     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1197   1009           01874         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1198   1489           01875         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1199   0080           01876     movwf INDF                      ;Save to QUEUE
119A   1783           01877         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
119B   0808           01878     movf ADC_DATAPORT, W            ;Sample X
119C   1409           01879         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
119D   1009           01880         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
119E   1089           01881         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
119F   0080           01882     movwf INDF                      ;Save to QUEUE
11A0   0A84           01883         incf FSR, f                                             ;Increment QUEUE pointer
  00000001            01884     count = 1
                      01885     while count < BUFFERSIZE / 2
11A1   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11A2   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11A3   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11A4   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11A5   0080           01890                 movwf INDF                      ;Save to QUEUE
11A6   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11A7   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11A8   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11A9   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11AA   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11AB   0080           01896                 movwf INDF                      ;Save to QUEUE
11AC   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01898                 count = count + 1
11AD   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11AE   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11AF   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B0   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11B1   0080           01890                 movwf INDF                      ;Save to QUEUE
11B2   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11B3   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11B4   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11B5   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B6   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11B7   0080           01896                 movwf INDF                      ;Save to QUEUE
11B8   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01898                 count = count + 1
11B9   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11BA   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11BB   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11BC   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11BD   0080           01890                 movwf INDF                      ;Save to QUEUE
11BE   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11BF   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11C0   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C1   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C2   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11C3   0080           01896                 movwf INDF                      ;Save to QUEUE
11C4   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01898                 count = count + 1
11C5   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11C6   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C7   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C8   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11C9   0080           01890                 movwf INDF                      ;Save to QUEUE
11CA   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11CB   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11CC   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11CD   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11CE   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11CF   0080           01896                 movwf INDF                      ;Save to QUEUE
11D0   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01898                 count = count + 1
11D1   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11D2   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11D3   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11D4   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11D5   0080           01890                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11D6   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11D7   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11D8   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11D9   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11DA   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11DB   0080           01896                 movwf INDF                      ;Save to QUEUE
11DC   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01898                 count = count + 1
11DD   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11DE   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11DF   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E0   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11E1   0080           01890                 movwf INDF                      ;Save to QUEUE
11E2   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11E3   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11E4   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11E5   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E6   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11E7   0080           01896                 movwf INDF                      ;Save to QUEUE
11E8   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01898                 count = count + 1
11E9   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11EA   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11EB   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11EC   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11ED   0080           01890                 movwf INDF                      ;Save to QUEUE
11EE   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11EF   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11F0   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11F1   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11F2   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11F3   0080           01896                 movwf INDF                      ;Save to QUEUE
11F4   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01898                 count = count + 1
11F5   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
11F6   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11F7   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11F8   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
11F9   0080           01890                 movwf INDF                      ;Save to QUEUE
11FA   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
11FB   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
11FC   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11FD   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11FE   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
11FF   0080           01896                 movwf INDF                      ;Save to QUEUE
1200   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01898                 count = count + 1
1201   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1202   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1203   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1204   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1205   0080           01890                 movwf INDF                      ;Save to QUEUE
1206   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1207   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1208   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1209   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
120A   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
120B   0080           01896                 movwf INDF                      ;Save to QUEUE
120C   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01898                 count = count + 1
120D   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
120E   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
120F   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1210   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1211   0080           01890                 movwf INDF                      ;Save to QUEUE
1212   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1213   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1214   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1215   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1216   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1217   0080           01896                 movwf INDF                      ;Save to QUEUE
1218   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01898                 count = count + 1
1219   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
121A   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
121B   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
121C   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
121D   0080           01890                 movwf INDF                      ;Save to QUEUE
121E   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
121F   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1220   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1221   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1222   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1223   0080           01896                 movwf INDF                      ;Save to QUEUE
1224   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01898                 count = count + 1
1225   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1226   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1227   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1228   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1229   0080           01890                 movwf INDF                      ;Save to QUEUE
122A   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
122B   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
122C   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
122D   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
122E   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
122F   0080           01896                 movwf INDF                      ;Save to QUEUE
1230   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01898                 count = count + 1
1231   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1232   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1233   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1234   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1235   0080           01890                 movwf INDF                      ;Save to QUEUE
1236   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1237   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1238   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1239   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
123A   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
123B   0080           01896                 movwf INDF                      ;Save to QUEUE
123C   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01898                 count = count + 1
123D   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
123E   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
123F   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1240   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1241   0080           01890                 movwf INDF                      ;Save to QUEUE
1242   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1243   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1244   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1245   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1246   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1247   0080           01896                 movwf INDF                      ;Save to QUEUE
1248   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01898                 count = count + 1
1249   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
124A   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
124B   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
124C   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
124D   0080           01890                 movwf INDF                      ;Save to QUEUE
124E   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
124F   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1250   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1251   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1252   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1253   0080           01896                 movwf INDF                      ;Save to QUEUE
1254   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01898                 count = count + 1
1255   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1256   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1257   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1258   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1259   0080           01890                 movwf INDF                      ;Save to QUEUE
125A   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
125B   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
125C   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
125D   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
125E   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
125F   0080           01896                 movwf INDF                      ;Save to QUEUE
1260   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01898                 count = count + 1
1261   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1262   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1263   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1264   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1265   0080           01890                 movwf INDF                      ;Save to QUEUE
1266   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1267   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1268   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1269   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
126A   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
126B   0080           01896                 movwf INDF                      ;Save to QUEUE
126C   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01898                 count = count + 1
126D   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
126E   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
126F   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1270   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1271   0080           01890                 movwf INDF                      ;Save to QUEUE
1272   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1273   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1274   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1275   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1276   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1277   0080           01896                 movwf INDF                      ;Save to QUEUE
1278   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01898                 count = count + 1
1279   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
127A   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
127B   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
127C   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
127D   0080           01890                 movwf INDF                      ;Save to QUEUE
127E   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
127F   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1280   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1281   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1282   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1283   0080           01896                 movwf INDF                      ;Save to QUEUE
1284   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01898                 count = count + 1
1285   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1286   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1287   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1288   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1289   0080           01890                 movwf INDF                      ;Save to QUEUE
128A   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
128B   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
128C   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
128D   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
128E   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
128F   0080           01896                 movwf INDF                      ;Save to QUEUE
1290   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01898                 count = count + 1
1291   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
1292   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1293   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1294   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1295   0080           01890                 movwf INDF                      ;Save to QUEUE
1296   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1297   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1298   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1299   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

129A   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
129B   0080           01896                 movwf INDF                      ;Save to QUEUE
129C   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01898                 count = count + 1
129D   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
129E   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
129F   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A0   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12A1   0080           01890                 movwf INDF                      ;Save to QUEUE
12A2   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12A3   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12A4   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12A5   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A6   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12A7   0080           01896                 movwf INDF                      ;Save to QUEUE
12A8   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01898                 count = count + 1
12A9   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12AA   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12AB   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12AC   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12AD   0080           01890                 movwf INDF                      ;Save to QUEUE
12AE   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12AF   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12B0   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B1   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B2   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12B3   0080           01896                 movwf INDF                      ;Save to QUEUE
12B4   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01898                 count = count + 1
12B5   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12B6   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B7   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B8   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12B9   0080           01890                 movwf INDF                      ;Save to QUEUE
12BA   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12BB   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12BC   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12BD   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12BE   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12BF   0080           01896                 movwf INDF                      ;Save to QUEUE
12C0   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01898                 count = count + 1
12C1   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12C2   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12C3   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12C4   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12C5   0080           01890                 movwf INDF                      ;Save to QUEUE
12C6   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12C7   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12C8   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12C9   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12CA   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12CB   0080           01896                 movwf INDF                      ;Save to QUEUE
12CC   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01898                 count = count + 1
12CD   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12CE   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12CF   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D0   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12D1   0080           01890                 movwf INDF                      ;Save to QUEUE
12D2   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12D3   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12D4   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12D5   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D6   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12D7   0080           01896                 movwf INDF                      ;Save to QUEUE
12D8   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01898                 count = count + 1
12D9   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12DA   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12DB   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12DC   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12DD   0080           01890                 movwf INDF                      ;Save to QUEUE
12DE   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12DF   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12E0   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E1   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E2   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12E3   0080           01896                 movwf INDF                      ;Save to QUEUE
12E4   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01898                 count = count + 1
12E5   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12E6   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E7   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E8   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12E9   0080           01890                 movwf INDF                      ;Save to QUEUE
12EA   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12EB   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12EC   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12ED   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12EE   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12EF   0080           01896                 movwf INDF                      ;Save to QUEUE
12F0   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01898                 count = count + 1
12F1   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12F2   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12F3   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12F4   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
12F5   0080           01890                 movwf INDF                      ;Save to QUEUE
12F6   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
12F7   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
12F8   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12F9   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12FA   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
12FB   0080           01896                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12FC   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01898                 count = count + 1
12FD   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
12FE   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12FF   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1300   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1301   0080           01890                 movwf INDF                      ;Save to QUEUE
1302   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
1303   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1304   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1305   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1306   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1307   0080           01896                 movwf INDF                      ;Save to QUEUE
1308   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01898                 count = count + 1
1309   0808           01886                 movf ADC_DATAPORT, W            ;Sample Y
130A   1409           01887                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
130B   1009           01888                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
130C   1489           01889                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
130D   0080           01890                 movwf INDF                      ;Save to QUEUE
130E   0A84           01891                 incf FSR, F                     ;Increment QUEUE pointer
130F   0808           01892                 movf ADC_DATAPORT, W            ;Sample X
1310   1409           01893                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1311   1009           01894                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1312   1089           01895                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1313   0080           01896                 movwf INDF                      ;Save to QUEUE
1314   0A84           01897                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01898                 count = count + 1
                      01899         endw
1315   0808           01900     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
1316   1409           01901     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1317   1009           01902         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1318   1489           01903         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1319   0080           01904     movwf INDF                      ;Save to QUEUE
131A   1384           01905         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
131B   0808           01906     movf ADC_DATAPORT, W            ;Sample X
131C   1409           01907         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
131D   1009           01908         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
131E   1089           01909         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
131F   0080           01910     movwf INDF                      ;Save to QUEUE
1320   0384           01911         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01912     count = 1
                      01913     while count < BUFFERSIZE / 2
1321   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1322   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1323   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1324   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1325   0080           01918                 movwf INDF                      ;Save to QUEUE
1326   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1327   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1328   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1329   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
132A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

132B   0080           01924                 movwf INDF                      ;Save to QUEUE
132C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01926                 count = count + 1
132D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
132E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
132F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1330   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1331   0080           01918                 movwf INDF                      ;Save to QUEUE
1332   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1333   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1334   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1335   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1336   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1337   0080           01924                 movwf INDF                      ;Save to QUEUE
1338   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01926                 count = count + 1
1339   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
133A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
133B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
133C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
133D   0080           01918                 movwf INDF                      ;Save to QUEUE
133E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
133F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1340   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1341   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1342   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1343   0080           01924                 movwf INDF                      ;Save to QUEUE
1344   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01926                 count = count + 1
1345   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1346   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1347   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1348   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1349   0080           01918                 movwf INDF                      ;Save to QUEUE
134A   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
134B   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
134C   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
134D   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
134E   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
134F   0080           01924                 movwf INDF                      ;Save to QUEUE
1350   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01926                 count = count + 1
1351   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1352   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1353   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1354   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1355   0080           01918                 movwf INDF                      ;Save to QUEUE
1356   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1357   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1358   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1359   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
135A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
135B   0080           01924                 movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

135C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01926                 count = count + 1
135D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
135E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
135F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1360   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1361   0080           01918                 movwf INDF                      ;Save to QUEUE
1362   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1363   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1364   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1365   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1366   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1367   0080           01924                 movwf INDF                      ;Save to QUEUE
1368   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01926                 count = count + 1
1369   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
136A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
136B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
136C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
136D   0080           01918                 movwf INDF                      ;Save to QUEUE
136E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
136F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1370   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1371   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1372   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1373   0080           01924                 movwf INDF                      ;Save to QUEUE
1374   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01926                 count = count + 1
1375   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1376   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1377   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1378   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1379   0080           01918                 movwf INDF                      ;Save to QUEUE
137A   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
137B   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
137C   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
137D   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
137E   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
137F   0080           01924                 movwf INDF                      ;Save to QUEUE
1380   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01926                 count = count + 1
1381   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1382   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1383   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1384   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1385   0080           01918                 movwf INDF                      ;Save to QUEUE
1386   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1387   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1388   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1389   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
138A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
138B   0080           01924                 movwf INDF                      ;Save to QUEUE
138C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000A            01926                 count = count + 1
138D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
138E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
138F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1390   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1391   0080           01918                 movwf INDF                      ;Save to QUEUE
1392   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1393   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1394   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1395   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1396   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1397   0080           01924                 movwf INDF                      ;Save to QUEUE
1398   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01926                 count = count + 1
1399   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
139A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
139B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
139C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
139D   0080           01918                 movwf INDF                      ;Save to QUEUE
139E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
139F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13A0   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A1   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13A2   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13A3   0080           01924                 movwf INDF                      ;Save to QUEUE
13A4   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01926                 count = count + 1
13A5   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13A6   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A7   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13A8   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13A9   0080           01918                 movwf INDF                      ;Save to QUEUE
13AA   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13AB   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13AC   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13AD   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13AE   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13AF   0080           01924                 movwf INDF                      ;Save to QUEUE
13B0   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01926                 count = count + 1
13B1   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13B2   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13B3   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13B4   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13B5   0080           01918                 movwf INDF                      ;Save to QUEUE
13B6   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13B7   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13B8   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13B9   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13BA   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13BB   0080           01924                 movwf INDF                      ;Save to QUEUE
13BC   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01926                 count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13BD   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13BE   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13BF   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C0   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13C1   0080           01918                 movwf INDF                      ;Save to QUEUE
13C2   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13C3   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13C4   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13C5   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C6   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13C7   0080           01924                 movwf INDF                      ;Save to QUEUE
13C8   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01926                 count = count + 1
13C9   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13CA   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13CB   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13CC   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13CD   0080           01918                 movwf INDF                      ;Save to QUEUE
13CE   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13CF   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13D0   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D1   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D2   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13D3   0080           01924                 movwf INDF                      ;Save to QUEUE
13D4   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01926                 count = count + 1
13D5   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13D6   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D7   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D8   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13D9   0080           01918                 movwf INDF                      ;Save to QUEUE
13DA   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13DB   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13DC   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13DD   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13DE   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13DF   0080           01924                 movwf INDF                      ;Save to QUEUE
13E0   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01926                 count = count + 1
13E1   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13E2   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13E3   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13E4   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13E5   0080           01918                 movwf INDF                      ;Save to QUEUE
13E6   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13E7   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13E8   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13E9   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13EA   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13EB   0080           01924                 movwf INDF                      ;Save to QUEUE
13EC   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01926                 count = count + 1
13ED   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13EE   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13EF   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F0   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13F1   0080           01918                 movwf INDF                      ;Save to QUEUE
13F2   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13F3   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
13F4   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13F5   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F6   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
13F7   0080           01924                 movwf INDF                      ;Save to QUEUE
13F8   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01926                 count = count + 1
13F9   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
13FA   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13FB   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13FC   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
13FD   0080           01918                 movwf INDF                      ;Save to QUEUE
13FE   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
13FF   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1400   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1401   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1402   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1403   0080           01924                 movwf INDF                      ;Save to QUEUE
1404   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01926                 count = count + 1
1405   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1406   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1407   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1408   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1409   0080           01918                 movwf INDF                      ;Save to QUEUE
140A   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
140B   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
140C   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
140D   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
140E   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
140F   0080           01924                 movwf INDF                      ;Save to QUEUE
1410   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01926                 count = count + 1
1411   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1412   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1413   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1414   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1415   0080           01918                 movwf INDF                      ;Save to QUEUE
1416   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1417   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1418   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1419   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
141A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
141B   0080           01924                 movwf INDF                      ;Save to QUEUE
141C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01926                 count = count + 1
141D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
141E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

141F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1420   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1421   0080           01918                 movwf INDF                      ;Save to QUEUE
1422   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1423   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1424   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1425   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1426   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1427   0080           01924                 movwf INDF                      ;Save to QUEUE
1428   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01926                 count = count + 1
1429   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
142A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
142B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
142C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
142D   0080           01918                 movwf INDF                      ;Save to QUEUE
142E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
142F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1430   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1431   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1432   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1433   0080           01924                 movwf INDF                      ;Save to QUEUE
1434   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01926                 count = count + 1
1435   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1436   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1437   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1438   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1439   0080           01918                 movwf INDF                      ;Save to QUEUE
143A   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
143B   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
143C   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
143D   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
143E   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
143F   0080           01924                 movwf INDF                      ;Save to QUEUE
1440   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01926                 count = count + 1
1441   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1442   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1443   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1444   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1445   0080           01918                 movwf INDF                      ;Save to QUEUE
1446   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1447   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1448   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1449   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
144A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
144B   0080           01924                 movwf INDF                      ;Save to QUEUE
144C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01926                 count = count + 1
144D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
144E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
144F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1450   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1451   0080           01918                 movwf INDF                      ;Save to QUEUE
1452   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1453   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1454   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1455   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1456   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1457   0080           01924                 movwf INDF                      ;Save to QUEUE
1458   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01926                 count = count + 1
1459   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
145A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
145B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
145C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
145D   0080           01918                 movwf INDF                      ;Save to QUEUE
145E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
145F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1460   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1461   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1462   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1463   0080           01924                 movwf INDF                      ;Save to QUEUE
1464   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01926                 count = count + 1
1465   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1466   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1467   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1468   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1469   0080           01918                 movwf INDF                      ;Save to QUEUE
146A   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
146B   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
146C   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
146D   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
146E   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
146F   0080           01924                 movwf INDF                      ;Save to QUEUE
1470   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01926                 count = count + 1
1471   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
1472   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1473   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1474   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
1475   0080           01918                 movwf INDF                      ;Save to QUEUE
1476   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1477   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1478   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1479   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
147A   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
147B   0080           01924                 movwf INDF                      ;Save to QUEUE
147C   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01926                 count = count + 1
147D   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
147E   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
147F   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1480   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1481   0080           01918                 movwf INDF                      ;Save to QUEUE
1482   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
1483   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1484   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1485   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1486   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1487   0080           01924                 movwf INDF                      ;Save to QUEUE
1488   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01926                 count = count + 1
1489   0808           01914                 movf ADC_DATAPORT, W            ;Sample Y
148A   1409           01915                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
148B   1009           01916                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
148C   1489           01917                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
148D   0080           01918                 movwf INDF                      ;Save to QUEUE
148E   0384           01919                 decf FSR, F                     ;Increment QUEUE pointer
148F   0808           01920                 movf ADC_DATAPORT, W            ;Sample X
1490   1409           01921                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1491   1009           01922                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1492   1089           01923                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
1493   0080           01924                 movwf INDF                      ;Save to QUEUE
1494   0384           01925                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01926                 count = count + 1
                      01927         endw
1495   0808           01928     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
1496   1409           01929     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
                      01930         MGOTO ADCShutdown
                          M         MGOTOSETUP ADCShutdown
                          M         if (ADCShutdown & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
1497   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (ADCShutdown & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1498   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1499   29A0               M         goto ADCShutdown
                      01931         
                      01932 ;Fast sample
                      01933 ;Sampling rate = 833.333 kHz with 20 MHz clock
                      01934 ;Sampling rate = 166.667 kHz with 4 MHz clock
                      01935 ;-----------------------------------------------------------------------------
149A                  01936 Sample833k
                      01937 ;Repetative sample
                      01938 ;Equivalent sampling rate = 2.5 MHz with 20 MHz clock
                      01939 ;-----------------------------------------------------------------------------
149A                  01940 SampleRep2M
149A   1009           01941     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01942     MOVLF BUFFERMIN, FSR                ;Initialize pointer
149B   3020               M     movlw BUFFERMIN
149C   0084               M     movwf FSR
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

149D   0000           01943     nop
  0000                01944     local count
  00000001            01945     count = 1
                      01946     while count < BUFFERSIZE
149E   0808           01947         movf ADC_DATAPORT, W            ;Sample
149F   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14A0   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14A1   0080           01950         movwf INDF                      ;Save to QUEUE
14A2   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14A3   0000           01952         nop                             ;Wait a cycle
  00000002            01953         count = count + 1
14A4   0808           01947         movf ADC_DATAPORT, W            ;Sample
14A5   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14A6   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14A7   0080           01950         movwf INDF                      ;Save to QUEUE
14A8   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14A9   0000           01952         nop                             ;Wait a cycle
  00000003            01953         count = count + 1
14AA   0808           01947         movf ADC_DATAPORT, W            ;Sample
14AB   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14AC   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14AD   0080           01950         movwf INDF                      ;Save to QUEUE
14AE   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14AF   0000           01952         nop                             ;Wait a cycle
  00000004            01953         count = count + 1
14B0   0808           01947         movf ADC_DATAPORT, W            ;Sample
14B1   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14B2   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B3   0080           01950         movwf INDF                      ;Save to QUEUE
14B4   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14B5   0000           01952         nop                             ;Wait a cycle
  00000005            01953         count = count + 1
14B6   0808           01947         movf ADC_DATAPORT, W            ;Sample
14B7   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14B8   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B9   0080           01950         movwf INDF                      ;Save to QUEUE
14BA   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14BB   0000           01952         nop                             ;Wait a cycle
  00000006            01953         count = count + 1
14BC   0808           01947         movf ADC_DATAPORT, W            ;Sample
14BD   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14BE   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14BF   0080           01950         movwf INDF                      ;Save to QUEUE
14C0   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14C1   0000           01952         nop                             ;Wait a cycle
  00000007            01953         count = count + 1
14C2   0808           01947         movf ADC_DATAPORT, W            ;Sample
14C3   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14C4   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14C5   0080           01950         movwf INDF                      ;Save to QUEUE
14C6   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14C7   0000           01952         nop                             ;Wait a cycle
  00000008            01953         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

14C8   0808           01947         movf ADC_DATAPORT, W            ;Sample
14C9   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14CA   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14CB   0080           01950         movwf INDF                      ;Save to QUEUE
14CC   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14CD   0000           01952         nop                             ;Wait a cycle
  00000009            01953         count = count + 1
14CE   0808           01947         movf ADC_DATAPORT, W            ;Sample
14CF   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14D0   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14D1   0080           01950         movwf INDF                      ;Save to QUEUE
14D2   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14D3   0000           01952         nop                             ;Wait a cycle
  0000000A            01953         count = count + 1
14D4   0808           01947         movf ADC_DATAPORT, W            ;Sample
14D5   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14D6   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14D7   0080           01950         movwf INDF                      ;Save to QUEUE
14D8   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14D9   0000           01952         nop                             ;Wait a cycle
  0000000B            01953         count = count + 1
14DA   0808           01947         movf ADC_DATAPORT, W            ;Sample
14DB   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14DC   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14DD   0080           01950         movwf INDF                      ;Save to QUEUE
14DE   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14DF   0000           01952         nop                             ;Wait a cycle
  0000000C            01953         count = count + 1
14E0   0808           01947         movf ADC_DATAPORT, W            ;Sample
14E1   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14E2   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14E3   0080           01950         movwf INDF                      ;Save to QUEUE
14E4   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14E5   0000           01952         nop                             ;Wait a cycle
  0000000D            01953         count = count + 1
14E6   0808           01947         movf ADC_DATAPORT, W            ;Sample
14E7   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14E8   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14E9   0080           01950         movwf INDF                      ;Save to QUEUE
14EA   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14EB   0000           01952         nop                             ;Wait a cycle
  0000000E            01953         count = count + 1
14EC   0808           01947         movf ADC_DATAPORT, W            ;Sample
14ED   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14EE   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14EF   0080           01950         movwf INDF                      ;Save to QUEUE
14F0   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14F1   0000           01952         nop                             ;Wait a cycle
  0000000F            01953         count = count + 1
14F2   0808           01947         movf ADC_DATAPORT, W            ;Sample
14F3   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14F4   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14F5   0080           01950         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

14F6   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14F7   0000           01952         nop                             ;Wait a cycle
  00000010            01953         count = count + 1
14F8   0808           01947         movf ADC_DATAPORT, W            ;Sample
14F9   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14FA   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14FB   0080           01950         movwf INDF                      ;Save to QUEUE
14FC   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
14FD   0000           01952         nop                             ;Wait a cycle
  00000011            01953         count = count + 1
14FE   0808           01947         movf ADC_DATAPORT, W            ;Sample
14FF   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1500   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1501   0080           01950         movwf INDF                      ;Save to QUEUE
1502   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1503   0000           01952         nop                             ;Wait a cycle
  00000012            01953         count = count + 1
1504   0808           01947         movf ADC_DATAPORT, W            ;Sample
1505   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1506   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1507   0080           01950         movwf INDF                      ;Save to QUEUE
1508   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1509   0000           01952         nop                             ;Wait a cycle
  00000013            01953         count = count + 1
150A   0808           01947         movf ADC_DATAPORT, W            ;Sample
150B   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
150C   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
150D   0080           01950         movwf INDF                      ;Save to QUEUE
150E   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
150F   0000           01952         nop                             ;Wait a cycle
  00000014            01953         count = count + 1
1510   0808           01947         movf ADC_DATAPORT, W            ;Sample
1511   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1512   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1513   0080           01950         movwf INDF                      ;Save to QUEUE
1514   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1515   0000           01952         nop                             ;Wait a cycle
  00000015            01953         count = count + 1
1516   0808           01947         movf ADC_DATAPORT, W            ;Sample
1517   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1518   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1519   0080           01950         movwf INDF                      ;Save to QUEUE
151A   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
151B   0000           01952         nop                             ;Wait a cycle
  00000016            01953         count = count + 1
151C   0808           01947         movf ADC_DATAPORT, W            ;Sample
151D   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
151E   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
151F   0080           01950         movwf INDF                      ;Save to QUEUE
1520   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1521   0000           01952         nop                             ;Wait a cycle
  00000017            01953         count = count + 1
1522   0808           01947         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1523   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1524   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1525   0080           01950         movwf INDF                      ;Save to QUEUE
1526   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1527   0000           01952         nop                             ;Wait a cycle
  00000018            01953         count = count + 1
1528   0808           01947         movf ADC_DATAPORT, W            ;Sample
1529   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
152A   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
152B   0080           01950         movwf INDF                      ;Save to QUEUE
152C   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
152D   0000           01952         nop                             ;Wait a cycle
  00000019            01953         count = count + 1
152E   0808           01947         movf ADC_DATAPORT, W            ;Sample
152F   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1530   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1531   0080           01950         movwf INDF                      ;Save to QUEUE
1532   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1533   0000           01952         nop                             ;Wait a cycle
  0000001A            01953         count = count + 1
1534   0808           01947         movf ADC_DATAPORT, W            ;Sample
1535   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1536   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1537   0080           01950         movwf INDF                      ;Save to QUEUE
1538   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1539   0000           01952         nop                             ;Wait a cycle
  0000001B            01953         count = count + 1
153A   0808           01947         movf ADC_DATAPORT, W            ;Sample
153B   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
153C   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
153D   0080           01950         movwf INDF                      ;Save to QUEUE
153E   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
153F   0000           01952         nop                             ;Wait a cycle
  0000001C            01953         count = count + 1
1540   0808           01947         movf ADC_DATAPORT, W            ;Sample
1541   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1542   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1543   0080           01950         movwf INDF                      ;Save to QUEUE
1544   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1545   0000           01952         nop                             ;Wait a cycle
  0000001D            01953         count = count + 1
1546   0808           01947         movf ADC_DATAPORT, W            ;Sample
1547   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1548   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1549   0080           01950         movwf INDF                      ;Save to QUEUE
154A   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
154B   0000           01952         nop                             ;Wait a cycle
  0000001E            01953         count = count + 1
154C   0808           01947         movf ADC_DATAPORT, W            ;Sample
154D   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
154E   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
154F   0080           01950         movwf INDF                      ;Save to QUEUE
1550   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1551   0000           01952         nop                             ;Wait a cycle
  0000001F            01953         count = count + 1
1552   0808           01947         movf ADC_DATAPORT, W            ;Sample
1553   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1554   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1555   0080           01950         movwf INDF                      ;Save to QUEUE
1556   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1557   0000           01952         nop                             ;Wait a cycle
  00000020            01953         count = count + 1
1558   0808           01947         movf ADC_DATAPORT, W            ;Sample
1559   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
155A   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
155B   0080           01950         movwf INDF                      ;Save to QUEUE
155C   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
155D   0000           01952         nop                             ;Wait a cycle
  00000021            01953         count = count + 1
155E   0808           01947         movf ADC_DATAPORT, W            ;Sample
155F   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1560   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1561   0080           01950         movwf INDF                      ;Save to QUEUE
1562   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1563   0000           01952         nop                             ;Wait a cycle
  00000022            01953         count = count + 1
1564   0808           01947         movf ADC_DATAPORT, W            ;Sample
1565   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1566   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1567   0080           01950         movwf INDF                      ;Save to QUEUE
1568   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1569   0000           01952         nop                             ;Wait a cycle
  00000023            01953         count = count + 1
156A   0808           01947         movf ADC_DATAPORT, W            ;Sample
156B   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
156C   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
156D   0080           01950         movwf INDF                      ;Save to QUEUE
156E   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
156F   0000           01952         nop                             ;Wait a cycle
  00000024            01953         count = count + 1
1570   0808           01947         movf ADC_DATAPORT, W            ;Sample
1571   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1572   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1573   0080           01950         movwf INDF                      ;Save to QUEUE
1574   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1575   0000           01952         nop                             ;Wait a cycle
  00000025            01953         count = count + 1
1576   0808           01947         movf ADC_DATAPORT, W            ;Sample
1577   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1578   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1579   0080           01950         movwf INDF                      ;Save to QUEUE
157A   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
157B   0000           01952         nop                             ;Wait a cycle
  00000026            01953         count = count + 1
157C   0808           01947         movf ADC_DATAPORT, W            ;Sample
157D   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

157E   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
157F   0080           01950         movwf INDF                      ;Save to QUEUE
1580   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1581   0000           01952         nop                             ;Wait a cycle
  00000027            01953         count = count + 1
1582   0808           01947         movf ADC_DATAPORT, W            ;Sample
1583   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1584   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1585   0080           01950         movwf INDF                      ;Save to QUEUE
1586   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1587   0000           01952         nop                             ;Wait a cycle
  00000028            01953         count = count + 1
1588   0808           01947         movf ADC_DATAPORT, W            ;Sample
1589   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
158A   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
158B   0080           01950         movwf INDF                      ;Save to QUEUE
158C   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
158D   0000           01952         nop                             ;Wait a cycle
  00000029            01953         count = count + 1
158E   0808           01947         movf ADC_DATAPORT, W            ;Sample
158F   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1590   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1591   0080           01950         movwf INDF                      ;Save to QUEUE
1592   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1593   0000           01952         nop                             ;Wait a cycle
  0000002A            01953         count = count + 1
1594   0808           01947         movf ADC_DATAPORT, W            ;Sample
1595   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1596   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1597   0080           01950         movwf INDF                      ;Save to QUEUE
1598   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1599   0000           01952         nop                             ;Wait a cycle
  0000002B            01953         count = count + 1
159A   0808           01947         movf ADC_DATAPORT, W            ;Sample
159B   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
159C   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
159D   0080           01950         movwf INDF                      ;Save to QUEUE
159E   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
159F   0000           01952         nop                             ;Wait a cycle
  0000002C            01953         count = count + 1
15A0   0808           01947         movf ADC_DATAPORT, W            ;Sample
15A1   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15A2   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15A3   0080           01950         movwf INDF                      ;Save to QUEUE
15A4   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15A5   0000           01952         nop                             ;Wait a cycle
  0000002D            01953         count = count + 1
15A6   0808           01947         movf ADC_DATAPORT, W            ;Sample
15A7   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15A8   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15A9   0080           01950         movwf INDF                      ;Save to QUEUE
15AA   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15AB   0000           01952         nop                             ;Wait a cycle
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002E            01953         count = count + 1
15AC   0808           01947         movf ADC_DATAPORT, W            ;Sample
15AD   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15AE   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15AF   0080           01950         movwf INDF                      ;Save to QUEUE
15B0   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15B1   0000           01952         nop                             ;Wait a cycle
  0000002F            01953         count = count + 1
15B2   0808           01947         movf ADC_DATAPORT, W            ;Sample
15B3   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15B4   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15B5   0080           01950         movwf INDF                      ;Save to QUEUE
15B6   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15B7   0000           01952         nop                             ;Wait a cycle
  00000030            01953         count = count + 1
15B8   0808           01947         movf ADC_DATAPORT, W            ;Sample
15B9   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15BA   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15BB   0080           01950         movwf INDF                      ;Save to QUEUE
15BC   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15BD   0000           01952         nop                             ;Wait a cycle
  00000031            01953         count = count + 1
15BE   0808           01947         movf ADC_DATAPORT, W            ;Sample
15BF   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15C0   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15C1   0080           01950         movwf INDF                      ;Save to QUEUE
15C2   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15C3   0000           01952         nop                             ;Wait a cycle
  00000032            01953         count = count + 1
15C4   0808           01947         movf ADC_DATAPORT, W            ;Sample
15C5   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15C6   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15C7   0080           01950         movwf INDF                      ;Save to QUEUE
15C8   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15C9   0000           01952         nop                             ;Wait a cycle
  00000033            01953         count = count + 1
15CA   0808           01947         movf ADC_DATAPORT, W            ;Sample
15CB   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15CC   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15CD   0080           01950         movwf INDF                      ;Save to QUEUE
15CE   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15CF   0000           01952         nop                             ;Wait a cycle
  00000034            01953         count = count + 1
15D0   0808           01947         movf ADC_DATAPORT, W            ;Sample
15D1   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15D2   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15D3   0080           01950         movwf INDF                      ;Save to QUEUE
15D4   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15D5   0000           01952         nop                             ;Wait a cycle
  00000035            01953         count = count + 1
15D6   0808           01947         movf ADC_DATAPORT, W            ;Sample
15D7   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15D8   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

15D9   0080           01950         movwf INDF                      ;Save to QUEUE
15DA   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15DB   0000           01952         nop                             ;Wait a cycle
  00000036            01953         count = count + 1
15DC   0808           01947         movf ADC_DATAPORT, W            ;Sample
15DD   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15DE   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15DF   0080           01950         movwf INDF                      ;Save to QUEUE
15E0   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15E1   0000           01952         nop                             ;Wait a cycle
  00000037            01953         count = count + 1
15E2   0808           01947         movf ADC_DATAPORT, W            ;Sample
15E3   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15E4   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15E5   0080           01950         movwf INDF                      ;Save to QUEUE
15E6   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15E7   0000           01952         nop                             ;Wait a cycle
  00000038            01953         count = count + 1
15E8   0808           01947         movf ADC_DATAPORT, W            ;Sample
15E9   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15EA   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15EB   0080           01950         movwf INDF                      ;Save to QUEUE
15EC   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15ED   0000           01952         nop                             ;Wait a cycle
  00000039            01953         count = count + 1
15EE   0808           01947         movf ADC_DATAPORT, W            ;Sample
15EF   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15F0   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15F1   0080           01950         movwf INDF                      ;Save to QUEUE
15F2   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15F3   0000           01952         nop                             ;Wait a cycle
  0000003A            01953         count = count + 1
15F4   0808           01947         movf ADC_DATAPORT, W            ;Sample
15F5   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15F6   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15F7   0080           01950         movwf INDF                      ;Save to QUEUE
15F8   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15F9   0000           01952         nop                             ;Wait a cycle
  0000003B            01953         count = count + 1
15FA   0808           01947         movf ADC_DATAPORT, W            ;Sample
15FB   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
15FC   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
15FD   0080           01950         movwf INDF                      ;Save to QUEUE
15FE   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
15FF   0000           01952         nop                             ;Wait a cycle
  0000003C            01953         count = count + 1
1600   0808           01947         movf ADC_DATAPORT, W            ;Sample
1601   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1602   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1603   0080           01950         movwf INDF                      ;Save to QUEUE
1604   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1605   0000           01952         nop                             ;Wait a cycle
  0000003D            01953         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1606   0808           01947         movf ADC_DATAPORT, W            ;Sample
1607   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1608   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1609   0080           01950         movwf INDF                      ;Save to QUEUE
160A   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
160B   0000           01952         nop                             ;Wait a cycle
  0000003E            01953         count = count + 1
160C   0808           01947         movf ADC_DATAPORT, W            ;Sample
160D   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
160E   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
160F   0080           01950         movwf INDF                      ;Save to QUEUE
1610   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1611   0000           01952         nop                             ;Wait a cycle
  0000003F            01953         count = count + 1
1612   0808           01947         movf ADC_DATAPORT, W            ;Sample
1613   1409           01948         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1614   1009           01949         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1615   0080           01950         movwf INDF                      ;Save to QUEUE
1616   0A84           01951         incf FSR, F                     ;Increment QUEUE pointer
1617   0000           01952         nop                             ;Wait a cycle
  00000040            01953         count = count + 1
                      01954     endw
1618   0808           01955     movf ADC_DATAPORT, W
1619   1409           01956     bsf ADC_CONTROLPORT, RDD
161A   1009           01957     bcf ADC_CONTROLPORT, RDD
161B   0080           01958     movwf INDF
161C   1784           01959     bsf FSR, 7                                                  ;goto bank 2
161D   0000           01960     nop                                     ;Wait a cycle
  00000001            01961     count = 1
                      01962     while count < D'23'
161E   0808           01963         movf ADC_DATAPORT, W            ;Sample
161F   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1620   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1621   0080           01966         movwf INDF                      ;Save to QUEUE
1622   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1623   0000           01968         nop                             ;Wait a cycle
  00000002            01969         count = count + 1
1624   0808           01963         movf ADC_DATAPORT, W            ;Sample
1625   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1626   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1627   0080           01966         movwf INDF                      ;Save to QUEUE
1628   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1629   0000           01968         nop                             ;Wait a cycle
  00000003            01969         count = count + 1
162A   0808           01963         movf ADC_DATAPORT, W            ;Sample
162B   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
162C   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
162D   0080           01966         movwf INDF                      ;Save to QUEUE
162E   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
162F   0000           01968         nop                             ;Wait a cycle
  00000004            01969         count = count + 1
1630   0808           01963         movf ADC_DATAPORT, W            ;Sample
1631   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1632   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1633   0080           01966         movwf INDF                      ;Save to QUEUE
1634   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1635   0000           01968         nop                             ;Wait a cycle
  00000005            01969         count = count + 1
1636   0808           01963         movf ADC_DATAPORT, W            ;Sample
1637   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1638   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1639   0080           01966         movwf INDF                      ;Save to QUEUE
163A   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
163B   0000           01968         nop                             ;Wait a cycle
  00000006            01969         count = count + 1
163C   0808           01963         movf ADC_DATAPORT, W            ;Sample
163D   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
163E   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
163F   0080           01966         movwf INDF                      ;Save to QUEUE
1640   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1641   0000           01968         nop                             ;Wait a cycle
  00000007            01969         count = count + 1
1642   0808           01963         movf ADC_DATAPORT, W            ;Sample
1643   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1644   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1645   0080           01966         movwf INDF                      ;Save to QUEUE
1646   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1647   0000           01968         nop                             ;Wait a cycle
  00000008            01969         count = count + 1
1648   0808           01963         movf ADC_DATAPORT, W            ;Sample
1649   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
164A   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
164B   0080           01966         movwf INDF                      ;Save to QUEUE
164C   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
164D   0000           01968         nop                             ;Wait a cycle
  00000009            01969         count = count + 1
164E   0808           01963         movf ADC_DATAPORT, W            ;Sample
164F   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1650   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1651   0080           01966         movwf INDF                      ;Save to QUEUE
1652   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1653   0000           01968         nop                             ;Wait a cycle
  0000000A            01969         count = count + 1
1654   0808           01963         movf ADC_DATAPORT, W            ;Sample
1655   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1656   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1657   0080           01966         movwf INDF                      ;Save to QUEUE
1658   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1659   0000           01968         nop                             ;Wait a cycle
  0000000B            01969         count = count + 1
165A   0808           01963         movf ADC_DATAPORT, W            ;Sample
165B   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
165C   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
165D   0080           01966         movwf INDF                      ;Save to QUEUE
165E   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
165F   0000           01968         nop                             ;Wait a cycle
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000C            01969         count = count + 1
1660   0808           01963         movf ADC_DATAPORT, W            ;Sample
1661   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1662   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1663   0080           01966         movwf INDF                      ;Save to QUEUE
1664   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1665   0000           01968         nop                             ;Wait a cycle
  0000000D            01969         count = count + 1
1666   0808           01963         movf ADC_DATAPORT, W            ;Sample
1667   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1668   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1669   0080           01966         movwf INDF                      ;Save to QUEUE
166A   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
166B   0000           01968         nop                             ;Wait a cycle
  0000000E            01969         count = count + 1
166C   0808           01963         movf ADC_DATAPORT, W            ;Sample
166D   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
166E   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
166F   0080           01966         movwf INDF                      ;Save to QUEUE
1670   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1671   0000           01968         nop                             ;Wait a cycle
  0000000F            01969         count = count + 1
1672   0808           01963         movf ADC_DATAPORT, W            ;Sample
1673   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1674   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1675   0080           01966         movwf INDF                      ;Save to QUEUE
1676   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1677   0000           01968         nop                             ;Wait a cycle
  00000010            01969         count = count + 1
1678   0808           01963         movf ADC_DATAPORT, W            ;Sample
1679   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
167A   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
167B   0080           01966         movwf INDF                      ;Save to QUEUE
167C   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
167D   0000           01968         nop                             ;Wait a cycle
  00000011            01969         count = count + 1
167E   0808           01963         movf ADC_DATAPORT, W            ;Sample
167F   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1680   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1681   0080           01966         movwf INDF                      ;Save to QUEUE
1682   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1683   0000           01968         nop                             ;Wait a cycle
  00000012            01969         count = count + 1
1684   0808           01963         movf ADC_DATAPORT, W            ;Sample
1685   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1686   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1687   0080           01966         movwf INDF                      ;Save to QUEUE
1688   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1689   0000           01968         nop                             ;Wait a cycle
  00000013            01969         count = count + 1
168A   0808           01963         movf ADC_DATAPORT, W            ;Sample
168B   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
168C   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

168D   0080           01966         movwf INDF                      ;Save to QUEUE
168E   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
168F   0000           01968         nop                             ;Wait a cycle
  00000014            01969         count = count + 1
1690   0808           01963         movf ADC_DATAPORT, W            ;Sample
1691   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1692   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1693   0080           01966         movwf INDF                      ;Save to QUEUE
1694   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
1695   0000           01968         nop                             ;Wait a cycle
  00000015            01969         count = count + 1
1696   0808           01963         movf ADC_DATAPORT, W            ;Sample
1697   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1698   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1699   0080           01966         movwf INDF                      ;Save to QUEUE
169A   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
169B   0000           01968         nop                             ;Wait a cycle
  00000016            01969         count = count + 1
169C   0808           01963         movf ADC_DATAPORT, W            ;Sample
169D   1409           01964         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
169E   1009           01965         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
169F   0080           01966         movwf INDF                      ;Save to QUEUE
16A0   0384           01967         decf FSR, F                     ;Increment QUEUE pointer
16A1   0000           01968         nop                             ;Wait a cycle
  00000017            01969         count = count + 1
                      01970     endw
16A2                  01971 Sample833kEntry1
                      01972     while count < BUFFERSIZE
16A2   0808           01973         movf ADC_DATAPORT, W            ;Sample
16A3   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16A4   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16A5   0080           01976         movwf INDF                      ;Save to QUEUE
16A6   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16A7   0000           01978         nop                             ;Wait a cycle
  00000018            01979         count = count + 1
16A8   0808           01973         movf ADC_DATAPORT, W            ;Sample
16A9   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16AA   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16AB   0080           01976         movwf INDF                      ;Save to QUEUE
16AC   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16AD   0000           01978         nop                             ;Wait a cycle
  00000019            01979         count = count + 1
16AE   0808           01973         movf ADC_DATAPORT, W            ;Sample
16AF   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B0   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B1   0080           01976         movwf INDF                      ;Save to QUEUE
16B2   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16B3   0000           01978         nop                             ;Wait a cycle
  0000001A            01979         count = count + 1
16B4   0808           01973         movf ADC_DATAPORT, W            ;Sample
16B5   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B6   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B7   0080           01976         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16B8   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16B9   0000           01978         nop                             ;Wait a cycle
  0000001B            01979         count = count + 1
16BA   0808           01973         movf ADC_DATAPORT, W            ;Sample
16BB   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16BC   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16BD   0080           01976         movwf INDF                      ;Save to QUEUE
16BE   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16BF   0000           01978         nop                             ;Wait a cycle
  0000001C            01979         count = count + 1
16C0   0808           01973         movf ADC_DATAPORT, W            ;Sample
16C1   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C2   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C3   0080           01976         movwf INDF                      ;Save to QUEUE
16C4   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16C5   0000           01978         nop                             ;Wait a cycle
  0000001D            01979         count = count + 1
16C6   0808           01973         movf ADC_DATAPORT, W            ;Sample
16C7   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C8   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C9   0080           01976         movwf INDF                      ;Save to QUEUE
16CA   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16CB   0000           01978         nop                             ;Wait a cycle
  0000001E            01979         count = count + 1
16CC   0808           01973         movf ADC_DATAPORT, W            ;Sample
16CD   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16CE   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16CF   0080           01976         movwf INDF                      ;Save to QUEUE
16D0   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16D1   0000           01978         nop                             ;Wait a cycle
  0000001F            01979         count = count + 1
16D2   0808           01973         movf ADC_DATAPORT, W            ;Sample
16D3   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16D4   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16D5   0080           01976         movwf INDF                      ;Save to QUEUE
16D6   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16D7   0000           01978         nop                             ;Wait a cycle
  00000020            01979         count = count + 1
16D8   0808           01973         movf ADC_DATAPORT, W            ;Sample
16D9   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16DA   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16DB   0080           01976         movwf INDF                      ;Save to QUEUE
16DC   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16DD   0000           01978         nop                             ;Wait a cycle
  00000021            01979         count = count + 1
16DE   0808           01973         movf ADC_DATAPORT, W            ;Sample
16DF   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E0   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E1   0080           01976         movwf INDF                      ;Save to QUEUE
16E2   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16E3   0000           01978         nop                             ;Wait a cycle
  00000022            01979         count = count + 1
16E4   0808           01973         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16E5   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E6   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E7   0080           01976         movwf INDF                      ;Save to QUEUE
16E8   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16E9   0000           01978         nop                             ;Wait a cycle
  00000023            01979         count = count + 1
16EA   0808           01973         movf ADC_DATAPORT, W            ;Sample
16EB   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16EC   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16ED   0080           01976         movwf INDF                      ;Save to QUEUE
16EE   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16EF   0000           01978         nop                             ;Wait a cycle
  00000024            01979         count = count + 1
16F0   0808           01973         movf ADC_DATAPORT, W            ;Sample
16F1   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F2   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16F3   0080           01976         movwf INDF                      ;Save to QUEUE
16F4   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16F5   0000           01978         nop                             ;Wait a cycle
  00000025            01979         count = count + 1
16F6   0808           01973         movf ADC_DATAPORT, W            ;Sample
16F7   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F8   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16F9   0080           01976         movwf INDF                      ;Save to QUEUE
16FA   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
16FB   0000           01978         nop                             ;Wait a cycle
  00000026            01979         count = count + 1
16FC   0808           01973         movf ADC_DATAPORT, W            ;Sample
16FD   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16FE   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16FF   0080           01976         movwf INDF                      ;Save to QUEUE
1700   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1701   0000           01978         nop                             ;Wait a cycle
  00000027            01979         count = count + 1
1702   0808           01973         movf ADC_DATAPORT, W            ;Sample
1703   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1704   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1705   0080           01976         movwf INDF                      ;Save to QUEUE
1706   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1707   0000           01978         nop                             ;Wait a cycle
  00000028            01979         count = count + 1
1708   0808           01973         movf ADC_DATAPORT, W            ;Sample
1709   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
170A   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
170B   0080           01976         movwf INDF                      ;Save to QUEUE
170C   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
170D   0000           01978         nop                             ;Wait a cycle
  00000029            01979         count = count + 1
170E   0808           01973         movf ADC_DATAPORT, W            ;Sample
170F   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1710   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1711   0080           01976         movwf INDF                      ;Save to QUEUE
1712   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1713   0000           01978         nop                             ;Wait a cycle
  0000002A            01979         count = count + 1
1714   0808           01973         movf ADC_DATAPORT, W            ;Sample
1715   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1716   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1717   0080           01976         movwf INDF                      ;Save to QUEUE
1718   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1719   0000           01978         nop                             ;Wait a cycle
  0000002B            01979         count = count + 1
171A   0808           01973         movf ADC_DATAPORT, W            ;Sample
171B   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
171C   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
171D   0080           01976         movwf INDF                      ;Save to QUEUE
171E   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
171F   0000           01978         nop                             ;Wait a cycle
  0000002C            01979         count = count + 1
1720   0808           01973         movf ADC_DATAPORT, W            ;Sample
1721   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1722   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1723   0080           01976         movwf INDF                      ;Save to QUEUE
1724   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1725   0000           01978         nop                             ;Wait a cycle
  0000002D            01979         count = count + 1
1726   0808           01973         movf ADC_DATAPORT, W            ;Sample
1727   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1728   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1729   0080           01976         movwf INDF                      ;Save to QUEUE
172A   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
172B   0000           01978         nop                             ;Wait a cycle
  0000002E            01979         count = count + 1
172C   0808           01973         movf ADC_DATAPORT, W            ;Sample
172D   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
172E   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
172F   0080           01976         movwf INDF                      ;Save to QUEUE
1730   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1731   0000           01978         nop                             ;Wait a cycle
  0000002F            01979         count = count + 1
1732   0808           01973         movf ADC_DATAPORT, W            ;Sample
1733   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1734   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1735   0080           01976         movwf INDF                      ;Save to QUEUE
1736   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1737   0000           01978         nop                             ;Wait a cycle
  00000030            01979         count = count + 1
1738   0808           01973         movf ADC_DATAPORT, W            ;Sample
1739   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
173A   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
173B   0080           01976         movwf INDF                      ;Save to QUEUE
173C   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
173D   0000           01978         nop                             ;Wait a cycle
  00000031            01979         count = count + 1
173E   0808           01973         movf ADC_DATAPORT, W            ;Sample
173F   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1740   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1741   0080           01976         movwf INDF                      ;Save to QUEUE
1742   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1743   0000           01978         nop                             ;Wait a cycle
  00000032            01979         count = count + 1
1744   0808           01973         movf ADC_DATAPORT, W            ;Sample
1745   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1746   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1747   0080           01976         movwf INDF                      ;Save to QUEUE
1748   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1749   0000           01978         nop                             ;Wait a cycle
  00000033            01979         count = count + 1
174A   0808           01973         movf ADC_DATAPORT, W            ;Sample
174B   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
174C   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
174D   0080           01976         movwf INDF                      ;Save to QUEUE
174E   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
174F   0000           01978         nop                             ;Wait a cycle
  00000034            01979         count = count + 1
1750   0808           01973         movf ADC_DATAPORT, W            ;Sample
1751   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1752   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1753   0080           01976         movwf INDF                      ;Save to QUEUE
1754   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1755   0000           01978         nop                             ;Wait a cycle
  00000035            01979         count = count + 1
1756   0808           01973         movf ADC_DATAPORT, W            ;Sample
1757   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1758   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1759   0080           01976         movwf INDF                      ;Save to QUEUE
175A   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
175B   0000           01978         nop                             ;Wait a cycle
  00000036            01979         count = count + 1
175C   0808           01973         movf ADC_DATAPORT, W            ;Sample
175D   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
175E   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
175F   0080           01976         movwf INDF                      ;Save to QUEUE
1760   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1761   0000           01978         nop                             ;Wait a cycle
  00000037            01979         count = count + 1
1762   0808           01973         movf ADC_DATAPORT, W            ;Sample
1763   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1764   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1765   0080           01976         movwf INDF                      ;Save to QUEUE
1766   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1767   0000           01978         nop                             ;Wait a cycle
  00000038            01979         count = count + 1
1768   0808           01973         movf ADC_DATAPORT, W            ;Sample
1769   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
176A   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
176B   0080           01976         movwf INDF                      ;Save to QUEUE
176C   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
176D   0000           01978         nop                             ;Wait a cycle
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000039            01979         count = count + 1
176E   0808           01973         movf ADC_DATAPORT, W            ;Sample
176F   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1770   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1771   0080           01976         movwf INDF                      ;Save to QUEUE
1772   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1773   0000           01978         nop                             ;Wait a cycle
  0000003A            01979         count = count + 1
1774   0808           01973         movf ADC_DATAPORT, W            ;Sample
1775   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1776   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1777   0080           01976         movwf INDF                      ;Save to QUEUE
1778   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1779   0000           01978         nop                             ;Wait a cycle
  0000003B            01979         count = count + 1
177A   0808           01973         movf ADC_DATAPORT, W            ;Sample
177B   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
177C   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
177D   0080           01976         movwf INDF                      ;Save to QUEUE
177E   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
177F   0000           01978         nop                             ;Wait a cycle
  0000003C            01979         count = count + 1
1780   0808           01973         movf ADC_DATAPORT, W            ;Sample
1781   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1782   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1783   0080           01976         movwf INDF                      ;Save to QUEUE
1784   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1785   0000           01978         nop                             ;Wait a cycle
  0000003D            01979         count = count + 1
1786   0808           01973         movf ADC_DATAPORT, W            ;Sample
1787   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1788   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1789   0080           01976         movwf INDF                      ;Save to QUEUE
178A   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
178B   0000           01978         nop                             ;Wait a cycle
  0000003E            01979         count = count + 1
178C   0808           01973         movf ADC_DATAPORT, W            ;Sample
178D   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
178E   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
178F   0080           01976         movwf INDF                      ;Save to QUEUE
1790   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1791   0000           01978         nop                             ;Wait a cycle
  0000003F            01979         count = count + 1
1792   0808           01973         movf ADC_DATAPORT, W            ;Sample
1793   1409           01974         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1794   1009           01975         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1795   0080           01976         movwf INDF                      ;Save to QUEUE
1796   0384           01977         decf FSR, F                     ;Increment QUEUE pointer
1797   0000           01978         nop                             ;Wait a cycle
  00000040            01979         count = count + 1
                      01980     endw
1798   0808           01981     movf ADC_DATAPORT, W
1799   1409           01982     bsf ADC_CONTROLPORT, RDD
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

179A   1009           01983     bcf ADC_CONTROLPORT, RDD
179B   0080           01984     movwf INDF
179C   1783           01985     bsf STATUS, IRP                                             ;goto bank 4
179D   0000           01986     nop                                     ;Wait a cycle
  00000001            01987     count = 1
                      01988     while count < D'44'
179E   0808           01989         movf ADC_DATAPORT, W            ;Sample
179F   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A0   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A1   0080           01992         movwf INDF                      ;Save to QUEUE
17A2   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17A3   0000           01994         nop                             ;Wait a cycle
  00000002            01995         count = count + 1
17A4   0808           01989         movf ADC_DATAPORT, W            ;Sample
17A5   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A6   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A7   0080           01992         movwf INDF                      ;Save to QUEUE
17A8   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17A9   0000           01994         nop                             ;Wait a cycle
  00000003            01995         count = count + 1
17AA   0808           01989         movf ADC_DATAPORT, W            ;Sample
17AB   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17AC   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17AD   0080           01992         movwf INDF                      ;Save to QUEUE
17AE   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17AF   0000           01994         nop                             ;Wait a cycle
  00000004            01995         count = count + 1
17B0   0808           01989         movf ADC_DATAPORT, W            ;Sample
17B1   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B2   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B3   0080           01992         movwf INDF                      ;Save to QUEUE
17B4   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17B5   0000           01994         nop                             ;Wait a cycle
  00000005            01995         count = count + 1
17B6   0808           01989         movf ADC_DATAPORT, W            ;Sample
17B7   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B8   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B9   0080           01992         movwf INDF                      ;Save to QUEUE
17BA   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17BB   0000           01994         nop                             ;Wait a cycle
  00000006            01995         count = count + 1
17BC   0808           01989         movf ADC_DATAPORT, W            ;Sample
17BD   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17BE   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17BF   0080           01992         movwf INDF                      ;Save to QUEUE
17C0   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17C1   0000           01994         nop                             ;Wait a cycle
  00000007            01995         count = count + 1
17C2   0808           01989         movf ADC_DATAPORT, W            ;Sample
17C3   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17C4   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17C5   0080           01992         movwf INDF                      ;Save to QUEUE
17C6   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17C7   0000           01994         nop                             ;Wait a cycle
  00000008            01995         count = count + 1
17C8   0808           01989         movf ADC_DATAPORT, W            ;Sample
17C9   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17CA   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17CB   0080           01992         movwf INDF                      ;Save to QUEUE
17CC   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17CD   0000           01994         nop                             ;Wait a cycle
  00000009            01995         count = count + 1
17CE   0808           01989         movf ADC_DATAPORT, W            ;Sample
17CF   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D0   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D1   0080           01992         movwf INDF                      ;Save to QUEUE
17D2   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17D3   0000           01994         nop                             ;Wait a cycle
  0000000A            01995         count = count + 1
17D4   0808           01989         movf ADC_DATAPORT, W            ;Sample
17D5   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D6   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D7   0080           01992         movwf INDF                      ;Save to QUEUE
17D8   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17D9   0000           01994         nop                             ;Wait a cycle
  0000000B            01995         count = count + 1
17DA   0808           01989         movf ADC_DATAPORT, W            ;Sample
17DB   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17DC   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17DD   0080           01992         movwf INDF                      ;Save to QUEUE
17DE   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17DF   0000           01994         nop                             ;Wait a cycle
  0000000C            01995         count = count + 1
17E0   0808           01989         movf ADC_DATAPORT, W            ;Sample
17E1   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E2   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E3   0080           01992         movwf INDF                      ;Save to QUEUE
17E4   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17E5   0000           01994         nop                             ;Wait a cycle
  0000000D            01995         count = count + 1
17E6   0808           01989         movf ADC_DATAPORT, W            ;Sample
17E7   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E8   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E9   0080           01992         movwf INDF                      ;Save to QUEUE
17EA   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17EB   0000           01994         nop                             ;Wait a cycle
  0000000E            01995         count = count + 1
17EC   0808           01989         movf ADC_DATAPORT, W            ;Sample
17ED   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17EE   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17EF   0080           01992         movwf INDF                      ;Save to QUEUE
17F0   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17F1   0000           01994         nop                             ;Wait a cycle
  0000000F            01995         count = count + 1
17F2   0808           01989         movf ADC_DATAPORT, W            ;Sample
17F3   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17F4   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17F5   0080           01992         movwf INDF                      ;Save to QUEUE
17F6   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17F7   0000           01994         nop                             ;Wait a cycle
  00000010            01995         count = count + 1
17F8   0808           01989         movf ADC_DATAPORT, W            ;Sample
17F9   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17FA   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17FB   0080           01992         movwf INDF                      ;Save to QUEUE
17FC   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
17FD   0000           01994         nop                             ;Wait a cycle
  00000011            01995         count = count + 1
17FE   0808           01989         movf ADC_DATAPORT, W            ;Sample
17FF   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1800   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1801   0080           01992         movwf INDF                      ;Save to QUEUE
1802   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1803   0000           01994         nop                             ;Wait a cycle
  00000012            01995         count = count + 1
1804   0808           01989         movf ADC_DATAPORT, W            ;Sample
1805   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1806   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1807   0080           01992         movwf INDF                      ;Save to QUEUE
1808   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1809   0000           01994         nop                             ;Wait a cycle
  00000013            01995         count = count + 1
180A   0808           01989         movf ADC_DATAPORT, W            ;Sample
180B   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
180C   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
180D   0080           01992         movwf INDF                      ;Save to QUEUE
180E   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
180F   0000           01994         nop                             ;Wait a cycle
  00000014            01995         count = count + 1
1810   0808           01989         movf ADC_DATAPORT, W            ;Sample
1811   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1812   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1813   0080           01992         movwf INDF                      ;Save to QUEUE
1814   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1815   0000           01994         nop                             ;Wait a cycle
  00000015            01995         count = count + 1
1816   0808           01989         movf ADC_DATAPORT, W            ;Sample
1817   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1818   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1819   0080           01992         movwf INDF                      ;Save to QUEUE
181A   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
181B   0000           01994         nop                             ;Wait a cycle
  00000016            01995         count = count + 1
181C   0808           01989         movf ADC_DATAPORT, W            ;Sample
181D   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
181E   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
181F   0080           01992         movwf INDF                      ;Save to QUEUE
1820   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1821   0000           01994         nop                             ;Wait a cycle
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000017            01995         count = count + 1
1822   0808           01989         movf ADC_DATAPORT, W            ;Sample
1823   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1824   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1825   0080           01992         movwf INDF                      ;Save to QUEUE
1826   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1827   0000           01994         nop                             ;Wait a cycle
  00000018            01995         count = count + 1
1828   0808           01989         movf ADC_DATAPORT, W            ;Sample
1829   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
182A   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
182B   0080           01992         movwf INDF                      ;Save to QUEUE
182C   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
182D   0000           01994         nop                             ;Wait a cycle
  00000019            01995         count = count + 1
182E   0808           01989         movf ADC_DATAPORT, W            ;Sample
182F   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1830   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1831   0080           01992         movwf INDF                      ;Save to QUEUE
1832   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1833   0000           01994         nop                             ;Wait a cycle
  0000001A            01995         count = count + 1
1834   0808           01989         movf ADC_DATAPORT, W            ;Sample
1835   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1836   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1837   0080           01992         movwf INDF                      ;Save to QUEUE
1838   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1839   0000           01994         nop                             ;Wait a cycle
  0000001B            01995         count = count + 1
183A   0808           01989         movf ADC_DATAPORT, W            ;Sample
183B   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
183C   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
183D   0080           01992         movwf INDF                      ;Save to QUEUE
183E   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
183F   0000           01994         nop                             ;Wait a cycle
  0000001C            01995         count = count + 1
1840   0808           01989         movf ADC_DATAPORT, W            ;Sample
1841   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1842   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1843   0080           01992         movwf INDF                      ;Save to QUEUE
1844   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1845   0000           01994         nop                             ;Wait a cycle
  0000001D            01995         count = count + 1
1846   0808           01989         movf ADC_DATAPORT, W            ;Sample
1847   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1848   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1849   0080           01992         movwf INDF                      ;Save to QUEUE
184A   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
184B   0000           01994         nop                             ;Wait a cycle
  0000001E            01995         count = count + 1
184C   0808           01989         movf ADC_DATAPORT, W            ;Sample
184D   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
184E   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

184F   0080           01992         movwf INDF                      ;Save to QUEUE
1850   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1851   0000           01994         nop                             ;Wait a cycle
  0000001F            01995         count = count + 1
1852   0808           01989         movf ADC_DATAPORT, W            ;Sample
1853   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1854   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1855   0080           01992         movwf INDF                      ;Save to QUEUE
1856   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1857   0000           01994         nop                             ;Wait a cycle
  00000020            01995         count = count + 1
1858   0808           01989         movf ADC_DATAPORT, W            ;Sample
1859   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
185A   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
185B   0080           01992         movwf INDF                      ;Save to QUEUE
185C   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
185D   0000           01994         nop                             ;Wait a cycle
  00000021            01995         count = count + 1
185E   0808           01989         movf ADC_DATAPORT, W            ;Sample
185F   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1860   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1861   0080           01992         movwf INDF                      ;Save to QUEUE
1862   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1863   0000           01994         nop                             ;Wait a cycle
  00000022            01995         count = count + 1
1864   0808           01989         movf ADC_DATAPORT, W            ;Sample
1865   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1866   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1867   0080           01992         movwf INDF                      ;Save to QUEUE
1868   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1869   0000           01994         nop                             ;Wait a cycle
  00000023            01995         count = count + 1
186A   0808           01989         movf ADC_DATAPORT, W            ;Sample
186B   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
186C   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
186D   0080           01992         movwf INDF                      ;Save to QUEUE
186E   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
186F   0000           01994         nop                             ;Wait a cycle
  00000024            01995         count = count + 1
1870   0808           01989         movf ADC_DATAPORT, W            ;Sample
1871   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1872   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1873   0080           01992         movwf INDF                      ;Save to QUEUE
1874   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1875   0000           01994         nop                             ;Wait a cycle
  00000025            01995         count = count + 1
1876   0808           01989         movf ADC_DATAPORT, W            ;Sample
1877   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1878   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1879   0080           01992         movwf INDF                      ;Save to QUEUE
187A   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
187B   0000           01994         nop                             ;Wait a cycle
  00000026            01995         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

187C   0808           01989         movf ADC_DATAPORT, W            ;Sample
187D   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
187E   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
187F   0080           01992         movwf INDF                      ;Save to QUEUE
1880   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1881   0000           01994         nop                             ;Wait a cycle
  00000027            01995         count = count + 1
1882   0808           01989         movf ADC_DATAPORT, W            ;Sample
1883   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1884   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1885   0080           01992         movwf INDF                      ;Save to QUEUE
1886   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1887   0000           01994         nop                             ;Wait a cycle
  00000028            01995         count = count + 1
1888   0808           01989         movf ADC_DATAPORT, W            ;Sample
1889   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
188A   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
188B   0080           01992         movwf INDF                      ;Save to QUEUE
188C   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
188D   0000           01994         nop                             ;Wait a cycle
  00000029            01995         count = count + 1
188E   0808           01989         movf ADC_DATAPORT, W            ;Sample
188F   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1890   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1891   0080           01992         movwf INDF                      ;Save to QUEUE
1892   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1893   0000           01994         nop                             ;Wait a cycle
  0000002A            01995         count = count + 1
1894   0808           01989         movf ADC_DATAPORT, W            ;Sample
1895   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1896   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1897   0080           01992         movwf INDF                      ;Save to QUEUE
1898   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
1899   0000           01994         nop                             ;Wait a cycle
  0000002B            01995         count = count + 1
189A   0808           01989         movf ADC_DATAPORT, W            ;Sample
189B   1409           01990         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
189C   1009           01991         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
189D   0080           01992         movwf INDF                      ;Save to QUEUE
189E   0A84           01993         incf FSR, F                     ;Increment QUEUE pointer
189F   0000           01994         nop                             ;Wait a cycle
  0000002C            01995         count = count + 1
                      01996     endw
18A0                  01997 Sample833kEntry2
                      01998     while count < BUFFERSIZE
18A0   0808           01999         movf ADC_DATAPORT, W            ;Sample
18A1   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A2   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A3   0080           02002         movwf INDF                      ;Save to QUEUE
18A4   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18A5   0000           02004         nop                             ;Wait a cycle
  0000002D            02005         count = count + 1
18A6   0808           01999         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

18A7   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A8   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A9   0080           02002         movwf INDF                      ;Save to QUEUE
18AA   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18AB   0000           02004         nop                             ;Wait a cycle
  0000002E            02005         count = count + 1
18AC   0808           01999         movf ADC_DATAPORT, W            ;Sample
18AD   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18AE   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18AF   0080           02002         movwf INDF                      ;Save to QUEUE
18B0   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18B1   0000           02004         nop                             ;Wait a cycle
  0000002F            02005         count = count + 1
18B2   0808           01999         movf ADC_DATAPORT, W            ;Sample
18B3   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18B4   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18B5   0080           02002         movwf INDF                      ;Save to QUEUE
18B6   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18B7   0000           02004         nop                             ;Wait a cycle
  00000030            02005         count = count + 1
18B8   0808           01999         movf ADC_DATAPORT, W            ;Sample
18B9   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18BA   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18BB   0080           02002         movwf INDF                      ;Save to QUEUE
18BC   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18BD   0000           02004         nop                             ;Wait a cycle
  00000031            02005         count = count + 1
18BE   0808           01999         movf ADC_DATAPORT, W            ;Sample
18BF   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C0   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C1   0080           02002         movwf INDF                      ;Save to QUEUE
18C2   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18C3   0000           02004         nop                             ;Wait a cycle
  00000032            02005         count = count + 1
18C4   0808           01999         movf ADC_DATAPORT, W            ;Sample
18C5   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C6   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C7   0080           02002         movwf INDF                      ;Save to QUEUE
18C8   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18C9   0000           02004         nop                             ;Wait a cycle
  00000033            02005         count = count + 1
18CA   0808           01999         movf ADC_DATAPORT, W            ;Sample
18CB   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18CC   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18CD   0080           02002         movwf INDF                      ;Save to QUEUE
18CE   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18CF   0000           02004         nop                             ;Wait a cycle
  00000034            02005         count = count + 1
18D0   0808           01999         movf ADC_DATAPORT, W            ;Sample
18D1   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D2   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D3   0080           02002         movwf INDF                      ;Save to QUEUE
18D4   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

18D5   0000           02004         nop                             ;Wait a cycle
  00000035            02005         count = count + 1
18D6   0808           01999         movf ADC_DATAPORT, W            ;Sample
18D7   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D8   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D9   0080           02002         movwf INDF                      ;Save to QUEUE
18DA   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18DB   0000           02004         nop                             ;Wait a cycle
  00000036            02005         count = count + 1
18DC   0808           01999         movf ADC_DATAPORT, W            ;Sample
18DD   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18DE   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18DF   0080           02002         movwf INDF                      ;Save to QUEUE
18E0   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18E1   0000           02004         nop                             ;Wait a cycle
  00000037            02005         count = count + 1
18E2   0808           01999         movf ADC_DATAPORT, W            ;Sample
18E3   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18E4   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18E5   0080           02002         movwf INDF                      ;Save to QUEUE
18E6   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18E7   0000           02004         nop                             ;Wait a cycle
  00000038            02005         count = count + 1
18E8   0808           01999         movf ADC_DATAPORT, W            ;Sample
18E9   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18EA   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18EB   0080           02002         movwf INDF                      ;Save to QUEUE
18EC   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18ED   0000           02004         nop                             ;Wait a cycle
  00000039            02005         count = count + 1
18EE   0808           01999         movf ADC_DATAPORT, W            ;Sample
18EF   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F0   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F1   0080           02002         movwf INDF                      ;Save to QUEUE
18F2   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18F3   0000           02004         nop                             ;Wait a cycle
  0000003A            02005         count = count + 1
18F4   0808           01999         movf ADC_DATAPORT, W            ;Sample
18F5   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F6   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F7   0080           02002         movwf INDF                      ;Save to QUEUE
18F8   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18F9   0000           02004         nop                             ;Wait a cycle
  0000003B            02005         count = count + 1
18FA   0808           01999         movf ADC_DATAPORT, W            ;Sample
18FB   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18FC   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18FD   0080           02002         movwf INDF                      ;Save to QUEUE
18FE   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
18FF   0000           02004         nop                             ;Wait a cycle
  0000003C            02005         count = count + 1
1900   0808           01999         movf ADC_DATAPORT, W            ;Sample
1901   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1902   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1903   0080           02002         movwf INDF                      ;Save to QUEUE
1904   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
1905   0000           02004         nop                             ;Wait a cycle
  0000003D            02005         count = count + 1
1906   0808           01999         movf ADC_DATAPORT, W            ;Sample
1907   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1908   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1909   0080           02002         movwf INDF                      ;Save to QUEUE
190A   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
190B   0000           02004         nop                             ;Wait a cycle
  0000003E            02005         count = count + 1
190C   0808           01999         movf ADC_DATAPORT, W            ;Sample
190D   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
190E   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
190F   0080           02002         movwf INDF                      ;Save to QUEUE
1910   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
1911   0000           02004         nop                             ;Wait a cycle
  0000003F            02005         count = count + 1
1912   0808           01999         movf ADC_DATAPORT, W            ;Sample
1913   1409           02000         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1914   1009           02001         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1915   0080           02002         movwf INDF                      ;Save to QUEUE
1916   0A84           02003         incf FSR, F                     ;Increment QUEUE pointer
1917   0000           02004         nop                             ;Wait a cycle
  00000040            02005         count = count + 1
                      02006     endw
1918   0808           02007     movf ADC_DATAPORT, W
1919   1409           02008     bsf ADC_CONTROLPORT, RDD
191A   1009           02009     bcf ADC_CONTROLPORT, RDD
191B   0080           02010     movwf INDF
191C   1384           02011     bcf FSR, 7                                                  ;goto bank 3
191D   0000           02012     nop                                     ;Wait a cycle
  00000001            02013     count = 1
                      02014     while count < BUFFERSIZE
191E   0808           02015         movf ADC_DATAPORT, W            ;Sample
191F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1920   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1921   0080           02018         movwf INDF                      ;Save to QUEUE
1922   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1923   0000           02020         nop                             ;Wait a cycle
  00000002            02021         count = count + 1
1924   0808           02015         movf ADC_DATAPORT, W            ;Sample
1925   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1926   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1927   0080           02018         movwf INDF                      ;Save to QUEUE
1928   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1929   0000           02020         nop                             ;Wait a cycle
  00000003            02021         count = count + 1
192A   0808           02015         movf ADC_DATAPORT, W            ;Sample
192B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
192C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
192D   0080           02018         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

192E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
192F   0000           02020         nop                             ;Wait a cycle
  00000004            02021         count = count + 1
1930   0808           02015         movf ADC_DATAPORT, W            ;Sample
1931   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1932   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1933   0080           02018         movwf INDF                      ;Save to QUEUE
1934   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1935   0000           02020         nop                             ;Wait a cycle
  00000005            02021         count = count + 1
1936   0808           02015         movf ADC_DATAPORT, W            ;Sample
1937   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1938   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1939   0080           02018         movwf INDF                      ;Save to QUEUE
193A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
193B   0000           02020         nop                             ;Wait a cycle
  00000006            02021         count = count + 1
193C   0808           02015         movf ADC_DATAPORT, W            ;Sample
193D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
193E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
193F   0080           02018         movwf INDF                      ;Save to QUEUE
1940   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1941   0000           02020         nop                             ;Wait a cycle
  00000007            02021         count = count + 1
1942   0808           02015         movf ADC_DATAPORT, W            ;Sample
1943   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1944   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1945   0080           02018         movwf INDF                      ;Save to QUEUE
1946   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1947   0000           02020         nop                             ;Wait a cycle
  00000008            02021         count = count + 1
1948   0808           02015         movf ADC_DATAPORT, W            ;Sample
1949   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
194A   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
194B   0080           02018         movwf INDF                      ;Save to QUEUE
194C   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
194D   0000           02020         nop                             ;Wait a cycle
  00000009            02021         count = count + 1
194E   0808           02015         movf ADC_DATAPORT, W            ;Sample
194F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1950   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1951   0080           02018         movwf INDF                      ;Save to QUEUE
1952   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1953   0000           02020         nop                             ;Wait a cycle
  0000000A            02021         count = count + 1
1954   0808           02015         movf ADC_DATAPORT, W            ;Sample
1955   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1956   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1957   0080           02018         movwf INDF                      ;Save to QUEUE
1958   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1959   0000           02020         nop                             ;Wait a cycle
  0000000B            02021         count = count + 1
195A   0808           02015         movf ADC_DATAPORT, W            ;Sample
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

195B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
195C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
195D   0080           02018         movwf INDF                      ;Save to QUEUE
195E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
195F   0000           02020         nop                             ;Wait a cycle
  0000000C            02021         count = count + 1
1960   0808           02015         movf ADC_DATAPORT, W            ;Sample
1961   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1962   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1963   0080           02018         movwf INDF                      ;Save to QUEUE
1964   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1965   0000           02020         nop                             ;Wait a cycle
  0000000D            02021         count = count + 1
1966   0808           02015         movf ADC_DATAPORT, W            ;Sample
1967   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1968   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1969   0080           02018         movwf INDF                      ;Save to QUEUE
196A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
196B   0000           02020         nop                             ;Wait a cycle
  0000000E            02021         count = count + 1
196C   0808           02015         movf ADC_DATAPORT, W            ;Sample
196D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
196E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
196F   0080           02018         movwf INDF                      ;Save to QUEUE
1970   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1971   0000           02020         nop                             ;Wait a cycle
  0000000F            02021         count = count + 1
1972   0808           02015         movf ADC_DATAPORT, W            ;Sample
1973   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1974   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1975   0080           02018         movwf INDF                      ;Save to QUEUE
1976   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1977   0000           02020         nop                             ;Wait a cycle
  00000010            02021         count = count + 1
1978   0808           02015         movf ADC_DATAPORT, W            ;Sample
1979   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
197A   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
197B   0080           02018         movwf INDF                      ;Save to QUEUE
197C   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
197D   0000           02020         nop                             ;Wait a cycle
  00000011            02021         count = count + 1
197E   0808           02015         movf ADC_DATAPORT, W            ;Sample
197F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1980   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1981   0080           02018         movwf INDF                      ;Save to QUEUE
1982   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1983   0000           02020         nop                             ;Wait a cycle
  00000012            02021         count = count + 1
1984   0808           02015         movf ADC_DATAPORT, W            ;Sample
1985   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1986   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1987   0080           02018         movwf INDF                      ;Save to QUEUE
1988   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1989   0000           02020         nop                             ;Wait a cycle
  00000013            02021         count = count + 1
198A   0808           02015         movf ADC_DATAPORT, W            ;Sample
198B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
198C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
198D   0080           02018         movwf INDF                      ;Save to QUEUE
198E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
198F   0000           02020         nop                             ;Wait a cycle
  00000014            02021         count = count + 1
1990   0808           02015         movf ADC_DATAPORT, W            ;Sample
1991   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1992   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1993   0080           02018         movwf INDF                      ;Save to QUEUE
1994   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1995   0000           02020         nop                             ;Wait a cycle
  00000015            02021         count = count + 1
1996   0808           02015         movf ADC_DATAPORT, W            ;Sample
1997   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1998   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1999   0080           02018         movwf INDF                      ;Save to QUEUE
199A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
199B   0000           02020         nop                             ;Wait a cycle
  00000016            02021         count = count + 1
199C   0808           02015         movf ADC_DATAPORT, W            ;Sample
199D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
199E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
199F   0080           02018         movwf INDF                      ;Save to QUEUE
19A0   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19A1   0000           02020         nop                             ;Wait a cycle
  00000017            02021         count = count + 1
19A2   0808           02015         movf ADC_DATAPORT, W            ;Sample
19A3   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19A4   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19A5   0080           02018         movwf INDF                      ;Save to QUEUE
19A6   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19A7   0000           02020         nop                             ;Wait a cycle
  00000018            02021         count = count + 1
19A8   0808           02015         movf ADC_DATAPORT, W            ;Sample
19A9   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19AA   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19AB   0080           02018         movwf INDF                      ;Save to QUEUE
19AC   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19AD   0000           02020         nop                             ;Wait a cycle
  00000019            02021         count = count + 1
19AE   0808           02015         movf ADC_DATAPORT, W            ;Sample
19AF   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19B0   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19B1   0080           02018         movwf INDF                      ;Save to QUEUE
19B2   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19B3   0000           02020         nop                             ;Wait a cycle
  0000001A            02021         count = count + 1
19B4   0808           02015         movf ADC_DATAPORT, W            ;Sample
19B5   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19B6   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19B7   0080           02018         movwf INDF                      ;Save to QUEUE
19B8   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19B9   0000           02020         nop                             ;Wait a cycle
  0000001B            02021         count = count + 1
19BA   0808           02015         movf ADC_DATAPORT, W            ;Sample
19BB   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19BC   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19BD   0080           02018         movwf INDF                      ;Save to QUEUE
19BE   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19BF   0000           02020         nop                             ;Wait a cycle
  0000001C            02021         count = count + 1
19C0   0808           02015         movf ADC_DATAPORT, W            ;Sample
19C1   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19C2   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19C3   0080           02018         movwf INDF                      ;Save to QUEUE
19C4   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19C5   0000           02020         nop                             ;Wait a cycle
  0000001D            02021         count = count + 1
19C6   0808           02015         movf ADC_DATAPORT, W            ;Sample
19C7   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19C8   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19C9   0080           02018         movwf INDF                      ;Save to QUEUE
19CA   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19CB   0000           02020         nop                             ;Wait a cycle
  0000001E            02021         count = count + 1
19CC   0808           02015         movf ADC_DATAPORT, W            ;Sample
19CD   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19CE   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19CF   0080           02018         movwf INDF                      ;Save to QUEUE
19D0   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19D1   0000           02020         nop                             ;Wait a cycle
  0000001F            02021         count = count + 1
19D2   0808           02015         movf ADC_DATAPORT, W            ;Sample
19D3   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19D4   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19D5   0080           02018         movwf INDF                      ;Save to QUEUE
19D6   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19D7   0000           02020         nop                             ;Wait a cycle
  00000020            02021         count = count + 1
19D8   0808           02015         movf ADC_DATAPORT, W            ;Sample
19D9   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19DA   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19DB   0080           02018         movwf INDF                      ;Save to QUEUE
19DC   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19DD   0000           02020         nop                             ;Wait a cycle
  00000021            02021         count = count + 1
19DE   0808           02015         movf ADC_DATAPORT, W            ;Sample
19DF   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19E0   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19E1   0080           02018         movwf INDF                      ;Save to QUEUE
19E2   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19E3   0000           02020         nop                             ;Wait a cycle
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000022            02021         count = count + 1
19E4   0808           02015         movf ADC_DATAPORT, W            ;Sample
19E5   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19E6   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19E7   0080           02018         movwf INDF                      ;Save to QUEUE
19E8   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19E9   0000           02020         nop                             ;Wait a cycle
  00000023            02021         count = count + 1
19EA   0808           02015         movf ADC_DATAPORT, W            ;Sample
19EB   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19EC   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19ED   0080           02018         movwf INDF                      ;Save to QUEUE
19EE   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19EF   0000           02020         nop                             ;Wait a cycle
  00000024            02021         count = count + 1
19F0   0808           02015         movf ADC_DATAPORT, W            ;Sample
19F1   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19F2   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19F3   0080           02018         movwf INDF                      ;Save to QUEUE
19F4   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19F5   0000           02020         nop                             ;Wait a cycle
  00000025            02021         count = count + 1
19F6   0808           02015         movf ADC_DATAPORT, W            ;Sample
19F7   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19F8   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19F9   0080           02018         movwf INDF                      ;Save to QUEUE
19FA   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
19FB   0000           02020         nop                             ;Wait a cycle
  00000026            02021         count = count + 1
19FC   0808           02015         movf ADC_DATAPORT, W            ;Sample
19FD   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
19FE   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
19FF   0080           02018         movwf INDF                      ;Save to QUEUE
1A00   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A01   0000           02020         nop                             ;Wait a cycle
  00000027            02021         count = count + 1
1A02   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A03   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A04   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A05   0080           02018         movwf INDF                      ;Save to QUEUE
1A06   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A07   0000           02020         nop                             ;Wait a cycle
  00000028            02021         count = count + 1
1A08   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A09   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A0A   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A0B   0080           02018         movwf INDF                      ;Save to QUEUE
1A0C   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A0D   0000           02020         nop                             ;Wait a cycle
  00000029            02021         count = count + 1
1A0E   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A0F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A10   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A11   0080           02018         movwf INDF                      ;Save to QUEUE
1A12   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A13   0000           02020         nop                             ;Wait a cycle
  0000002A            02021         count = count + 1
1A14   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A15   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A16   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A17   0080           02018         movwf INDF                      ;Save to QUEUE
1A18   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A19   0000           02020         nop                             ;Wait a cycle
  0000002B            02021         count = count + 1
1A1A   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A1B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A1C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A1D   0080           02018         movwf INDF                      ;Save to QUEUE
1A1E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A1F   0000           02020         nop                             ;Wait a cycle
  0000002C            02021         count = count + 1
1A20   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A21   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A22   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A23   0080           02018         movwf INDF                      ;Save to QUEUE
1A24   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A25   0000           02020         nop                             ;Wait a cycle
  0000002D            02021         count = count + 1
1A26   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A27   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A28   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A29   0080           02018         movwf INDF                      ;Save to QUEUE
1A2A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A2B   0000           02020         nop                             ;Wait a cycle
  0000002E            02021         count = count + 1
1A2C   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A2D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A2E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A2F   0080           02018         movwf INDF                      ;Save to QUEUE
1A30   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A31   0000           02020         nop                             ;Wait a cycle
  0000002F            02021         count = count + 1
1A32   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A33   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A34   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A35   0080           02018         movwf INDF                      ;Save to QUEUE
1A36   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A37   0000           02020         nop                             ;Wait a cycle
  00000030            02021         count = count + 1
1A38   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A39   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A3A   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A3B   0080           02018         movwf INDF                      ;Save to QUEUE
1A3C   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A3D   0000           02020         nop                             ;Wait a cycle
  00000031            02021         count = count + 1
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A3E   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A3F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A40   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A41   0080           02018         movwf INDF                      ;Save to QUEUE
1A42   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A43   0000           02020         nop                             ;Wait a cycle
  00000032            02021         count = count + 1
1A44   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A45   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A46   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A47   0080           02018         movwf INDF                      ;Save to QUEUE
1A48   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A49   0000           02020         nop                             ;Wait a cycle
  00000033            02021         count = count + 1
1A4A   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A4B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A4C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A4D   0080           02018         movwf INDF                      ;Save to QUEUE
1A4E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A4F   0000           02020         nop                             ;Wait a cycle
  00000034            02021         count = count + 1
1A50   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A51   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A52   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A53   0080           02018         movwf INDF                      ;Save to QUEUE
1A54   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A55   0000           02020         nop                             ;Wait a cycle
  00000035            02021         count = count + 1
1A56   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A57   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A58   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A59   0080           02018         movwf INDF                      ;Save to QUEUE
1A5A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A5B   0000           02020         nop                             ;Wait a cycle
  00000036            02021         count = count + 1
1A5C   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A5D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A5E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A5F   0080           02018         movwf INDF                      ;Save to QUEUE
1A60   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A61   0000           02020         nop                             ;Wait a cycle
  00000037            02021         count = count + 1
1A62   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A63   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A64   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A65   0080           02018         movwf INDF                      ;Save to QUEUE
1A66   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A67   0000           02020         nop                             ;Wait a cycle
  00000038            02021         count = count + 1
1A68   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A69   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A6A   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A6B   0080           02018         movwf INDF                      ;Save to QUEUE
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A6C   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A6D   0000           02020         nop                             ;Wait a cycle
  00000039            02021         count = count + 1
1A6E   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A6F   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A70   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A71   0080           02018         movwf INDF                      ;Save to QUEUE
1A72   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A73   0000           02020         nop                             ;Wait a cycle
  0000003A            02021         count = count + 1
1A74   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A75   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A76   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A77   0080           02018         movwf INDF                      ;Save to QUEUE
1A78   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A79   0000           02020         nop                             ;Wait a cycle
  0000003B            02021         count = count + 1
1A7A   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A7B   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A7C   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A7D   0080           02018         movwf INDF                      ;Save to QUEUE
1A7E   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A7F   0000           02020         nop                             ;Wait a cycle
  0000003C            02021         count = count + 1
1A80   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A81   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A82   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A83   0080           02018         movwf INDF                      ;Save to QUEUE
1A84   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A85   0000           02020         nop                             ;Wait a cycle
  0000003D            02021         count = count + 1
1A86   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A87   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A88   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A89   0080           02018         movwf INDF                      ;Save to QUEUE
1A8A   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A8B   0000           02020         nop                             ;Wait a cycle
  0000003E            02021         count = count + 1
1A8C   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A8D   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A8E   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A8F   0080           02018         movwf INDF                      ;Save to QUEUE
1A90   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A91   0000           02020         nop                             ;Wait a cycle
  0000003F            02021         count = count + 1
1A92   0808           02015         movf ADC_DATAPORT, W            ;Sample
1A93   1409           02016         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1A94   1009           02017         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1A95   0080           02018         movwf INDF                      ;Save to QUEUE
1A96   0384           02019         decf FSR, F                     ;Increment QUEUE pointer
1A97   0000           02020         nop                             ;Wait a cycle
  00000040            02021         count = count + 1
                      02022     endw
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A98   0808           02023     movf ADC_DATAPORT, W                ;Last sample
1A99   1409           02024     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
                      02025         MGOTOSETUP SampleRep2MEnd                       ;If we're using repetative mode
                          M         if (SampleRep2MEnd & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
1A9A   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MEnd & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1A9B   118A               M                 bcf PCLATH, 3
                          M         endif
1A9C   1970           02026         btfsc configLoc1, 2
Message[306]: Crossing page boundary -- ensure page bits are set.
1A9D   2C6D           02027                 goto SampleRep2MEnd
1A9E                  02028 Sample833kEnd
                      02029         MGOTO ADCShutdown
                          M         MGOTOSETUP ADCShutdown
                          M         if (ADCShutdown & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
1A9E   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (ADCShutdown & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1A9F   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1AA0   29A0               M         goto ADCShutdown
                      02030                 
                      02031 ;=============================================================================
                      02032 end     ;end of program
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 191


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ACDCMODE                          00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCShutdown                       000001A0
ADC_CONTROLPORT                   00000009
ADC_DATAPORT                      00000008
ADC_PORT                          00000006
ADDEN                             00000003
ADDFF                             
ADDFF_TW                          
ADDLF                             
ADDLF_TW                          
ADDR0                             00000001
ADDR1                             00000002
ADDR2                             00000003
ADDWPC                            
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ANALOG_ACDC                       00000007
ANALOG_GAIN                       00000005
ANALOG_SEL                        00000007
ANDFF                             
ANDFF_TW                          
ANDLF                             
ANDLF_TW                          
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS12                             00000004
ANS13                             00000005
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000188
ANSELH                            00000189
ATTNPORT                          00000006
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 192


SYMBOL TABLE
  LABEL                             VALUE 

BAUDCTL                           00000187
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BNKSEL                            
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
BUFFERMAX                         0000005F
BUFFERMIN                         00000020
BUFFERSIZE                        00000040
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SEN                             00000005
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2RSEL                            00000004
C2SYNC                            00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 193


SYMBOL TABLE
  LABEL                             VALUE 

CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1                             00000015
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2                             0000001B
CCPR2H                            0000001C
CCPR2L                            0000001B
CH1ATTN                           00000006
CH1SEL                            00000001
CH1SELG                           00000004
CH2ATTN                           00000007
CH2SEL                            00000002
CH2SELG                           00000005
CHANNELBIT                        00000004
CHANNELCONFSEND                   
CHANNELCONFSTORE                  
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CLK                               00000005
CLOCKFREQBIT                      00000005
CM1CON0                           00000107
CM2CON0                           00000108
CM2CON1                           00000109
CONFRECIEVE                       
CONFSEND                          
CREN                              00000004
CS                                00000001
CSRC                              00000007
CURRENTBANK                       00000000
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 194


SYMBOL TABLE
  LABEL                             VALUE 

DC2B1                             00000005
D_A                               00000005
D_NOT_A                           00000005
Delay                             00000195
DelayFive                         000003A7
DelayLoop                         00000196
DelaySeven                        000003A6
DelayTwo                          000003A9
ECCPAS                            0000009C
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FREQMODEBIT0                      00000000
FREQMODEBIT1                      00000001
FREQMODEBIT2                      00000002
FREQMODEBIT3                      00000003
FREQSAMPLE1M                      00000000
FREQSAMPLE250K                    00000004
FREQSAMPLE417K                    00000003
FREQSAMPLE625K                    00000002
FREQSAMPLE833K                    00000001
FREQSAMPLEDELAYED                 00000005
FREQSAMPLEREP2M                   00000007
FREQSAMPLEREP5M                   00000006
FREQSAMPLEXY192K                  0000000A
FREQSAMPLEXY250K                  00000009
FREQSAMPLEXY417K                  00000008
FREQSAMPLEXY500k                  0000000D
FREQSAMPLEXYDELAYED               0000000B
FREQSAMPLEXYINT                   0000000C
FSR                               00000004
FVREN                             00000000
GAIN1                             00000000
GAIN5                             00000001
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
GO_NOT_DONE                       00000001
GetByte                           00000179
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 195


SYMBOL TABLE
  LABEL                             VALUE 

GetByteSerial                     0000017B
GetByteSerialB                    0000017E
GetByteSerialC                    00000182
GetByteSerialD                    00000186
GetByteSerialE                    0000018A
HARDWARE                          00000012
HTS                               00000002
I2CPORT                           00000006
I2CSGetAck                        00000068
I2CSGetAckL1                      0000006D
I2CSGetByte                       0000003A
I2CSGetByteL1                     0000003D
I2CSGetByteL2                     00000043
I2CSGetStop                       00000018
I2CSGetStopL1                     0000001C
I2CSGetStopL2                     00000023
I2CSGetStopL3                     0000002A
I2CSPutAck                        00000047
I2CSPutAckL1                      0000004B
I2CSPutAckL2                      0000004D
I2CSPutByte                       00000053
I2CSPutByteL1                     00000057
I2CSPutByteL1S                    00000059
I2CSPutByteL2                     0000005E
I2CSPutByteL3                     00000063
I2CSWaitStart                     0000002D
I2CSWaitStartL1                   00000038
I2CSWaitStartL2                   00000034
I2CSWaitStartL3                   00000030
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOCB                              00000096
IOCB0                             00000000
IOCB1                             00000001
IOCB2                             00000002
IOCB3                             00000003
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IORFF                             
IORFF_TW                          
IORLF                             
IORLF_TW                          
IRCF0                             00000004
IRCF1                             00000005
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 196


SYMBOL TABLE
  LABEL                             VALUE 

IRCF2                             00000006
IRP                               00000007
Initial                           00000070
IntHandler                        00000004
IntHandlerB                       00000006
IntHandlerC                       00000009
IntSaveContext                    00000013
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MGOTO                             
MGOTOSETUP                        
MOVFF                             
MOVFF_TW                          
MOVLF                             
MOVLF_TW                          
MSK                               00000093
MSK0                              00000000
MSK1                              00000001
MSK2                              00000002
MSK3                              00000003
MSK4                              00000004
MSK5                              00000005
MSK6                              00000006
MSK7                              00000007
Main                              00000094
MainA                             00000095
MainB                             0000009E
MainSelect                        0000000F
MainSetTriggerDelay               000000B9
MainSkipSetTriggerDelay           000000BE
MainWTrigB                        000000C7
MainWaitTrig                      000000A4
NEGATEF                           
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 197


SYMBOL TABLE
  LABEL                             VALUE 

OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PIC                               00000887
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000009D
PULSR                             00000002
PULSS                             00000003
PWM1CON                           0000009B
PutByte                           0000018E
PutByteSerial                     00000190
R                                 00000002
RA0                               00000000
RA1                               00000001
RA2                               00000002
RA3                               00000003
RA4                               00000004
RA5                               00000005
RA6                               00000006
RA7                               00000007
RB0                               00000000
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 198


SYMBOL TABLE
  LABEL                             VALUE 

RB1                               00000001
RB2                               00000002
RB3                               00000003
RB4                               00000004
RB5                               00000005
RB6                               00000006
RB7                               00000007
RBIE                              00000003
RBIF                              00000000
RC0                               00000000
RC1                               00000001
RC2                               00000002
RC3                               00000003
RC4                               00000004
RC5                               00000005
RC6                               00000006
RC7                               00000007
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RD0                               00000000
RD1                               00000001
RD2                               00000002
RD3                               00000003
RD4                               00000004
RD5                               00000005
RD6                               00000006
RD7                               00000007
RDD                               00000000
RE0                               00000000
RE1                               00000001
RE2                               00000002
RE3                               00000003
READ_WRITE                        00000002
ROTL                              
ROTR                              
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
R_NOT_W                           00000002
R_W                               00000002
S                                 00000003
SBOREN                            00000004
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 199


SYMBOL TABLE
  LABEL                             VALUE 

SCKP                              00000004
SCS                               00000000
SDA                               00000004
SEN                               00000000
SENDB                             00000003
SERIALPORT                        00000007
SHIFTL                            
SHIFTR                            
SMP                               00000007
SP                                00000002
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SPPORT                            00000005
SR0                               00000006
SR1                               00000007
SRCON                             00000185
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUBFF                             
SUBFF_TW                          
SUBLF                             
SUBLF_TW                          
SWAPFF                            
SWAPFF_TW                         
SWAPWF                            
SWDTEN                            00000000
SYNC                              00000004
Sample1M                          0000048B
Sample1MEntry2                    00000593
Sample1MEntry3                    00000692
Sample1MEntry4                    00000791
Sample1MhzEnd                     00000890
Sample250kA                       00000359
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 200


SYMBOL TABLE
  LABEL                             VALUE 

Sample250kB                       00000370
Sample250kC                       00000387
Sample250kD                       0000039E
Sample417k250k                    00000349
Sample417kA                       0000035A
Sample417kB                       00000371
Sample417kC                       00000388
Sample417kD                       0000039F
Sample417kLoopA                   00000352
Sample417kLoopB                   00000369
Sample417kLoopC                   00000380
Sample417kLoopD                   00000397
Sample625k                        00000308
Sample625kLoopA                   0000030E
Sample625kLoopB                   0000031E
Sample625kLoopC                   0000032E
Sample625kLoopD                   0000033E
Sample833k                        0000149A
Sample833kEnd                     00001A9E
Sample833kEntry1                  000016A2
Sample833kEntry2                  000018A0
SampleDelayed                     000001FE
SampleDelayedLoopA                00000209
SampleDelayedLoopB                00000223
SampleDelayedLoopC                0000023D
SampleDelayedLoopD                00000257
SampleIntBank0                    000001F9
SampleIntReturn                   000001F4
SampleIntStart                    000001DE
SampleRep2M                       0000149A
SampleRep2MEnd                    0000046D
SampleRep2MEndB                   00000478
SampleRep2MStep2                  0000047F
SampleRep2MStep3                  00000484
SampleRep5M                       0000048B
SampleRep5MEnd                    0000043B
SampleRep5MEndB                   00000442
SampleRep5MEndC                   00000443
SampleRep5MEndD                   0000044A
SampleRep5MEndE                   00000451
SampleRep5MEndStep5               00000990
SampleRep5MStep2                  00000458
SampleRep5MStep3                  0000045C
SampleRep5MStep4                  00000461
SampleRep5MStep5                  00000466
SampleXY250k192k                  000003AA
SampleXY250kLA                    000003B9
SampleXY250kLB                    000003DD
SampleXY250kLC                    00000401
SampleXY250kLD                    00000425
SampleXY417k                      00000E97
SampleXY500k                      00000993
SampleXYDelayed                   00000267
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 201


SYMBOL TABLE
  LABEL                             VALUE 

SampleXYDelayedLA                 00000279
SampleXYDelayedLB                 000002A1
SampleXYDelayedLC                 000002C9
SampleXYDelayedLD                 000002F1
StSample417kLoopB                 0000036E
StSample417kLoopC                 00000385
StSample417kLoopD                 0000039C
StSampleDelayedLoopA              0000020E
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GINV                            00000007
T1GIV                             00000007
T1GSS                             00000001
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1                              0000000E
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOTALBUFFERSIZE                   00000100
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRGCH                             00000003
TRGSRCPORT                        00000005
TRIGGER                           00000000
TRIGGERENBIT                      00000006
TRIGGERPORT                       00000006
TRIGGERPOSBIT                     00000007
TRISA                             00000085
TRISA0                            00000000
TRISA1                            00000001
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 202


SYMBOL TABLE
  LABEL                             VALUE 

TRISA2                            00000002
TRISA3                            00000003
TRISA4                            00000004
TRISA5                            00000005
TRISA6                            00000006
TRISA7                            00000007
TRISB                             00000086
TRISB0                            00000000
TRISB1                            00000001
TRISB2                            00000002
TRISB3                            00000003
TRISB4                            00000004
TRISB5                            00000005
TRISB6                            00000006
TRISB7                            00000007
TRISC                             00000087
TRISC0                            00000000
TRISC1                            00000001
TRISC2                            00000002
TRISC3                            00000003
TRISC4                            00000004
TRISC5                            00000005
TRISC6                            00000006
TRISC7                            00000007
TRISD                             00000088
TRISD0                            00000000
TRISD1                            00000001
TRISD2                            00000002
TRISD3                            00000003
TRISD4                            00000004
TRISD5                            00000005
TRISD6                            00000006
TRISD7                            00000007
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRISE3                            00000003
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 203


SYMBOL TABLE
  LABEL                             VALUE 

TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
ULPWUIE                           00000002
ULPWUIF                           00000002
VCFG0                             00000004
VCFG1                             00000005
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000097
VREN                              00000007
VROE                              00000006
VROTL                             
VROTR                             
VRR                               00000005
VRSS                              00000004
VSHIFTL                           
VSHIFTR                           
W                                 00000000
WCOL                              00000007
WDTCON                            00000105
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPUB                              00000095
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
WaitByte                          00000176
WaitComm                          000000E6
WaitComm_BreakTrigger             0000016D
WaitComm_Conf                     00000131
WaitComm_Data                     000000EB
WaitComm_Rec                      00000151
WaitComm_SendDataA                000000F2
WaitComm_SendDataB                000000FF
WaitComm_SendDataC                0000010C
WaitComm_SendDataD                00000119
WaitComm_SendDataExit             00000122
WaitComm_Test                     000000E7
XORFF                             
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 204


SYMBOL TABLE
  LABEL                             VALUE 

XORFF_TW                          
XORLF                             
XORLF_TW                          
Z                                 00000002
_BOR21V                           00003EFF
_BOR40V                           00003FFF
_BOR4V_BOR21V                     00003EFF
_BOR4V_BOR40V                     00003FFF
_BOREN_NSLEEP                     00003EFF
_BOREN_OFF                        00003CFF
_BOREN_ON                         00003FFF
_BOREN_SBODEN                     00003DFF
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CONFIG1                          00002007
_CONFIG2                          00002008
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         00001FFF
_DEVID1                           00002006
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_FOSC_EC                          00003FFB
_FOSC_EXTRC_CLKOUT                00003FFF
_FOSC_EXTRC_NOCLKOUT              00003FFE
_FOSC_HS                          00003FFA
_FOSC_INTRC_CLKOUT                00003FFD
_FOSC_INTRC_NOCLKOUT              00003FFC
_FOSC_LP                          00003FF8
_FOSC_XT                          00003FF9
_HS_OSC                           00003FFA
_IDLOC0                           00002000
_IDLOC1                           00002001
_IDLOC2                           00002002
_IDLOC3                           00002003
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_LVP_OFF                          00002FFF
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 205


SYMBOL TABLE
  LABEL                             VALUE 

_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDTE_OFF                         00003FF7
_WDTE_ON                          00003FFF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FF9
__16F887                          00000001
clockFreq                         00000020
cntr                              0000007B
cntra                             00000076
cntrb                             00000077
cntrc                             00000078
configLoc1                        00000070
dataConfig                        0000007D
f                                 00000001
functptrhigh                      00000079
functptrlow                       0000007A
i2csdata                          0000007C
loadFunctptrhigh                  000000D7
loadFunctptrlow                   000000C8
sampleRate1                       00000074
sampleRate2                       00000075
skipEqFF                          
skipEqLF                          
skipGrEqFF                        
skipGrEqFL                        
skipGrEqLF                        
skipGrFF                          
skipGrFL                          
skipGrLF                          
skipLessEqZero                    
skipLessZero                      
skipMoreEqZero                    
skipMoreZero                      
skipNotZero                       
skipZero                          
statusTemp                        0000007D
triggerChannel                    0000007F
triggerDelay1                     00000071
triggerDelay2                     00000072
triggerDelay3                     00000073
triggerLevel                      0000007E
w                                 00000000
wregTemp                          0000007E
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 206


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 207


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0CC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0DC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0EC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0FC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
10C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
11C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
12C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
13C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
14C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
15C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
16C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM 5.86  /HOME/JWEAVER/DOCUMENTS/PROJECTS   2-11-2021  23:56:59         PAGE 208


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


1700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
17C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
18C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
19C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX X--------------- ----------------
2000 : XXXX---XX------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  6817
Program Memory Words Free:  1375


Errors   :     0
Warnings :     0 reported,   883 suppressed
Messages :    33 reported,     0 suppressed

