MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: An oscilloscope program based on the PIC16F877 and the MAX118
                      00005 ;*Version: 1.200
                      00006 ;*Date: 6/28/2011
                      00007 ;*Filename: osc.asm
                      00008 ;
                      00009 ;Versions:  1.000 - 3/29/2003
                      00010 ;           1.000 - 7/26/2004
                      00011 ;           1.000 - 4/2/2005
                      00012 ;           1.000 - 9/29/2005 -- Additional Header comments and license added
                      00013 ;           1.101 - 11/3/2005 -- Began to modify for use on PIC16F877
                      00014 ;                       1.102 - 3/28/2006 -- Made trigger interrupt based, expanded sampling
                      00015 ;                               to 256 samples across modes
                      00016 ;                       1.102 - 4/12/2006 -- Finished expanding sampling to 256 samples.
                      00017 ;                               Still need to test communication, sampleDelayed and sampleXY
                      00018 ;                               modes.
                      00019 ;                       1.103 - 4/29/2007 -- Fixed interlaced sampling, modified so sample
                      00020 ;                               data configuration and trigger level are measured after the
                      00021 ;                               data buffer if filled instead of at communication.
                      00022 ;                       1.104 - 6/27/2007 -- Added faster XY sampling modes
                      00023 ;                       1.105 - 7/18/2007 -- Added repetitive sampling and wait for trigger
                      00024 ;                               in WaitComm so the scope will respond to the PC
                      00025 ;                       1.106 - 3/1/2009 -- changed the trigger back to not respond to PC
                      00026 ;                       1.107 - 3/1/2009 -- Changed the trigger code to shorten the 
                      00027 ;                               trigger delay. - NEED TO TEST  
                      00028 ;                               Made scope responsive to trigger change message. - NEED TO TEST
                      00029 ;                               Removed the use of the slave parallel port. - NEED TO TEST
                      00030 ;                               Combined SampleXY250 and SampleXY192. - NEED TO TEST - tested 3/5/2009
                      00031 ;                       1.108 - 3/9/2009 -- changed trigger code to broaden range of trigger
                      00032 ;                               delay - NEED TO TEST
                      00033 ;                       1.109 - 10/28/2009 -- tested and fixed bug with trigger code
                      00034 ;                       1.110 - 5/12/2010 -- Added serial port support to code.  NEED TO TEST
                      00035 ;                       1.111 - 2/1/2011 -- fixed a bug with the trigger code (another one)
                      00036 ;                       1.200 - 6/28/2011 - Modified code to handle conditional compile for hardware ver
                            sion 1.0 or hardware version 1.2
                      00037 ;
                      00038 ;Copyright (C) 2003-2011 Jonathan Weaver
                      00039 ;
                      00040 ;This program is free software; you can redistribute it and/or modify it under
                      00041 ;the terms of the GNU General Public License as published by the Free Software
                      00042 ;Foundation; either version 2 of the License, or (at your option) any later
                      00043 ;version.
                      00044 ;
                      00045 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00046 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00047 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00048 ;details.
                      00049 ;
                      00050 ;You should have received a copy of the GNU General Public License along with
                      00051 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00052 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00053 ;
                      00054 ;==============================================================================
                      00055 
                      00056 ;=============================================================================
                      00057 ; C O N F I G U R A T I O N
                      00058 ;=============================================================================
                      00059 
                      00060     list p=16F887
                      00061 
                      00062       errorlevel      -302, -205, -207   ;Suppress bank selection messages
                      00063 ;    __config  _WDT_OFF & _HS_OSC & _LVP_OFF
  00000020            00064     clockFreq = 20      ;20 = 20 MHZ, 4 = 4 MHZ
                      00065 
                      00066 ;=============================================================================
                      00067 ; C O N S T A N T S
                      00068 ;=============================================================================
                      00069 
  00000012            00070 HARDWARE equ 0x12
                      00071 
  00000020            00072 BUFFERMIN equ 0x20      ;Memory restrictions for the buffer
  00000040            00073 BUFFERSIZE equ D'64'    ;Number of data points to store.  In single channel
                      00074                         ;mode, all data points are for one channel, in XY mode
                      00075                         ;the data points alternate between channel 1 and
                      00076                         ;channel 2
  0000005F            00077 BUFFERMAX equ BUFFERMIN+BUFFERSIZE-1
  00000100            00078 TOTALBUFFERSIZE equ BUFFERSIZE*4
                      00079 
                      00080 ;I/O Pin maps
                      00081 ;-----------------------------------------------------------------------------
                      00082 if HARDWARE == 0x10
                      00083         SPPORT set PORTC
                      00084         SP equ 0x05
                      00085 
                      00086         I2CPORT set PORTC
                      00087         SDA equ 0x04            ;Pin map for the I2CPORT
                      00088         CLK equ 0x03
                      00089 
                      00090         ADC_CONTROLPORT set PORTB
                      00091         ADC_PORT set PORTB
                      00092         RDD equ 0x02            ;Pin map for the ADC
                      00093 
                      00094         TRIGGERPORT set PORTB
                      00095         TRIGGER equ 0x00
                      00096 
                      00097         SERIALPORT set PORTC
                      00098         RX equ 0x07
                      00099         TX equ 0x06
                      00100 
                      00101         ADDR2 equ 0x05          ;ADDR2 and ADDR1 not used in this program (later use)
                      00102         ADDR1 equ 0x04
                      00103         ADDR0 equ 0x03          ;Least significant bit of the ADC channel address
                      00104         CS equ 0x01
                      00105 
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00106         ADC_DATAPORT set PORTD
                      00107 
                      00108         ANALOG_SEL set PORTC
                      00109         CH1SEL equ 0x01
                      00110         CH2SEL equ 0x02
                      00111         
                      00112         ANALOG_GAIN set PORTA
                      00113         GAIN1 equ 0x00
                      00114         GAIN2 equ 0x01
                      00115         CH1SELG equ 0x04
                      00116         CH2SELG equ 0x05
                      00117 
                      00118         ANALOG_ACDC set PORTC
                      00119         ACDCMODE equ 0x00
                      00120 
                      00121 else
  00000005            00122         SPPORT set PORTA
  00000002            00123         SP equ 0x02
                      00124         ;SPPORT set PORTB
                      00125         ;SP equ 0x05
                      00126 
  00000007            00127         SERIALPORT set PORTC
  00000007            00128         RX equ 0x07
  00000006            00129         TX equ 0x06
                      00130 
  00000009            00131         ADC_CONTROLPORT set PORTE
  00000000            00132         RDD equ 0x00
  00000001            00133         ADDR0 equ 0x01
                      00134 
  00000006            00135         TRIGGERPORT set PORTB
  00000000            00136         TRIGGER equ 0x00
                      00137 
  00000006            00138         I2CPORT set PORTB
  00000004            00139         SDA equ 0x04
  00000005            00140         CLK equ 0x05
                      00141 
  00000006            00142         ADC_PORT set PORTB
  00000003            00143         ADDR2 equ 0x03          
  00000002            00144         ADDR1 equ 0x02
  00000001            00145         CS equ 0x01
                      00146 
  00000008            00147         ADC_DATAPORT set PORTD
                      00148 
  00000007            00149         ANALOG_SEL set PORTC
  00000001            00150         CH1SEL equ 0x01
  00000002            00151         CH2SEL equ 0x02
                      00152 
  00000005            00153         ANALOG_GAIN set PORTA
  00000000            00154         GAIN1 equ 0x00
  00000001            00155         GAIN5 equ 0x01
  00000004            00156         CH1SELG equ 0x04
  00000005            00157         CH2SELG equ 0x05
                      00158 
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000007            00159         ANALOG_ACDC set PORTC
  00000000            00160         ACDCMODE equ 0x00
                      00161 
                      00162 endif
                      00163 
                      00164 ;Configuration memory map
                      00165 ;-----------------------------------------------------------------------------
                      00166 ;Bit map for configLoc1
  00000007            00167 TRIGGERPOSBIT equ 0x07  ;1 is positive slope trigger, 0 is negative slope
  00000006            00168 TRIGGERENBIT equ 0x06   ;1 is trigger enabled, 0 is no trigger
  00000005            00169 CLOCKFREQBIT equ 0x05   ;1 is 20 MHz, 0 is 4 MHz
  00000004            00170 CHANNELBIT equ 0x04     ;1 is channel 2, 0 is channel 1
  00000003            00171 FREQMODEBIT3 equ 0x03   ;Reserve the bits in CONFIGLOC1 for the frequency modes
  00000002            00172 FREQMODEBIT2 equ 0x02
  00000001            00173 FREQMODEBIT1 equ 0x01
  00000000            00174 FREQMODEBIT0 equ 0x00
                      00175 
  00000000            00176 FREQSAMPLE1M equ D'0'   ;Table of frequency modes, 0 to 15
  00000001            00177 FREQSAMPLE833K equ D'1'
  00000002            00178 FREQSAMPLE625K equ D'2'
  00000003            00179 FREQSAMPLE417K equ D'3'
  00000004            00180 FREQSAMPLE250K equ D'4'
  00000005            00181 FREQSAMPLEDELAYED equ D'5'
  00000006            00182 FREQSAMPLEREP5M equ D'6'        ;Ensure trigger is enabled
  00000007            00183 FREQSAMPLEREP2M equ D'7'        ;Ensure trigger is enabled
  00000008            00184 FREQSAMPLEXY417K equ D'8'
  00000009            00185 FREQSAMPLEXY250K equ D'9'
  0000000A            00186 FREQSAMPLEXY192K equ D'10'
  0000000B            00187 FREQSAMPLEXYDELAYED equ D'11'
                      00188 
                      00189 ;=============================================================================
                      00190 ; V A R I A B L E S
                      00191 ;=============================================================================
                      00192 
                      00193 CBLOCK  0x70                    ;Shared General Purpose Registers, accessible anywhere
  00000070            00194     configLoc1          ;Configuration mode
  00000071            00195     triggerDelay1       ;trigger delay (3 bytes)
  00000072            00196     triggerDelay2
  00000073            00197         triggerDelay3
  00000074            00198     sampleRate1         ;sample rate delay (2 bytes)
  00000075            00199     sampleRate2
  00000076            00200     cntra               ;general use counter
  00000077            00201     cntrb               ;second counter
  00000078            00202     cntrc               ;third counter
  00000079            00203     modetemp                    ;temporary mode variable
  0000007A            00204     modetempb                   ;temporary mode for repetitive sampling
  0000007B            00205     cntr                                ;counter variable for i2cs
  0000007C            00206         i2csdata                        ;data for i2cs
  0000007D            00207         dataConfig                      ;the data configuration
  0000007E            00208         triggerLevel            ;the trigger level
                      00209 ENDC
                      00210 
                      00211 ;=============================================================================
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00212 ; M A C R O S
                      00213 ;=============================================================================
                      00214 
                      00215     include "p16F887.inc"
                      00001         LIST
                      00002 ; P16F887.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00617         LIST
                      00216     include "equality.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: A set of equality testing macros.  Assumes all registers and literals are signed bytes.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 7/10/2003
                      00007 ;*Filename: equality.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 -- Code finished.  Added comments.
                      00010 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00011 ;
                      00012 ;Copyright (C) 2005 Jonathan Weaver
                      00013 ;
                      00014 ;This program is free software; you can redistribute it and/or modify it under 
                      00015 ;the terms of the GNU General Public License as published by the Free Software 
                      00016 ;Foundation; either version 2 of the License, or (at your option) any later 
                      00017 ;version.
                      00018 ;
                      00019 ;This program is distributed in the hope that it will be useful, but WITHOUT 
                      00020 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00021 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more 
                      00022 ;details.
                      00023 ;
                      00024 ;You should have received a copy of the GNU General Public License along with 
                      00025 ;this program; if not, write to the Free Software Foundation, Inc., 
                      00026 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00027 ;
                      00028 ;==============================================================================
                      00029 
                      00030 ;================================================================================
                      00031 ; M A C R O S
                      00032 ;================================================================================
                      00033 
                      00034 ;*This macro skips the next line if regA is equal to regB
                      00035 skipEqFF macro regA,regB ;public
                      00036         movf regA, w
                      00037         xorwf regB, w
                      00038         btfss STATUS, Z
                      00039 endm
                      00040 
                      00041 ;*This macro skips the next line if regA is greater than or equal to regB
                      00042 skipGrEqFF macro regA, regB ;public
                      00043         movf regB, w
                      00044         subwf regA, w
                      00045         andlw B'10000000'
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00046         btfss STATUS, Z
                      00047 endm
                      00048 
                      00049 ;*This macro skips the next line if regA is greater than regB
                      00050 skipGrFF macro regA, regB ;public
                      00051         movf regA, w
                      00052         subwf regB, w
                      00053         andlw B'10000000'
                      00054         btfsc STATUS, Z
                      00055 endm
                      00056 
                      00057 ;*This macro skips the next line if the literal is equal to regB
                      00058 skipEqLF macro lit, regB ;public
                      00059         movf regB, w
                      00060         xorlw lit
                      00061         btfss STATUS, Z
                      00062 endm
                      00063 
                      00064 ;*This macro skips the next line if the literal is greater than or equal to regB
                      00065 skipGrEqLF macro lit, regB ;public
                      00066         movf regB, w
                      00067         sublw lit
                      00068         andlw B'10000000'
                      00069         btfss STATUS, Z
                      00070 endm
                      00071 
                      00072 ;*This macro skips the next line if the literal is greater than regB
                      00073 skipGrLF macro lit, regB ;public
                      00074         movlw lit
                      00075         subwf regB, w
                      00076         andlw B'10000000'
                      00077         btfsc STATUS, Z
                      00078 endm
                      00079 
                      00080 ;*This macro skips the next line if the regA is greater than or equal to the literal
                      00081 skipGrEqFL macro regA, lit ;public
                      00082         movlw lit
                      00083         subwf regA, w
                      00084         andlw B'10000000'
                      00085         btfss STATUS, Z
                      00086 endm
                      00087 
                      00088 ;*This macro skips the next line if the regA is greater than the literal
                      00089 skipGrFL macro regA, lit ;public
                      00090         movf regA, w
                      00091         sublw regB
                      00092         andlw B'10000000'
                      00093         btfsc STATUS, Z
                      00094 endm
                      00095 
                      00096 ;*This macro skips the next line if the result of the previous line is zero
                      00097 skipZero macro ;public
                      00098         btfss STATUS, Z
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00099 endm
                      00100 
                      00101 ;*This macro skips the next line if the result of the previous line is not zero
                      00102 skipNotZero macro ;public
                      00103         btfsc STATUS, Z
                      00104 endm
                      00105 
                      00106 ;*This macro skips the next line if the result of the previous line is less than zero
                      00107 skipLessZero macro ;public
                      00108         andlw B'10000000'
                      00109         btfsc STATUS, Z
                      00110 endm
                      00111 
                      00112 ;*This macro skips the next line if the result of the previous line is more than or equal to zero
                      00113 skipMoreEqZero macro ;public
                      00114         andlw B'10000000'
                      00115         btfss STATUS, Z
                      00116 endm
                      00117 
                      00118 ;*This macro skips the next line if the result of the previous line is less than or equal to zero
                      00119 skipLessEqZero macro ;public
                      00120         addlw B'01111111'
                      00121         andlw B'10000000'
                      00122         btfss STATUS, Z
                      00123 endm
                      00124 
                      00125 ;*This macro skips the next line if the result of the previous line is more than zero
                      00126 skipMoreZero macro ;public
                      00127         addlw B'01111111'
                      00128         andlw B'10000000'
                      00129         btfsc STATUS, Z
                      00130 endm
                      00217     include "banks.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Banking macro.  A replacement for the banksel command.  Uses minimal bit set/clear comma
                            nds to set desired bank.
                      00005 ;*Version: 2.0
                      00006 ;*Date: 11/9/2005
                      00007 ;*Filename:  banks.inc
                      00008 ;
                      00009 ;Versions:  1.0 - 7/10/2003 - Created Unit
                      00010 ;                       1.0 - 9/29/2005 - Added comments and license
                      00011 ;                       2.0 - 11/9/2005 - Complete change in file, generalized for
                      00012 ;                                                         different processor banking, selects bank base
                            d
                      00013 ;                                                         on label passed to BNKSEL function.
                      00014 ;                                                         Removed BANK0 and BANK1 macros (for flexibilit
                            y)
                      00015 ;
                      00016 ;Copyright (C) 2005 Jonathan Weaver
                      00017 ;
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00018 ;This program is free software; you can redistribute it and/or modify it under
                      00019 ;the terms of the GNU General Public License as published by the Free Software
                      00020 ;Foundation; either version 2 of the License, or (at your option) any later
                      00021 ;version.
                      00022 ;
                      00023 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00024 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00025 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00026 ;details.
                      00027 ;
                      00028 ;You should have received a copy of the GNU General Public License along with
                      00029 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00030 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00031 ;
                      00032 ;==============================================================================
                      00033 
  0000                00034 variable CURRENTBANK
  00000000            00035 CURRENTBANK set 0x0000
                      00036 
                      00037 
                      00038 ;*Sets the STATUS bits RP0 and RP1 correctly depending on the label passed.  Comparable to banksel comma
                            nd, except that it remembers the last bank selected in a variable named CURRENTBANK.  Based on C
                      00039 ;*reg: the register whose bank to select
                      00040 BNKSEL macro reg ;public
                      00041         if reg & 0x0100
                      00042                 if (CURRENTBANK & 0x0100) == 0
                      00043                         bsf STATUS, RP1
                      00044                 endif
                      00045         else
                      00046                 if (CURRENTBANK & 0x0100) == 0x0100
                      00047                         bcf STATUS, RP1
                      00048                 endif
                      00049         endif
                      00050         if reg & 0x0080
                      00051                 if (CURRENTBANK & 0x0080) == 0
                      00052                         bsf STATUS, RP0
                      00053                 endif
                      00054         else
                      00055                 if (CURRENTBANK & 0x0080) == 0x0080
                      00056                         bcf STATUS, RP0
                      00057                 endif
                      00058         endif
                      00059         CURRENTBANK set reg & 0x180
                      00060 endm
                      00061 
                      00062 
                      00218     include "asmext.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description:  Extention of assembly instructions on registers and literals.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 11/1/2005
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00007 ;*Filename: asmext.inc
                      00008 ;
                      00009 ;Copyright (C) 2005 Jonathan Weaver
                      00010 ;
                      00011 ;This program is free software; you can redistribute it and/or modify it under
                      00012 ;the terms of the GNU General Public License as published by the Free Software
                      00013 ;Foundation; either version 2 of the License, or (at your option) any later
                      00014 ;version.
                      00015 ;
                      00016 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00017 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00018 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00019 ;details.
                      00020 ;
                      00021 ;You should have received a copy of the GNU General Public License along with
                      00022 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00023 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00024 ;
                      00025 ;Versions:  1.0 - 1/5/2005 - Defined headers, began writing macros
                      00026 ;           1.0 - 1/6/2005 - Wrote more macros
                      00027 ;           1.0 - 7/1/2005 - Tested macros, fixed bugs.  Rewrote SHIFTX and ROTX.
                      00028 ;                       1.0 - 7/11/2005 - Finished testing macros.  Added comments to headers.
                      00029 ;                       1.0 - 11/1/2005 - Wrote VROTF and VSHIFTF macros.
                      00030 ;==============================================================================
                      00031 
  00000001            00032 f equ F
  00000000            00033 w equ W
                      00034 
                      00035 ;------------------------------------------------------------------------------
                      00036 ;*Adds regA to regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00037 ;*regA: the register to add to regB
                      00038 ;*regB: the register to add to regA
                      00039 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00040 ADDFF macro regA, regB, dest    ;public
                      00041     movf regA, w
                      00042     addwf regB, dest
                      00043 endm
                      00044 
                      00045 ;------------------------------------------------------------------------------
                      00046 ;*Ands regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00047 ;*regA: the register to and with regB
                      00048 ;*regB: the register to and with regA
                      00049 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00050 ANDFF macro regA, regB, dest    ;public
                      00051     movf regA, w
                      00052     andwf regB, dest
                      00053 endm
                      00054 
                      00055 ;------------------------------------------------------------------------------
                      00056 ;*Inclusive ors regA and regB and stores in WREG or regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00057 ;*regA: the register to or with regB
                      00058 ;*regB: the register to or with regA
                      00059 ;*dest: literal equal to F to store in regB, W to store in WREG
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00060 IORFF macro regA, regB, dest    ;public
                      00061     movf regA, w
                      00062     iorwf regB, dest
                      00063 endm
                      00064 
                      00065 ;------------------------------------------------------------------------------
                      00066 ;*Moves the value in regA to regB.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00067 ;*regA: the register to move to regB
                      00068 ;*regB: the destination register
                      00069 MOVFF macro regA, regB  ;public
                      00070     movf regA, w
                      00071     movwf regB
                      00072 endm
                      00073 
                      00074 ;------------------------------------------------------------------------------
                      00075 ;*Shifts the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cycl
                            es.
                      00076 ;*reg: the register to shift
                      00077 ;*lit: a literal containing the number of bits to shift left
                      00078 SHIFTL macro reg, lit   ;public
                      00079     local cnt
                      00080     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00081         cnt = lit
                      00082         while cnt > 0
                      00083             rlf reg, f
                      00084             cnt--
                      00085         endw
                      00086         if (lit) == 1
                      00087             bcf reg, 0
                      00088         else
                      00089             if (lit) == 2
                      00090                 bcf reg, 0
                      00091                 bcf reg, 1
                      00092             else
                      00093                 movlw (0xFF << (lit))
                      00094                     andwf reg, f
                      00095                 endif
                      00096         endif
                      00097     else
                      00098         if (lit) < 6
                      00099             if (lit) == 4           ;4 -> 3 cycles
                      00100                 swapf reg, f
                      00101                 movlw 0xF0
                      00102                 andwf reg, f
                      00103             else                    ;5 -> 4 cycles
                      00104                 swapf reg, f
                      00105                 rlf reg, f
                      00106                 movlw B'11100000'
                      00107                 andwf reg, f
                      00108             endif
                      00109         else
                      00110             if (lit) == 6           ;6 -> 5 cycles
                      00111                 rrf reg, f
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00112                 rrf reg, f
                      00113                 rrf reg, f
                      00114                 movlw B'11000000'
                      00115                 andwf reg, f
                      00116             else                    ;7 -> 3 cycles
                      00117                 rrf reg, f
                      00118                 clrf reg
                      00119                 rrf reg, f
                      00120             endif
                      00121         endif
                      00122     endif
                      00123 endm
                      00124 
                      00125 ;------------------------------------------------------------------------------
                      00126 ;*Shifts the value in reg right by lit and stores in reg.  Affects WREG, STATUS.  2 to 5 Instruction Cyc
                            les.
                      00127 ;*reg: the register to shift
                      00128 ;*lit: a literal containing the number of bits to shift left
                      00129 SHIFTR macro reg, lit   ;public
                      00130     local cnt
                      00131     if (lit) < 4                    ;1 -> 2 cycles, 2 -> 4 cycles, 3 -> 5 cycles
                      00132         cnt = lit
                      00133         while cnt > 0
                      00134             rrf reg, f
                      00135             cnt--
                      00136         endw
                      00137         if (lit) == 1
                      00138             bcf reg, 7
                      00139         else
                      00140             movlw (0xFF >> (lit))
                      00141             andwf reg, f
                      00142         endif
                      00143     else
                      00144         if (lit) < 6
                      00145             if (lit) == 4           ;4 -> 3 cycles
                      00146                 swapf reg, f
                      00147                 movlw 0x0F
                      00148                 andwf reg, f
                      00149             else                    ;5 -> 4 cycles
                      00150                 swapf reg, f
                      00151                 rrf reg, f
                      00152                 movlw B'00000111'
                      00153                 andwf reg, f
                      00154             endif
                      00155         else
                      00156             if (lit) == 6           ;6 -> 5 cycles
                      00157                 rlf reg, f
                      00158                 rlf reg, f
                      00159                 rlf reg, f
                      00160                 movlw B'00000011'
                      00161                 andwf reg, f
                      00162             else                    ;7 -> 3 cycles
                      00163                 rlf reg, f
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00164                 clrf reg
                      00165                 rlf reg, f
                      00166             endif
                      00167         endif
                      00168     endif
                      00169 endm
                      00170 
                      00171 ;------------------------------------------------------------------------------
                      00172 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00173 ;*reg: the register to shift
                      00174 ;*lit: a literal containing the number of bits to shift left
                      00175 ROTL macro reg, lit     ;public
                      00176     local cnt
                      00177     if (lit) < 3                    ;1 -> 2 cycles, 2 -> 4 cycles
                      00178         cnt = lit
                      00179         while cnt > 0
                      00180             rlf reg, w
                      00181             rlf reg, f
                      00182             cnt--
                      00183         endw
                      00184     else
                      00185         if (lit) < 6
                      00186             swapf reg, f            ;4 -> 1 cycles
                      00187             if (lit) == 3           ;3 -> 3 cycles
                      00188                 rrf reg, w
                      00189                 rrf reg, f
                      00190             endif
                      00191             if (lit) == 5
                      00192                 rlf reg, w          ;5 -> 3 cycles
                      00193                 rlf reg, f
                      00194             endif
                      00195         else                        ;6 -> 4 cycles, 7 -> 2 cycles
                      00196             cnt = 8 - (lit)
                      00197             while cnt > 0
                      00198                 rrf reg, w
                      00199                 rrf reg, f
                      00200                 cnt--
                      00201             endw
                      00202         endif
                      00203     endif
                      00204 endm
                      00205 
                      00206 ;------------------------------------------------------------------------------
                      00207 ;*Rotates the value in reg left by lit and stores in reg.  Affects WREG, STATUS.  1 to 4 Instruction Cyc
                            les.
                      00208 ;*reg: the register to shift
                      00209 ;*lit: a literal containing the number of bits to shift left
                      00210 ROTR macro reg, lit     ;public
                      00211     ROTL reg, 8-lit
                      00212 endm
                      00213 
                      00214 ;------------------------------------------------------------------------------
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00215 ;*Shifts regA left by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00216 ;*regA: register to shift
                      00217 ;*regB: register that determines shift (7 to 0 are valid)
                      00218 VSHIFTL macro regA, regB ;public
                      00219     bcf STATUS, C   ;Conditional shift by 1
                      00220     btfsc regB, 0
                      00221         rlf regA, f
                      00222     bcf STATUS, C   ;Conditional shift by 2
                      00223     btfsc regB, 1
                      00224         rlf regA, f
                      00225     bcf STATUS, C
                      00226     btfsc regB, 1
                      00227         rlf regA, f
                      00228     swapf regA, w      ;Conditional shift by 4
                      00229     andlw 0xF0
                      00230     btfsc regB, 2
                      00231         movwf regA
                      00232 endm
                      00233 
                      00234 ;------------------------------------------------------------------------------
                      00235 ;*Shifts regA right by regB.  Requires 13 program words and 13 cycles.  Affects WREG and STATUS.
                      00236 ;*regA: register to shift
                      00237 ;*regB: register that determines shift (7 to 0 are valid)
                      00238 VSHIFTR macro regA, regB ;public
                      00239     bcf STATUS, C   ;Conditional shift by 1
                      00240     btfsc regB, 0
                      00241         rrf regA, f
                      00242     bcf STATUS, C   ;Conditional shift by 2
                      00243     btfsc regB, 1
                      00244         rrf regA, f
                      00245     bcf STATUS, C
                      00246     btfsc regB, 1
                      00247         rrf regA, f
                      00248     swapf regA, w      ;Conditional shift by 4
                      00249     andlw 0x0F
                      00250     btfsc regB, 2
                      00251         movwf regA
                      00252 endm
                      00253 
                      00254 ;------------------------------------------------------------------------------
                      00255 ;*Rotates regA left by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00256 ;*regA: register to rotate
                      00257 ;*regB: register that determines rotate (7 to 0 are valid)
                      00258 VROTL macro regA, regB ;public
                      00259     rlf regA, w        ;Conditional rotate by 1
                      00260     btfsc regB, 0
                      00261         rlf regA, f
                      00262     rlf regA, w        ;Conditional rotate by 2
                      00263     btfsc regB, 1
                      00264         rlf regA, f
                      00265     rlf regA, w
                      00266     btfsc regB, 1
                      00267         rlf regA, f
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00268     btfsc regB, 2      ;Conditional rotate by 4
                      00269         swapf regA, f
                      00270 endm
                      00271 
                      00272 ;------------------------------------------------------------------------------
                      00273 ;*Rotates regA right by regB.  Requires 11 program words and 11 cycles.  Affects WREG and STATUS.
                      00274 ;*regA: register to rotate
                      00275 ;*regB: register that determines rotate (7 to 0 are valid)
                      00276 VROTR macro regA, regB ;public
                      00277     rrf regA, w        ;Conditional rotate by 1
                      00278     btfsc regB, 0
                      00279         rrf regA, f
                      00280     rrf regA, w        ;Conditional rotate by 2
                      00281     btfsc regB, 1
                      00282         rrf regA, f
                      00283     rrf regA, w
                      00284     btfsc regB, 1
                      00285         rrf regA, f
                      00286     btfsc regB, 2      ;Conditional rotate by 4
                      00287         swapf regA, f
                      00288 endm
                      00289 
                      00290 ;------------------------------------------------------------------------------
                      00291 ;*Subracts regA from regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00292 ;*regA: the register to subtract
                      00293 ;*regB: the register to subtract from
                      00294 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00295 SUBFF macro regA, regB, dest    ;public
                      00296     movf regA, w
                      00297     subwf regB, dest
                      00298 endm
                      00299 
                      00300 ;------------------------------------------------------------------------------
                      00301 ;*Exclusive ors regA and regB and stores in WREG or regB.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00302 ;*regA: the register to exclusive or with regB
                      00303 ;*regB: the register to exclusive or with regA
                      00304 ;*dest: literal equal to F to store in regB, W to store in WREG
                      00305 XORFF macro regA, regB, dest    ;public
                      00306     movf regA, w
                      00307     xorwf regB, dest
                      00308 endm
                      00309 
                      00310 ;------------------------------------------------------------------------------
                      00311 ;*Adds lit and reg and stores in WREG or reg.  Affects STATUS, WREG.  2 Instruction Cycles.
                      00312 ;*lit: the literal to add with reg
                      00313 ;*reg: the register to add with lit
                      00314 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00315 ADDLF macro lit, reg, dest      ;public
                      00316     movlw lit
                      00317     addwf reg, dest
                      00318 endm
                      00319 
                      00320 ;------------------------------------------------------------------------------
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00321 ;*Ands lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00322 ;*lit: literal to and with reg
                      00323 ;*reg: register to and with lit
                      00324 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00325 ANDLF macro lit, reg, dest      ;public
                      00326     movlw lit
                      00327     andwf reg, dest
                      00328 endm
                      00329 
                      00330 ;------------------------------------------------------------------------------
                      00331 ;*Inclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00332 ;*lit: literal to inclusive or with reg
                      00333 ;*reg: register to inclusive or with lit
                      00334 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00335 IORLF macro lit, reg, dest      ;public
                      00336     movlw lit
                      00337     iorwf reg, dest
                      00338 endm
                      00339 
                      00340 ;------------------------------------------------------------------------------
                      00341 ;*Moves lit to reg.  Affects WREG.  2 Instruction Cycles.
                      00342 ;*lit: literal to move
                      00343 ;*reg: register to move literal to
                      00344 MOVLF macro lit, reg    ;public
                      00345     movlw lit
                      00346     movwf reg
                      00347 endm
                      00348 
                      00349 ;------------------------------------------------------------------------------
                      00350 ;*Subtracts reg from lit and stores in WREG or reg.  Affects WREG, STATUS.  2 to 3 Instruction Cycles.
                      00351 ;*lit: literal to subtract from
                      00352 ;*reg: register to subtract from literal
                      00353 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00354 SUBLF macro lit, reg, dest      ;public
                      00355     movf reg, w
                      00356     sublw lit
                      00357     if dest == 1
                      00358         movwf reg
                      00359     endif
                      00360 endm
                      00361 
                      00362 ;------------------------------------------------------------------------------
                      00363 ;*Exclusive ors lit and reg and stores in WREG or reg.  Affects WREG, STATUS.  2 Instruction Cycles.
                      00364 ;*lit: literal to exclusive or with reg
                      00365 ;*reg: register to exclusive or with literal
                      00366 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00367 XORLF macro lit, reg, dest      ;public
                      00368     movlw lit
                      00369     xorwf reg, dest
                      00370 endm
                      00371 
                      00372 ;------------------------------------------------------------------------------
                      00373 ;*Negates reg and stores in WREG or reg.  Affects STATUS.  2 Instruction Cycles.
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00374 ;*reg: register to negate (result is 0 - register)
                      00375 ;*dest: literal equal to F to store in reg, W to store in WREG
                      00376 NEGATEF macro reg, dest ;public
                      00377     if dest == 1
                      00378         comf reg, f
                      00379         incf reg, f
                      00380     else
                      00381         movf reg, w
                      00382         sublw 0x00      ;WREG = 0 - reg
                      00383     endif
                      00384 endm
                      00385 
                      00386 ;------------------------------------------------------------------------------
                      00387 ;*Sets WREG equal to reg and reg equal to WREG.  Affects STATUS.  2 Instruction Cycles.
                      00388 ;*reg: the register to swap with WREG
                      00389 SWAPWF macro reg        ;public
                      00390     xorwf reg, f        ;reg = reg xor WREG
                      00391     xorwf reg, w        ;WREG = reg xor WREG xor WREG = reg
                      00392     xorwf reg, f        ;reg = reg xor WREG xor reg = WREG
                      00393 endm
                      00394 
                      00395 ;------------------------------------------------------------------------------
                      00396 ;*Sets regA equal to regB and regB equal to regA.  Affects STATUS, WREG.  4 Instruction Cycles.
                      00397 ;*regA: register to move to regB
                      00398 ;*regB: register to move to regA
                      00399 SWAPFF macro regA, regB ;public
                      00400     movf regA, w
                      00401     xorwf regB, w       ;WREG = regA xor regB
                      00402     xorwf regA, f       ;regA = regA xor regB xor regA = regB
                      00403     xorwf regB, f       ;regB = regB xor regA xor regB = regA
                      00404 endm
                      00405 
                      00406 ;------------------------------------------------------------------------------
                      00407 ;*Adds regA to regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00408 ;*regA: register to add to regB
                      00409 ;*regB: register to add to regA
                      00410 ADDFF_TW macro regA, regB       ;public
                      00411     xorwf regA, f       ;regA = regA xor WREG
                      00412     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00413     addwf regB, f       ;regB = regB - regA
                      00414     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00415     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00416 endm
                      00417 
                      00418 ;------------------------------------------------------------------------------
                      00419 ;*Ands regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles.
                      00420 ;*regA: register to and with regB
                      00421 ;*regB: register to and with regA
                      00422 ANDFF_TW macro regA, regB       ;public
                      00423     xorwf regA, f       ;regA = regA xor WREG
                      00424     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00425     andwf regB, f       ;regB = regB and regA
                      00426     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00427     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00428 endm
                      00429 
                      00430 ;------------------------------------------------------------------------------
                      00431 ;*Inclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00432 ;*regA: register to inclusive or with regB
                      00433 ;*regB: register to inclusive or with regA
                      00434 IORFF_TW macro regA, regB       ;public
                      00435     xorwf regA, f       ;regA = regA xor WREG
                      00436     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00437     iorwf regB, f       ;regB = regB or regA
                      00438     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00439     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00440 endm
                      00441 
                      00442 ;------------------------------------------------------------------------------
                      00443 ;*Moves the value in regA to regB, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00444 ;*regA: register to move to regB
                      00445 ;*regB: destination register
                      00446 MOVFF_TW macro regA, regB       ;public
                      00447     xorwf regA, w
                      00448     movwf regB          ;regB = regA xor WREG
                      00449     xorwf regA, w       ;WREG = regA xor WREG xor regA = WREG
                      00450     xorwf regB, f       ;regB = regA xor WREG xor WREG = regA
                      00451 endm
                      00452 
                      00453 ;------------------------------------------------------------------------------
                      00454 ;*Subracts regA from regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cycles
                            .
                      00455 ;*regA: register to subtract from regB
                      00456 ;*regB: register regA is subtracted from and the destination register
                      00457 SUBFF_TW macro regA, regB       ;public
                      00458     xorwf regA, f       ;regA = regA xor WREG
                      00459     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00460     subwf regB, f       ;regB = regB - regA
                      00461     xorwf regA, w       ;WREG = regA xor regA xor WREG = WREG
                      00462     xorwf regA, f       ;regA = regA xor WREG xor WREG = regA
                      00463 endm
                      00464 
                      00465 ;------------------------------------------------------------------------------
                      00466 ;*Exclusive ors regA and regB and stores in regB, but preserves WREG.  Affects STATUS.  5 Instruction Cy
                            cles.
                      00467 ;*regA: register to exclusive or with regB
                      00468 ;*regB: register to exclusive or with regA
                      00469 XORFF_TW macro regA, regB       ;public
                      00470     xorwf regB, f       ;regB = WREG xor regB
                      00471     xorwf regA, w       ;WREG = WREG xor regA
                      00472     xorwf regB, f       ;regB = WREG xor regB xor WREG xor regA = regA xor regB
                      00473     xorwf regA, w       ;WREG = WREG xor regA xor regA = WREG
                      00474 endm
                      00475 
                      00476 ;------------------------------------------------------------------------------
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00477 ;*Adds lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycles.
                      00478 ;*lit: literal to add to reg
                      00479 ;*reg: register which to add literal
                      00480 ADDLF_TW macro lit, reg ;public
                      00481     subwf reg, f        ;reg = reg - WREG
                      00482     addlw lit           ;WREG = WREG + lit
                      00483     addwf reg, f        ;reg = reg - WREG + WREG + lit = reg + lit
                      00484     addlw 0-lit         ;WREG = WREG - lit
                      00485 endm
                      00486 
                      00487 ;------------------------------------------------------------------------------
                      00488 ;*Ands lit and reg and stores in reg, but preserves WREG.  Affect STATUS.  7 Instruction Cycles.
                      00489 ;*lit: literal to and with reg
                      00490 ;*reg: register which to and with literal
                      00491 ANDLF_TW macro lit, reg ;public
                      00492     SWAPWF reg
                      00493     andlw lit           ;WREG = reg and lit
                      00494     SWAPWF reg
                      00495 endm
                      00496 
                      00497 ;------------------------------------------------------------------------------
                      00498 ;*Inclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  7 Instruction Cycle
                            s.
                      00499 ;*lit: literal to inclusive or with reg
                      00500 ;*reg: register which to inclusive or with literal
                      00501 IORLF_TW macro lit, reg ;public
                      00502     SWAPWF reg
                      00503     iorlw lit           ;WREG = reg or lit
                      00504     SWAPWF reg
                      00505 endm
                      00506 
                      00507 ;------------------------------------------------------------------------------
                      00508 ;*Moves lit to reg, but preserves WREG.  Affects STATUS.  4 instruction cycles.
                      00509 ;*lit: literal to move
                      00510 ;*reg: register to move literal to
                      00511 MOVLF_TW macro lit, reg ;public
                      00512     movwf reg           ;reg = WREG
                      00513     xorlw lit           ;WREG = WREG xor lit
                      00514     xorwf reg, f        ;reg = WREG xor WREG xor lit = lit
                      00515     xorlw lit           ;WREG = WREG xor lit xor lit
                      00516 endm
                      00517 
                      00518 ;------------------------------------------------------------------------------
                      00519 ;*Subtracts reg from lit and stores in reg, but preserves WREG.  Affects STATUS.  6 Instruction Cycles.
                      00520 ;*lit: literal to subtract reg from
                      00521 ;*reg: register to subtract from lit and destination register
                      00522 SUBLF_TW macro lit, reg ;public
                      00523     subwf reg, f        ;reg = reg - WREG
                      00524     addlw 0-lit         ;WREG = WREG - lit
                      00525     addwf reg, f        ;reg = reg - WREG + WREG - lit = reg - lit
                      00526     addlw lit           ;WREG = WREG - lit + lit = WREG
                      00527     NEGATEF reg, f      ;Negate reg, 2 cycles
                      00528 endm
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00529 
                      00530 ;------------------------------------------------------------------------------
                      00531 ;*Exclusive ors lit and reg and stores in reg, but preserves WREG.  Affects STATUS.  4 Instruction Cycle
                            s.
                      00532 ;*lit: literal to exclusive or reg with
                      00533 ;*reg: register to exclusive or with lit and destination register
                      00534 XORLF_TW macro lit, reg ;public
                      00535     xorwf reg, f        ;reg = reg xor WREG
                      00536     xorlw lit           ;WREG = WREG xor lit
                      00537     xorwf reg, f        ;reg = reg xor WREG xor WREG xor lit = reg xor lit
                      00538     xorlw lit           ;WREG = WREG xor lit xor lit = WREG
                      00539 endm
                      00540 
                      00541 ;------------------------------------------------------------------------------
                      00542 ;*Sets regA equal to regB and regB equal to regA, but preserves WREG.  Affects STATUS.  8 Instruction Cy
                            cles.
                      00543 ;*regA: register to move regB to
                      00544 ;*regB: register to more regA to
                      00545 SWAPFF_TW macro regA, regB      ;public
                      00546     xorwf regA, f       ;regA = regA xor WREG
                      00547     xorwf regB, f       ;regB = regB xor WREG
                      00548     xorwf regA, w       ;WREG = WREG xor regA xor WREG = regA
                      00549     xorwf regB, w       ;WREG = regA xor WREG xor regB
                      00550     xorwf regA, f       ;regA = WREG xor regA xor regB xor regA xor WREG = regB
                      00551     xorwf regB, f       ;regB = WREG xor regA xor regB xor regB xor WREG = regA
                      00552     xorwf regA, w       ;WREG = WREG xor regA xor regB xor regA = WREG xor regB
                      00553     xorwf regB, w       ;WREG = WREG xor regB xor regB = WREG
                      00554 endm
                      00555 
                      00556 ;------------------------------------------------------------------------------
                      00557 ;*Adds WREG to the Program Counter.  Usually used to lookup a value in a table of retlw between labels T
                            ableStart and TableEnd.  1 to 6 Instruction Cycles.
                      00558 ;*TableStart:  starting address in program memory of the table, should be immediately following call to 
                            ADDWPC
                      00559 ;*TableEnd:  ending address in program memory of the table.  For support if table crosses a page boundar
                            y (gives warning).
                      00560 ADDWPC macro TableStart, TableEnd       ;public
                      00561     if (high TableStart)
                      00562         movlw high TableStart
                      00563         movwf PCLATH
                      00564     endif
                      00565     if (high TableStart) == (high TableEnd)
                      00566         addwf PCL, f
                      00567     else
                      00568         messg "Table crosses page boundary"
                      00569         addwf PCL, w
                      00570         btfss STATUS, C
                      00571             incf PCLATH, f
                      00572         movwf PCL
                      00573     endif
                      00574 endm
                      00575 
                      00576 
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00219 
                      00220 MGOTO macro address
                      00221         if (address & (0x1000))
                      00222                 bsf PCLATH, 4
                      00223         else
                      00224                 bcf PCLATH, 4
                      00225         endif
                      00226         if (address & (0x800))
                      00227                 bsf PCLATH, 3
                      00228         else
                      00229                 bcf PCLATH, 3
                      00230         endif
                      00231         goto address
                      00232         endm
                      00233 
                      00234 CONFRECIEVE macro
                      00235     call GetByte                        ;Recieve ConfigLoc1
                      00236     movf i2csdata, w
                      00237     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                      00238     if clockFreq == 20              ;if necessary
                      00239         iorlw 1 << CLOCKFREQBIT
                      00240     endif
                      00241     movwf configLoc1
                      00242     call GetByte                        ;Recieve trigger delay
                      00243     MOVFF i2csdata, triggerDelay1
                      00244     call GetByte
                      00245     MOVFF i2csdata, triggerDelay2
                      00246     call GetByte                
                      00247     MOVFF i2csdata, triggerDelay3
                      00248     call GetByte                                        ;Recieve sample rate
                      00249     MOVFF i2csdata, sampleRate1
                      00250     call GetByte
                      00251     MOVFF i2csdata, sampleRate2
                      00252     endm
                      00253 
                      00254 CONFSEND macro
                      00255     ;Send number of datapoints (2 bytes)
                      00256     MOVLF high TOTALBUFFERSIZE, i2csdata
                      00257     call PutByte
                      00258     MOVLF low TOTALBUFFERSIZE, i2csdata
                      00259     call PutByte
                      00260     ;Send clock frequency configuration
                      00261     MOVFF configLoc1, i2csdata
                      00262     call PutByte
                      00263     MOVFF triggerDelay1, i2csdata
                      00264     call PutByte
                      00265     MOVFF triggerDelay2, i2csdata
                      00266     call PutByte
                      00267     MOVFF triggerDelay3, i2csdata
                      00268     call PutByte
                      00269     MOVFF sampleRate1, i2csdata
                      00270     call PutByte
                      00271     MOVFF sampleRate2, i2csdata
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00272     call PutByte
                      00273     endm
                      00274 
                      00275 CHANNELCONFSEND macro
                      00276         MOVFF dataConfig, i2csdata              ;Channel configuration
                      00277     call PutByte
                      00278         clrf i2csdata
                      00279     call PutByte                                        ;Channel 1 offset
                      00280     call PutByte                                        ;Channel 2 offset
                      00281         MOVFF triggerLevel, i2csdata
                      00282     call PutByte                                ;Triggerlevel
                      00283         endm
                      00284 
                      00285 CHANNELCONFSTORE macro
                      00286     ;Format of channel configuration is: Channel 1 Scale (2) bits
                      00287     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                      00288     ;                                    Channel 2 Scale (2) bits
                      00289     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                      00290     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                      00291     ;                                    Two least significant bits = 0
                      00292     clrf dataConfig
                      00293         BNKSEL TRISC
                      00294         bcf TRISC, CH1SEL                               ;Ch1Sel output
                      00295         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
                      00296         bcf TRISA, CH1SELG                              ;Ch1Sel output
                      00297         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
                      00298         BNKSEL ANALOG_SEL       
                      00299         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
                      00300         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                      00301 if HARDWARE == 0x10
                      00302         bsf dataConfig, 7
                      00303         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00304                 bcf dataConfig, 7
                      00305         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00306                 bcf dataConfig, 7
                      00307         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00308                 bsf dataConfig, 6
                      00309 else
                      00310         bsf dataConfig, 6                               ;Assume Gain = 2
                      00311         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00312                 bcf dataConfig, 6
                      00313         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00314                 bcf dataConfig, 6
                      00315         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00316                 bsf dataConfig, 7
                      00317 endif
                      00318         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00319                 bsf dataConfig, 3
                      00320         bsf ANALOG_SEL, CH1SEL
                      00321         bsf ANALOG_GAIN, CH1SELG
                      00322         BNKSEL TRISC
                      00323         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
                      00324         bcf TRISC, CH2SEL                               ;Ch2Sel output
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00325         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
                      00326         bcf TRISA, CH2SELG                              ;Ch2Sel output
                      00327         BNKSEL ANALOG_SEL
                      00328         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
                      00329         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                      00330 if HARDWARE == 0x10
                      00331         bsf dataConfig, 5
                      00332         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00333                 bcf dataConfig, 5
                      00334         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                      00335                 bcf dataConfig, 5
                      00336         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                      00337                 bsf dataConfig, 4
                      00338 else
                      00339         bsf dataConfig, 4                               ;Assume Gain = 2
                      00340         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                      00341                 bcf dataConfig, 4
                      00342         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
                      00343                 bcf dataConfig, 4
                      00344         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
                      00345                 bsf dataConfig, 5
                      00346 endif
                      00347         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
                      00348                 bsf dataConfig, 2
                      00349     bsf ANALOG_SEL, CH2SEL
                      00350         bsf ANALOG_GAIN, CH2SELG
                      00351         ;Next byte is Trigger Level
                      00352         bcf ADC_CONTROLPORT, ADDR0                              ;Select address for trigger level
                      00353         bsf ADC_PORT, ADDR1
                      00354         bcf ADC_PORT, ADDR2
                      00355         bcf ADC_PORT, CS                                ;Select maxim ADC
                      00356         bcf ADC_CONTROLPORT, RDD                                ;Begin conversion
                      00357         goto $ + 1                                              ;Wait 3
                      00358         nop
                      00359         movf ADC_DATAPORT, w                    ;Save trigger level
                      00360         bsf ADC_CONTROLPORT, RDD                                ;stop conversion
                      00361         bsf ADC_PORT, CS                        ;unselect
                      00362         bcf ADC_CONTROLPORT, ADDR0                              ;Unselect address for trigger level
                      00363         bcf ADC_PORT, ADDR1
                      00364         bcf ADC_PORT, ADDR2
                      00365         movwf triggerLevel
                      00366     endm
                      00367 
                      00368 ;=============================================================================
                      00369 ; I N T E R R U P T S
                      00370 ;=============================================================================
                      00371 
0000                  00372 org 0x000
                      00373 ;Initialize
                      00374 ;First three lines of initialization included here to save on memory.
                      00375     MOVLF B'11000110', ADC_CONTROLPORT
0000   30C6               M     movlw B'11000110'
0001   0089               M     movwf ADC_CONTROLPORT
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0002   0188           00376     clrf ADC_DATAPORT
0003   2889           00377     goto Initial
                      00378 
0004                  00379 org 0x004
0004                  00380 IntHandler
0004   1283           00381     bcf STATUS, RP0                                             ;Ensure we're in Bank0
0005   0BF6           00382         decfsz cntra, f
0006   2804           00383         goto IntHandler
0007   0BF7           00384     decfsz cntrb, f
0008   2804           00385                 goto IntHandler
0009   0BF8           00386         decfsz cntrc, f
000A   2804           00387                 goto IntHandler
000B   0879           00388         movf modetemp, w
000C                  00389 MainSelect
000C   0782           00390     addwf PCL, f                        ;Add freqMode to Program Counter
                      00391         MGOTO Sample1M                                          ;FreqMode = 0
                          M         if (Sample1M & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
000D   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample1M & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
000E   118A               M                 bcf PCLATH, 3
                          M         endif
000F   2BF1               M         goto Sample1M
                      00392     MGOTO Sample833k                                    ;FreqMode = 1
                          M         if (Sample833k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0010   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample833k & (0x800))
0011   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0012   2EF8               M         goto Sample833k
                      00393         MGOTO Sample625k                                        ;FreqMode = 2
                          M         if (Sample625k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0013   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample625k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0014   118A               M                 bcf PCLATH, 3
                          M         endif
0015   2AB7               M         goto Sample625k
                      00394         MGOTO Sample417k250k                            ;FreqMode = 3
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         if (Sample417k250k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0016   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample417k250k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0017   118A               M                 bcf PCLATH, 3
                          M         endif
0018   2AFA               M         goto Sample417k250k
                      00395         MGOTO Sample417k250k                            ;FreqMode = 4
                          M         if (Sample417k250k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0019   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (Sample417k250k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
001A   118A               M                 bcf PCLATH, 3
                          M         endif
001B   2AFA               M         goto Sample417k250k
                      00396     MGOTO SampleDelayed                                 ;FreqMode = 5
                          M         if (SampleDelayed & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
001C   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleDelayed & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
001D   118A               M                 bcf PCLATH, 3
                          M         endif
001E   29A9               M         goto SampleDelayed
                      00397     MGOTO SampleRep5M                                   ;FreqMode = 6
                          M         if (SampleRep5M & (0x1000))
001F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5M & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0020   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0021   2CFB               M         goto SampleRep5M
                      00398         MGOTO SampleRep2M                                       ;FreqMode = 7
                          M         if (SampleRep2M & (0x1000))
0022   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M         if (SampleRep2M & (0x800))
0023   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0024   292E               M         goto SampleRep2M
                      00399         MGOTO SampleXY417k                                      ;FreqMode = 8
                          M         if (SampleXY417k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0025   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY417k & (0x800))
0026   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
0027   28F5               M         goto SampleXY417k
                      00400         MGOTO SampleXY250k192k                          ;FreqMode = 9
                          M         if (SampleXY250k192k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
0028   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY250k192k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
0029   118A               M                 bcf PCLATH, 3
                          M         endif
002A   2B5E               M         goto SampleXY250k192k
                      00401         MGOTO SampleXY250k192k                          ;FreqMode = 10
                          M         if (SampleXY250k192k & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
002B   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXY250k192k & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
002C   118A               M                 bcf PCLATH, 3
                          M         endif
002D   2B5E               M         goto SampleXY250k192k
                      00402     MGOTO SampleXYDelayed                               ;FreqMode = 11
                          M         if (SampleXYDelayed & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
002E   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleXYDelayed & (0x800))
                          M                 bsf PCLATH, 3
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         else
002F   118A               M                 bcf PCLATH, 3
                          M         endif
0030   2A14               M         goto SampleXYDelayed
                      00403 
                      00404 ;=============================================================================
                      00405 ; I N C L U D E S
                      00406 ;=============================================================================
                      00407     include "i2cs.inc"
                      00001 ;==============================================================================
                      00002 ;*Author:  Jonathan Weaver, jonw0224@aim.com
                      00003 ;E-mail Contact: jonw0224@aim.com
                      00004 ;*Description: Software immulated I2C Slave Device.  I2CPort sets I/O port for I2C.  CLK sets clock pin.
                              SDA sets data pin.
                      00005 ;*Version: 1.0
                      00006 ;*Date: 10/28/2009
                      00007 ;*Filename: i2cs.inc
                      00008 ;
                      00009 ;Program Words: 78
                      00010 ;Data Words:     2
                      00011 ;
                      00012 ;Versions:  1.0 - 12/29/2002 -- Code finished, tested, and cleaned.
                      00013 ;                       1.0 - 07/10/2003 -- Made code portable with external constants.
                      00014 ;                       1.0 - 9/29/2005 -- Additional Header comments and license added
                      00015 ;                       1.0 - 10/28/2009 -- Fixed bug so that code will work with interrupts
                      00016 ;
                      00017 ;Copyright (C) 2002-2009 Jonathan Weaver
                      00018 ;
                      00019 ;This program is free software; you can redistribute it and/or modify it under
                      00020 ;the terms of the GNU General Public License as published by the Free Software
                      00021 ;Foundation; either version 2 of the License, or (at your option) any later
                      00022 ;version.
                      00023 ;
                      00024 ;This program is distributed in the hope that it will be useful, but WITHOUT
                      00025 ;ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
                      00026 ;FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
                      00027 ;details.
                      00028 ;
                      00029 ;You should have received a copy of the GNU General Public License along with
                      00030 ;this program; if not, write to the Free Software Foundation, Inc.,
                      00031 ;51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
                      00032 ;
                      00033 ;==============================================================================
                      00034 
                      00035 ;;;;;; External Constants ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00036 
                      00037 ;*CLK is a literal which determines which pin will be the clock signal
                      00038 ;external CLK
                      00039 
                      00040 ;*SDA is a literal which determines which pin will be the data signal
                      00041 ;external CLK
                      00042 
                      00043 ;*I2CPORT is a literal which determines which port will be used as the I2C port.  Example setup for CLK 
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            = RB6 and SDA = RB7.<br><br>  CLK equ 0x06<br>  SDA equ 0x07<br> I2CPORT equ PORTB
                      00044 ;external I2CPORT
                      00045 
                      00046 
                      00047 ;;;;;;; Variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00048 
                      00049 ;*I2C Data byte, declare as register in main program
                      00050 ;external i2csdata
                      00051 
                      00052 ;*Temporary Counter, declare as register in main program
                      00053 ;external cntr
                      00054 
                      00055 ;;;;;;; I2CSGetStop Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00056 ;*Tests if the next clock cycle is stop, start, or continued transmission.
                      00057 ;*Returns:  If Stop detected, returns hFF in WREG.  If Start detected, returns hFE in WREG.  If continue
                            d transmission, recieves next byte and returns h00 in WREG.  Next byte appears in i2csdata
0031                  00058 I2CSGetStop ;public
0031   1E86           00059                 btfss I2CPORT, CLK                      ;Clock line high?
0032   2831           00060                         goto I2CSGetStop
0033   1A06           00061                 btfsc I2CPORT, SDA
0034   283C           00062                         goto I2CSGetStopL2              ;SDA was high
0035                  00063 I2CSGetStopL1
0035   1A06           00064                 btfsc I2CPORT, SDA
0036   34FF           00065                         retlw 0xFF                              ;Detected stop bit
0037   1A86           00066                 btfsc I2CPORT, CLK
0038   2835           00067                         goto I2CSGetStopL1              ;Wait for clock to go low
0039   3002           00068                 movlw 0x02
003A   00FC           00069                 movwf i2csdata
003B   2856           00070                 goto I2CSGetByteL1                      ;Get next byte, no stop bit
003C                  00071 I2CSGetStopL2
003C   1E06           00072                 btfss I2CPORT, SDA
003D   2843           00073                         goto I2CSGetStopL3              ;Detected start bit
003E   1A86           00074                 btfsc I2CPORT, CLK
003F   283C           00075                         goto I2CSGetStopL2              ;Wait for clock to go low
0040   3003           00076                 movlw 0x03
0041   00FC           00077                 movwf i2csdata
0042   2856           00078                 goto I2CSGetByteL1                      ;Get next byte, no start bit
0043                  00079 I2CSGetStopL3
0043   1A86           00080                 btfsc I2CPORT, CLK
0044   2843           00081                         goto I2CSGetStopL3              ;Wait for clock to go low
0045   34FE           00082                 retlw 0xFE
                      00083 
                      00084 ;;;;;;; I2CSWaitStart Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00085 ;*Waits for a start condition.  Never returns unless Start detected and byte recieved.
                      00086 ;*Returns: 0x00 in WREG.  Byte returned in i2csdata
0046                  00087 I2CSWaitStart ;public
                      00088                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0046   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0047   1606           00089                 bsf I2CPORT, SDA                        ;Release SDA
                      00090                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0048   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0049                  00091 I2CSWaitStartL3
0049   1E86           00092                 btfss I2CPORT, CLK                      ;Clock line high?
004A   2849           00093                         goto I2CSWaitStartL3
004B   1E06           00094                 btfss I2CPORT, SDA                      ;Data line high?
004C   2849           00095                         goto I2CSWaitStartL3
004D                  00096 I2CSWaitStartL2
004D   1A06           00097                 btfsc I2CPORT, SDA                      ;Data line low?
004E   284D           00098                         goto I2CSWaitStartL2
004F   1E86           00099                 btfss I2CPORT, CLK                      ;Clock line high?
0050   2849           00100                         goto I2CSWaitStartL3
0051                  00101 I2CSWaitStartL1
0051   1A86           00102                 btfsc I2CPORT, CLK                      ;Clock line low?
0052   2851           00103                         goto I2CSWaitStartL1
                      00104                 ;Fall into I2CSGetByte
                      00105 
                      00106 ;;;;;;; I2CSGetByte Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00107 ;*Recieves a byte and sends an acknowledge.  Recieved byte appears in i2csdata
                      00108 ;*Returns:  0x00 in WREG
0053                  00109 I2CSGetByte ;public
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0053   1003           00110                 bcf STATUS, C                           ;Clear carry
0054   01FC           00111                 clrf i2csdata                           ;Clear Input byte
0055   147C           00112                 bsf i2csdata, 0                         ;Set indicator
0056                  00113 I2CSGetByteL1
0056   1E86           00114                 btfss I2CPORT, CLK                      ;Clock high transition?
0057   2856           00115                         goto I2CSGetByteL1
0058   1003           00116                 bcf STATUS, C                           ;High transition, get bit into carry
0059   1A06           00117                 btfsc I2CPORT, SDA                      ;Assume clear, set if necessary
005A   1403           00118                         bsf STATUS, C
005B   0DFC           00119                 rlf i2csdata, F                         ;Add to LSB
005C                  00120 I2CSGetByteL2
005C   1A86           00121                 btfsc I2CPORT, CLK                      ;Clock low transition
005D   285C           00122                         goto I2CSGetByteL2
005E   1C03           00123                 btfss STATUS, C                         ;Check indicator.  High is done
005F   2856           00124                         goto I2CSGetByteL1
                      00125                 ;Fall into Acknowledge
                      00126 
                      00127 ;;;;;;; I2CSPutAck Routine ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00128 ;*Send an acknowledge.
                      00129 ;*Returns: 0x00 in WREG
0060                  00130 I2CSPutAck ;public
0060   1206           00131                 bcf I2CPORT, SDA                        ;Ensure SDA low
                      00132                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0061   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0062   1206           00133                 bcf I2CPORT, SDA                        ;Hold SDA low
                      00134                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0063   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0064                  00135 I2CSPutAckL1
0064   1E86           00136                 btfss I2CPORT, CLK                      ;Clock high transition
0065   2864           00137                         goto I2CSPutAckL1
0066                  00138 I2CSPutAckL2
0066   1A86           00139                 btfsc I2CPORT, CLK                      ;Clock low transition
0067   2866           00140                         goto I2CSPutAckL2
                      00141                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0068   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0069   1606           00142                 bsf I2CPORT, SDA                        ;Release SDA
                      00143                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

006A   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
006B   3400           00144                 retlw 0
                      00145 
                      00146 ;;;;;;; I2CSPutByte ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00147 ;*Sends a byte.  Expects: the byte to send to be in i2csdata.
                      00148 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
006C                  00149 I2CSPutByte ;public
006C   1206           00150                 bcf I2CPORT, SDA                        ;Ensure SDA pulls low
006D   3008           00151                 movlw 0x08
006E   00FB           00152                 movwf cntr
006F   2872           00153                 goto I2CSPutByteL1S
0070                  00154 I2CSPutByteL1
0070   1A86           00155                 btfsc I2CPORT, CLK                      ;Clock low transition
0071   2870           00156                         goto I2CSPutByteL1
0072                  00157 I2CSPutByteL1S
                      00158                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0072   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
0073   1606           00159                 bsf I2CPORT, SDA                        ;Release SDA
0074   1FFC           00160                 btfss i2csdata, 7
0075   1206           00161                         bcf I2CPORT, SDA                ;Hold SDA low
                      00162                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0076   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
0077                  00163 I2CSPutByteL2
0077   1E86           00164                 btfss I2CPORT, CLK                      ;Clock high transition
0078   2877           00165                         goto I2CSPutByteL2
0079   0DFC           00166                 rlf i2csdata, F
007A   0BFB           00167                 decfsz cntr, F
007B   2870           00168                         goto I2CSPutByteL1
007C                  00169 I2CSPutByteL3
007C   1A86           00170                 btfsc I2CPORT, CLK                      ;Clock low transition
007D   287C           00171                         goto I2CSPutByteL3
                      00172                 BNKSEL I2CPORT+0x080
                          M         if I2CPORT+0x080 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT+0x080 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
007E   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set I2CPORT+0x080 & 0x180
007F   1606           00173                 bsf I2CPORT, SDA                        ;Release SDA
                      00174                 BNKSEL I2CPORT
                          M         if I2CPORT & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if I2CPORT & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0080   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set I2CPORT & 0x180
                      00175                 ;Fall into I2CSGetAck
                      00176 
                      00177 ;;;;;;; I2CSGetAck ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                      00178 ;*Detects if the master sent an acknowledge.  Expects: to be called when clock is low
                      00179 ;*Returns: 0x00 in WREG if Ack detected.  0xFF in WREG if Ack not detected
0081                  00180 I2CSGetAck ;public
0081   1E86           00181                 btfss I2CPORT, CLK                      ;Clock high transition
0082   2881           00182                         goto I2CSGetAck
0083   3000           00183                 movlw 0x00                                      ;Ack
0084   1A06           00184                 btfsc I2CPORT, SDA                      ;Test SDA
0085   30FF           00185                         movlw 0xFF                              ;No Ack
0086                  00186 I2CSGetAckL1
0086   1A86           00187                 btfsc I2CPORT, CLK                      ;Clock low transition
0087   2886           00188                         goto I2CSGetAckL1
0088   0008           00189                 return
                      00408 
                      00409 ;=============================================================================
                      00410 ; M A I N
                      00411 ;=============================================================================
                      00412 ;Initalize for the program
                      00413 ;-----------------------------------------------------------------------------
0089                  00414 Initial
                      00415 if HARDWARE == 0x10
                      00416     clrf PORTA
                      00417     BNKSEL TRISA
                      00418     MOVLF B'00000011', TRISA                    ;Configure PORTA
                      00419     MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
                      00420         MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
                      00421 
                      00422     MOVLF B'00000001', ADC_CONTROLPORT
                      00423     MOVLF B'11111111', ADC_DATAPORT
                      00424 
                      00425     MOVLF B'00000111', TRISE            ;Set up as inputs
                      00426         MOVLF B'00000111', ADCON1           ;Turn off A/D converter
                      00427     MOVLF B'11111001', TRISC                    ;Configure PORTC
                      00428 
                      00429         ;Initialize Serial Port
                      00430         MOVLF D'20', SPBRG                                      ;Set to 57,600 baud (nominally 56,818 ba
                            ud at 20 MHz clock).
                      00431         MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mode, high 
                            speed mode
                      00432         BSF PIE1,TXIE                                           ;Enable transmit interrupts
                      00433         BSF PIE1,RCIE                                           ;Enable receive interrupts
                      00434     BNKSEL 0x0000
                      00435         MOVLF B'10010000', RCSTA                        ;Initialize recieve
                      00436 
                      00437     bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
                      00438     clrf ADCON0
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00439 
                      00440 else
0089   0185           00441     clrf PORTA
                      00442     BNKSEL TRISA
                          M         if TRISA & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if TRISA & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
008A   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISA & 0x180
                      00443     MOVLF B'00010111', TRISA                    ;Configure PORTA
008B   3017               M     movlw B'00010111'
008C   0085               M     movwf TRISA
                      00444     MOVLF B'11000000', OPTION_REG       ;Interrupt on rising edge of RB0
008D   30C0               M     movlw B'11000000'
008E   0081               M     movwf OPTION_REG
                      00445         MOVLF B'00010000', INTCON           ;Interrupt on RB0 only, but not enabled yet
008F   3010               M     movlw B'00010000'
0090   008B               M     movwf INTCON
                      00446     MOVLF B'00110001', TRISB
0091   3031               M     movlw B'00110001'
0092   0086               M     movwf TRISB
                      00447     MOVLF B'11111111', TRISD
0093   30FF               M     movlw B'11111111'
0094   0088               M     movwf TRISD
                      00448     MOVLF B'00000100', TRISE            ;Set up USB detect as input, CS and ADDR0 as outputs
0095   3004               M     movlw B'00000100'
0096   0089               M     movwf TRISE
                      00449         MOVLF B'00000111', ADCON1           ;Turn off A/D converter
0097   3007               M     movlw B'00000111'
0098   009F               M     movwf ADCON1
                      00450     MOVLF B'10111001', TRISC                    ;Configure PORTC
0099   30B9               M     movlw B'10111001'
009A   0087               M     movwf TRISC
                      00451 
                      00452         ;Initialize Serial Port
                      00453         MOVLF D'20', SPBRG                                      ;Set to 57,600 baud (nominally 56,818 ba
                            ud at 20 MHz clock).
009B   3014               M     movlw D'20'
009C   0099               M     movwf SPBRG
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00454         MOVLF B'00100100', TXSTA                        ;Initialize transmit in asynchronous mode, high 
                            speed mode
009D   3024               M     movlw B'00100100'
009E   0098               M     movwf TXSTA
009F   160C           00455         BSF PIE1,TXIE                                           ;Enable transmit interrupts
00A0   168C           00456         BSF PIE1,RCIE                                           ;Enable receive interrupts
                      00457     BNKSEL 0x0000       
                          M         if 0x0000 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if 0x0000 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
00A1   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set 0x0000 & 0x180
                      00458         MOVLF B'10010000', RCSTA                        ;Eight bit recieve inabled
00A2   3090               M     movlw B'10010000'
00A3   0098               M     movwf RCSTA
                      00459 
00A4   1383           00460     bcf STATUS, IRP                     ;Ensure indirect addressing of Bank0 and Bank1
00A5   019F           00461     clrf ADCON0
                      00462 endif
                      00463         
00A6                  00464 Main
00A6   20CE           00465     call WaitComm
                      00466 
00A7   01FA           00467         clrf modetempb                                          ;Clear the modetempb for repetative samp
                            ling
                      00468         
00A8                  00469 MainB
00A8   0870           00470         movf configLoc1, w                  ;Put configuration in WREG
00A9   1089           00471     bcf ADC_CONTROLPORT, ADDR0          ;Select Channel
00AA   1A70           00472     btfsc configLoc1, CHANNELBIT
00AB   1489           00473         bsf ADC_CONTROLPORT, ADDR0
                      00474     if (high MainSelect)
                      00475         movlw high MainSelect          ;Prepare for jump
                      00476         movwf PCLATH
                      00477     else
00AC   018A           00478         clrf PCLATH
                      00479     endif
00AD   390F           00480     andlw (1<<FREQMODEBIT3)|(1<<FREQMODEBIT2)|(1<<FREQMODEBIT1)|(1<<FREQMODEBIT0)   ;Unmask FreqMode
00AE   00F9           00481     movwf modetemp                                              ;Multiply by 3
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00AF   1003           00482     bcf STATUS, C
00B0   0DF9           00483     rlf modetemp, f
00B1   0779           00484     addwf modetemp, w
00B2   1086           00485     bcf ADC_PORT, CS                    ;Select MAX114
00B3   1F70           00486     btfss configLoc1, TRIGGERENBIT      ;Decide if trigger is enabled.  If so, wait on interrupt
00B4   280C           00487         goto MainSelect        
00B5                  00488 MainWaitTrig                            ;Trigger is enabled, set up interrupt
00B5   00F9           00489     movwf modetemp                                              ;Store the jump for main select (freqmod
                            e)
00B6   0A73           00490     incf triggerDelay3, w                               ;Get the trigger delay ready
00B7   00F6           00491     movwf cntra
00B8   0A72           00492     incf triggerDelay2, w       
00B9   00F7           00493     movwf cntrb
00BA   0A71           00494     incf triggerDelay1, w
00BB   00F8           00495     movwf cntrc    
                      00496     BNKSEL OPTION_REG
                          M         if OPTION_REG & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if OPTION_REG & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
00BC   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set OPTION_REG & 0x180
00BD   1301           00497     bcf OPTION_REG, INTEDG              ;Assume trigger on falling edge
00BE   0870           00498     movf configLoc1, w                  ;Get the trigger status
00BF   3980           00499     andlw 0x01 << TRIGGERPOSBIT
                      00500     skipZero                            ;Positive or negative trigger
00C0   1D03               M         btfss STATUS, Z
00C1   1701           00501         bsf OPTION_REG, INTEDG          ;Trigger on rising edge
                      00502     BNKSEL 0x0000
                          M         if 0x0000 & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if 0x0000 & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
00C2   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set 0x0000 & 0x180
00C3   108B           00503     bcf INTCON, INTF                    ;Ensure that the RB0 interrupt flag is clear
00C4   178B           00504     bsf INTCON, GIE                     ;Enable RB0 Interrupt
00C5                  00505 MainWTrigB
00C5   2152           00506     call WaitByte                                               ;Wait for the trigger unless a "break tr
                            igger"
                      00507     skipEqLF B'11110011', i2csdata              ;message is recieved
00C6   087C               M         movf i2csdata, w
00C7   3AF3               M         xorlw B'11110011'
00C8   1D03               M         btfss STATUS, Z
00C9   28C5           00508         goto MainWTrigB
                      00509     MOVLF B'11011100', i2csdata         ;Respond
00CA   30DC               M     movlw B'11011100'
00CB   00FC               M     movwf i2csdata
00CC   215E           00510     call PutByte
00CD   28A6           00511     goto Main                                                   ;Abort
                      00512 
                      00513                                         ;Note that the gitter on the interrupt is
                      00514                                         ;1 cycles.  This translates to 200 ns
                      00515                                         ;on the PIC running at 20 MHz
                      00516 
                      00517 ;=============================================================================
                      00518 ; S U B R O U T I N E S
                      00519 ;=============================================================================
                      00520 
                      00521 ;Wait for command from computer and respond accordingly
                      00522 ;-----------------------------------------------------------------------------
00CE                  00523 WaitComm
00CE   2152           00524     call WaitByte                                       ;Wait for recieve
00CF                  00525 WaitComm_Test                                           ;Determine the command and the response
                      00526     skipEqLF B'11111000', i2csdata
00CF   087C               M         movf i2csdata, w
00D0   3AF8               M         xorlw B'11111000'
00D1   1D03               M         btfss STATUS, Z
00D2   2916           00527         goto WaitComm_Conf
00D3                  00528 WaitComm_Data
                      00529     MOVLF B'11011100', i2csdata     ;Send beginning of message
00D3   30DC               M     movlw B'11011100'
00D4   00FC               M     movwf i2csdata
00D5   215E           00530     call PutByte
                      00531     MOVLF BUFFERMIN, FSR            ;Set pointer to beginning of queue
00D6   3020               M     movlw BUFFERMIN
00D7   0084               M     movwf FSR
                      00532     MOVLF BUFFERSIZE, cntrb                     ;Set counter
00D8   3040               M     movlw BUFFERSIZE
00D9   00F7               M     movwf cntrb
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DA                  00533 WaitComm_SendDataA
                      00534     MOVFF INDF, i2csdata            ;Get data ready to send
00DA   0800               M     movf INDF, w
00DB   00FC               M     movwf i2csdata
00DC   0A84           00535     incf FSR, F                     ;Increment pointer
00DD   215E           00536     call PutByte                        ;Send data
00DE   39FF           00537     andlw 0xFF                      ;Until end of queue
                      00538     skipZero
00DF   1D03               M         btfss STATUS, Z
00E0   290A           00539         goto WaitComm_SendDataExit
00E1   0BF7           00540     decfsz cntrb, f
00E2   28DA           00541         goto WaitComm_SendDataA
                      00542         MOVLF BUFFERSIZE, cntrb                 ;Set counter
00E3   3040               M     movlw BUFFERSIZE
00E4   00F7               M     movwf cntrb
00E5   1784           00543         bsf FSR, 7                                              ;Bank 1
00E6   0384           00544         decf FSR, f
00E7                  00545 WaitComm_SendDataB
                      00546     MOVFF INDF, i2csdata            ;Get data ready to send
00E7   0800               M     movf INDF, w
00E8   00FC               M     movwf i2csdata
00E9   0384           00547     decf FSR, F                     ;Increment pointer
00EA   215E           00548     call PutByte                        ;Send data
00EB   39FF           00549     andlw 0xFF                      ;Until end of queue
                      00550     skipZero
00EC   1D03               M         btfss STATUS, Z
00ED   290A           00551         goto WaitComm_SendDataExit
00EE   0BF7           00552     decfsz cntrb, f
00EF   28E7           00553         goto WaitComm_SendDataB
                      00554         MOVLF BUFFERSIZE, cntrb                 ;Set counter
00F0   3040               M     movlw BUFFERSIZE
00F1   00F7               M     movwf cntrb
00F2   1783           00555         bsf STATUS, IRP                                 ;Bank 3
00F3   0A84           00556         incf FSR, f
00F4                  00557 WaitComm_SendDataC
                      00558     MOVFF INDF, i2csdata            ;Get data ready to send
00F4   0800               M     movf INDF, w
00F5   00FC               M     movwf i2csdata
00F6   0A84           00559     incf FSR, F                     ;Increment pointer
00F7   215E           00560     call PutByte                        ;Send data
00F8   39FF           00561     andlw 0xFF                      ;Until end of queue
                      00562     skipZero
00F9   1D03               M         btfss STATUS, Z
00FA   290A           00563         goto WaitComm_SendDataExit
00FB   0BF7           00564     decfsz cntrb, f
00FC   28F4           00565         goto WaitComm_SendDataC
                      00566         MOVLF BUFFERSIZE, cntrb                 ;Set counter
00FD   3040               M     movlw BUFFERSIZE
00FE   00F7               M     movwf cntrb
00FF   1384           00567         bcf FSR, 7                                              ;Bank 3
0100   0384           00568         decf FSR, f
0101                  00569 WaitComm_SendDataD
                      00570     MOVFF INDF, i2csdata            ;Get data ready to send
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0101   0800               M     movf INDF, w
0102   00FC               M     movwf i2csdata
0103   0384           00571     decf FSR, F                     ;Increment pointer
0104   215E           00572     call PutByte                        ;Send data
0105   39FF           00573     andlw 0xFF                      ;Until end of queue
                      00574     skipZero
0106   1D03               M         btfss STATUS, Z
0107   290A           00575         goto WaitComm_SendDataExit
0108   0BF7           00576     decfsz cntrb, f
0109   2901           00577         goto WaitComm_SendDataD
010A                  00578 WaitComm_SendDataExit
010A   1384           00579         bcf FSR, 7                                              ;Bank 0
010B   1383           00580         bcf STATUS, IRP
                      00581     CHANNELCONFSEND
                          M         MOVFF dataConfig, i2csdata              ;Channel configuration
010C   087D               M     movf dataConfig, w
010D   00FC               M     movwf i2csdata
010E   215E               M     call PutByte
010F   01FC               M         clrf i2csdata
0110   215E               M     call PutByte                                        ;Channel 1 offset
0111   215E               M     call PutByte                                        ;Channel 2 offset
                          M         MOVFF triggerLevel, i2csdata
0112   087E               M     movf triggerLevel, w
0113   00FC               M     movwf i2csdata
0114   215E               M     call PutByte                                ;Triggerlevel
0115   28CE           00582     goto WaitComm
                      00583 
0116                  00584 WaitComm_Conf
                      00585     skipEqLF B'11111001', i2csdata
0116   087C               M         movf i2csdata, w
0117   3AF9               M         xorlw B'11111001'
0118   1D03               M         btfss STATUS, Z
0119   2936           00586         goto WaitComm_Rec
                      00587     MOVLF B'11011101', i2csdata     ;Send beginning of message
011A   30DD               M     movlw B'11011101'
011B   00FC               M     movwf i2csdata
011C   215E           00588     call PutByte        
                      00589     CONFSEND
                          M     ;Send number of datapoints (2 bytes)
                          M     MOVLF high TOTALBUFFERSIZE, i2csdata
011D   3001               M     movlw high TOTALBUFFERSIZE
011E   00FC               M     movwf i2csdata
011F   215E               M     call PutByte
                          M     MOVLF low TOTALBUFFERSIZE, i2csdata
0120   3000               M     movlw low TOTALBUFFERSIZE
0121   00FC               M     movwf i2csdata
0122   215E               M     call PutByte
                          M     ;Send clock frequency configuration
                          M     MOVFF configLoc1, i2csdata
0123   0870               M     movf configLoc1, w
0124   00FC               M     movwf i2csdata
0125   215E               M     call PutByte
                          M     MOVFF triggerDelay1, i2csdata
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0126   0871               M     movf triggerDelay1, w
0127   00FC               M     movwf i2csdata
0128   215E               M     call PutByte
                          M     MOVFF triggerDelay2, i2csdata
0129   0872               M     movf triggerDelay2, w
012A   00FC               M     movwf i2csdata
012B   215E               M     call PutByte
                          M     MOVFF triggerDelay3, i2csdata
012C   0873               M     movf triggerDelay3, w
012D   00FC               M     movwf i2csdata
012E   215E               M     call PutByte
                          M     MOVFF sampleRate1, i2csdata
012F   0874               M     movf sampleRate1, w
0130   00FC               M     movwf i2csdata
0131   215E               M     call PutByte
                          M     MOVFF sampleRate2, i2csdata
0132   0875               M     movf sampleRate2, w
0133   00FC               M     movwf i2csdata
0134   215E               M     call PutByte
0135   28CE           00590     goto WaitComm
                      00591 
0136                  00592 WaitComm_Rec
                      00593     skipEqLF B'11111010', i2csdata
0136   087C               M         movf i2csdata, w
0137   3AFA               M         xorlw B'11111010'
0138   1D03               M         btfss STATUS, Z
0139   28CE           00594         goto WaitComm               ;No valid message sent
                      00595     MOVLF B'11011110', i2csdata     ;Send beginning of message
013A   30DE               M     movlw B'11011110'
013B   00FC               M     movwf i2csdata
013C   215E           00596     call PutByte
                      00597     CONFRECIEVE
013D   2155               M     call GetByte                        ;Recieve ConfigLoc1
013E   087C               M     movf i2csdata, w
013F   39DF               M     andlw ~(1 << CLOCKFREQBIT)      ;Don't accept flag for clock, but set it
                          M     if clockFreq == 20              ;if necessary
0140   3820               M         iorlw 1 << CLOCKFREQBIT
                          M     endif
0141   00F0               M     movwf configLoc1
0142   2155               M     call GetByte                        ;Recieve trigger delay
                          M     MOVFF i2csdata, triggerDelay1
0143   087C               M     movf i2csdata, w
0144   00F1               M     movwf triggerDelay1
0145   2155               M     call GetByte
                          M     MOVFF i2csdata, triggerDelay2
0146   087C               M     movf i2csdata, w
0147   00F2               M     movwf triggerDelay2
0148   2155               M     call GetByte                
                          M     MOVFF i2csdata, triggerDelay3
0149   087C               M     movf i2csdata, w
014A   00F3               M     movwf triggerDelay3
014B   2155               M     call GetByte                                        ;Recieve sample rate
                          M     MOVFF i2csdata, sampleRate1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

014C   087C               M     movf i2csdata, w
014D   00F4               M     movwf sampleRate1
014E   2155               M     call GetByte
                          M     MOVFF i2csdata, sampleRate2
014F   087C               M     movf i2csdata, w
0150   00F5               M     movwf sampleRate2
0151   0008           00598     return
                      00599 
                      00600 ;WaitByte is used to wait for a byte either on serial port or on the i2c port
                      00601 ;------------------------------------------------------------------------------
0152                  00602 WaitByte
0152   1D05           00603         btfss SPPORT, SP
0153   2846           00604             goto I2CSWaitStart          
0154   2957           00605         goto GetByteSerial
                      00606 
                      00607 ;GetByte is used to recieve a byte on either a serial port or on the i2c port
                      00608 ;------------------------------------------------------------------------------
0155                  00609 GetByte
0155   1D05           00610         btfss SPPORT, SP
0156   2853           00611             goto I2CSGetByte            
0157                  00612 GetByteSerial
0157   1E8C           00613         btfss PIR1, RCIF                        
0158   2957           00614                 goto GetByteSerial
0159                  00615 GetByteSerialB
                      00616         MOVFF RCREG, i2csdata           ;Read byte from serial FIFO
0159   081A               M     movf RCREG, w
015A   00FC               M     movwf i2csdata
015B   1A8C           00617         btfsc PIR1, RCIF
015C   2959           00618                 goto GetByteSerialB
015D                  00619 GetByteSerialC
015D   3400           00620         retlw 0
                      00621         
                      00622 ;PutByte is used to put a byte either on the serial port or on the i2c port
                      00623 ;------------------------------------------------------------------------------
015E                  00624 PutByte
015E   1D05           00625         btfss SPPORT, SP
015F   286C           00626                 goto I2CSPutByte
0160                  00627 PutByteSerial
0160   1E0C           00628         btfss PIR1, TXIF
0161   2960           00629                 goto PutByteSerial
                      00630         MOVFF i2csdata, TXREG
0162   087C               M     movf i2csdata, w
0163   0099               M     movwf TXREG
0164   3400           00631         retlw 0
                      00632 
                      00633 ;Delay used to adjust sample rate and trigger delay
                      00634 ;Any delay due to using a call must be added (i.e. delay doesn't include call
                      00635 ;statement)
                      00636 ;Delay = 5+7*(cntrb:cntra)+3*cntrb if cntra > 0, cntrb >= 0
                      00637 ;If cntra = 0 then delay as if cntra = 256
                      00638 ;If cntrb:cntra = 0x0000 then Delay as if cntrb = 255, cntra = 256
                      00639 ;-----------------------------------------------------------------------------
0165                  00640 Delay
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0165   3001           00641     movlw 0x01
0166                  00642 DelayLoop
0166   02F6           00643     subwf cntra, F
0167   1C03           00644     btfss STATUS, C
0168   02F7           00645         subwf cntrb, F
0169   08F6           00646     movf cntra, F
                      00647     skipZero
016A   1D03               M         btfss STATUS, Z
016B   2966           00648         goto DelayLoop
016C   08F7           00649     movf cntrb, F
                      00650     skipZero
016D   1D03               M         btfss STATUS, Z
016E   2966           00651         goto DelayLoop
016F   0008           00652         return
                      00653 
                      00654 ;ADCShutdown, shutsdown the MAX114/MAX118
                      00655 ;-----------------------------------------------------------------------------
0170                  00656 ADCShutdown
0170   0080           00657     movwf INDF                      ;Save to QUEUE
0171   1486           00658     bsf ADC_PORT, CS                    ;Unselect MAX114
0172   1383           00659     bcf STATUS, IRP                                     ;Set bank = 0
                      00660         CHANNELCONFSTORE
                          M     ;Format of channel configuration is: Channel 1 Scale (2) bits
                          M     ;                                    For scale, 00 = 1, 01 = 2, 10 = 5
                          M     ;                                    Channel 2 Scale (2) bits
                          M     ;                                    Channel 1 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Channel 2 AC = 1 / DC = 0 (1) bit
                          M     ;                                    Two least significant bits = 0
0173   01FD               M     clrf dataConfig
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0174   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
0175   1087               M         bcf TRISC, CH1SEL                               ;Ch1Sel output
0176   1507               M         bsf TRISC, CH2SEL                               ;Ch2Sel high Z
0177   1205               M         bcf TRISA, CH1SELG                              ;Ch1Sel output
0178   1685               M         bsf TRISA, CH2SELG                              ;Ch2Sel high Z
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         BNKSEL ANALOG_SEL       
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
0179   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
017A   1087               M         bcf ANALOG_SEL, CH1SEL                  ;Ch1Sel low
017B   1205               M         bcf ANALOG_GAIN, CH1SELG                ;Ch1SelG low
                          M if HARDWARE == 0x10
                          M         bsf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                 bcf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                 bcf dataConfig, 7
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                 bsf dataConfig, 6
                          M else
017C   177D               M         bsf dataConfig, 6                               ;Assume Gain = 2
017D   1C05               M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
017E   137D               M                 bcf dataConfig, 6
017F   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
0180   137D               M                 bcf dataConfig, 6
0181   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
0182   17FD               M                 bsf dataConfig, 7
                          M endif
0183   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
0184   15FD               M                 bsf dataConfig, 3
0185   1487               M         bsf ANALOG_SEL, CH1SEL
0186   1605               M         bsf ANALOG_GAIN, CH1SELG
                          M         BNKSEL TRISC
                          M         if TRISC & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         if TRISC & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
0187   1683               M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
                          M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000080                M         CURRENTBANK set TRISC & 0x180
0188   1487               M         bsf TRISC, CH1SEL                               ;Ch1Sel high Z
0189   1107               M         bcf TRISC, CH2SEL                               ;Ch2Sel output
018A   1605               M         bsf TRISA, CH1SELG                              ;Ch1Sel high Z
018B   1285               M         bcf TRISA, CH2SELG                              ;Ch2Sel output
                          M         BNKSEL ANALOG_SEL
                          M         if ANALOG_SEL & 0x0100
                          M                 if (CURRENTBANK & 0x0100) == 0
                          M                         bsf STATUS, RP1
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0100) == 0x0100
                          M                         bcf STATUS, RP1
                          M                 endif
                          M         endif
                          M         if ANALOG_SEL & 0x0080
                          M                 if (CURRENTBANK & 0x0080) == 0
                          M                         bsf STATUS, RP0
                          M                 endif
                          M         else
                          M                 if (CURRENTBANK & 0x0080) == 0x0080
018C   1283               M                         bcf STATUS, RP0
                          M                 endif
                          M         endif
  00000000                M         CURRENTBANK set ANALOG_SEL & 0x180
018D   1107               M         bcf ANALOG_SEL, CH2SEL                  ;Ch2Sel low
018E   1285               M         bcf ANALOG_GAIN, CH2SELG                ;Ch1SelG low
                          M if HARDWARE == 0x10
                          M         bsf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
                          M                 bcf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then unmark
                          M                 bcf dataConfig, 5
                          M         btfss ANALOG_GAIN, GAIN2                ;If Gain2 then mark
                          M                 bsf dataConfig, 4
                          M else
018F   167D               M         bsf dataConfig, 4                               ;Assume Gain = 2
0190   1C05               M         btfss ANALOG_GAIN, GAIN1                ;If Gain1 then unmark
0191   127D               M                 bcf dataConfig, 4
0192   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then unmark
0193   127D               M                 bcf dataConfig, 4
0194   1C85               M         btfss ANALOG_GAIN, GAIN5                ;If Gain5 then mark
0195   16FD               M                 bsf dataConfig, 5
                          M endif
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0196   1807               M         btfsc ANALOG_ACDC, ACDCMODE             ;If DC coupling open (implies AC coupling) then mark
0197   157D               M                 bsf dataConfig, 2
0198   1507               M     bsf ANALOG_SEL, CH2SEL
0199   1685               M         bsf ANALOG_GAIN, CH2SELG
                          M         ;Next byte is Trigger Level
019A   1089               M         bcf ADC_CONTROLPORT, ADDR0                              ;Select address for trigger level
019B   1506               M         bsf ADC_PORT, ADDR1
019C   1186               M         bcf ADC_PORT, ADDR2
019D   1086               M         bcf ADC_PORT, CS                                ;Select maxim ADC
019E   1009               M         bcf ADC_CONTROLPORT, RDD                                ;Begin conversion
019F   29A0               M         goto $ + 1                                              ;Wait 3
01A0   0000               M         nop
01A1   0808               M         movf ADC_DATAPORT, w                    ;Save trigger level
01A2   1409               M         bsf ADC_CONTROLPORT, RDD                                ;stop conversion
01A3   1486               M         bsf ADC_PORT, CS                        ;unselect
01A4   1089               M         bcf ADC_CONTROLPORT, ADDR0                              ;Unselect address for trigger level
01A5   1106               M         bcf ADC_PORT, ADDR1
01A6   1186               M         bcf ADC_PORT, ADDR2
01A7   00FE               M         movwf triggerLevel
01A8   28A6           00661     goto Main
                      00662 
                      00663 ;Sample Delayed
                      00664 ;Sampling rate = 5e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      00665 ;Sampling rate = 1e6 / (19 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      00666 ;-----------------------------------------------------------------------------
01A9                  00667 SampleDelayed
01A9   1009           00668     bcf ADC_CONTROLPORT, RDD                    ;Begin Conversion
                      00669     MOVLF BUFFERSIZE-1, cntrc       ;Initialize counter, use cntrc as counter
01AA   303F               M     movlw BUFFERSIZE-1
01AB   00F8               M     movwf cntrc
                      00670     MOVLF BUFFERMIN, FSR            ;Initialize pointer
01AC   3020               M     movlw BUFFERMIN
01AD   0084               M     movwf FSR
                      00671     MOVFF sampleRate2, cntra        ;Restore cntra
01AE   0875               M     movf sampleRate2, w
01AF   00F6               M     movwf cntra
                      00672     MOVFF sampleRate1, cntrb        ;Restore cntrb
01B0   0874               M     movf sampleRate1, w
01B1   00F7               M     movwf cntrb
01B2   0000           00673         nop
01B3   2165           00674     call Delay
01B4                  00675 SampleDelayedLoopA
01B4   0808           00676     movf ADC_DATAPORT, W            ;Sample
01B5   1409           00677     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
01B6   1009           00678     bcf ADC_CONTROLPORT, RDD                ;Begin next conversion
01B7   0080           00679     movwf INDF                      ;Save to QUEUE
01B8   0A84           00680     incf FSR, F                     ;Increment QUEUE pointer
01B9                  00681 StSampleDelayedLoopA
                      00682     MOVFF sampleRate2, cntra        ;Restore cntra
01B9   0875               M     movf sampleRate2, w
01BA   00F6               M     movwf cntra
                      00683     MOVFF sampleRate1, cntrb        ;Restore cntrb
01BB   0874               M     movf sampleRate1, w
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01BC   00F7               M     movwf cntrb
01BD   2165           00684     call Delay
01BE   0BF8           00685     decfsz cntrc, F             ;Increment counter, 64 samples?
01BF   29B4           00686         goto SampleDelayedLoopA
01C0   0000           00687         nop
01C1   0808           00688         movf ADC_DATAPORT, W                    ;Last sample in Bank 1
01C2   1409           00689     bsf ADC_CONTROLPORT, RDD                    ;Stop conversion
01C3   1009           00690     bcf ADC_CONTROLPORT, RDD                    ;Begin next conversion
01C4   0080           00691     movwf INDF                      ;Save to QUEUE
01C5   1784           00692         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00693         MOVLF BUFFERSIZE-1, cntrc
01C6   303F               M     movlw BUFFERSIZE-1
01C7   00F8               M     movwf cntrc
                      00694     MOVFF sampleRate2, cntra         ;Restore cntra
01C8   0875               M     movf sampleRate2, w
01C9   00F6               M     movwf cntra
                      00695     MOVFF sampleRate1, cntrb        ;Restore cntrb
01CA   0874               M     movf sampleRate1, w
01CB   00F7               M     movwf cntrb
01CC   2165           00696         call Delay
01CD   0000           00697         nop
01CE                  00698 SampleDelayedLoopB
01CE   0808           00699     movf ADC_DATAPORT, W            ;Sample
01CF   1409           00700     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01D0   1009           00701     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01D1   0080           00702     movwf INDF                      ;Save to QUEUE
01D2   0384           00703     decf FSR, F                     ;Increment QUEUE pointer
                      00704     MOVFF sampleRate2, cntra         ;Restore cntra
01D3   0875               M     movf sampleRate2, w
01D4   00F6               M     movwf cntra
                      00705     MOVFF sampleRate1, cntrb        ;Restore cntrb
01D5   0874               M     movf sampleRate1, w
01D6   00F7               M     movwf cntrb
01D7   2165           00706     call Delay
01D8   0BF8           00707     decfsz cntrc, F                         ;Increment counter, 64 samples?
01D9   29CE           00708         goto SampleDelayedLoopB
01DA   0000           00709         nop
01DB   0808           00710         movf ADC_DATAPORT, W                    ;Last sample in Bank 2
01DC   1409           00711     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01DD   1009           00712     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01DE   0080           00713     movwf INDF                      ;Save to QUEUE
01DF   1783           00714         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
                      00715         MOVLF BUFFERSIZE-1, cntrc
01E0   303F               M     movlw BUFFERSIZE-1
01E1   00F8               M     movwf cntrc
                      00716     MOVFF sampleRate2, cntra         ;Restore cntra
01E2   0875               M     movf sampleRate2, w
01E3   00F6               M     movwf cntra
                      00717     MOVFF sampleRate1, cntrb        ;Restore cntrb
01E4   0874               M     movf sampleRate1, w
01E5   00F7               M     movwf cntrb
01E6   2165           00718         call Delay
01E7   0000           00719         nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01E8                  00720 SampleDelayedLoopC
01E8   0808           00721     movf ADC_DATAPORT, W            ;Sample
01E9   1409           00722     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01EA   1009           00723     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01EB   0080           00724     movwf INDF                      ;Save to QUEUE
01EC   0A84           00725     incf FSR, F                     ;Increment QUEUE pointer
                      00726     MOVFF sampleRate2, cntra         ;Restore cntra
01ED   0875               M     movf sampleRate2, w
01EE   00F6               M     movwf cntra
                      00727     MOVFF sampleRate1, cntrb        ;Restore cntrb
01EF   0874               M     movf sampleRate1, w
01F0   00F7               M     movwf cntrb
01F1   2165           00728     call Delay
01F2   0BF8           00729     decfsz cntrc, F                         ;Increment counter, 64 samples?
01F3   29E8           00730         goto SampleDelayedLoopC
01F4   0000           00731         nop
01F5   0808           00732         movf ADC_DATAPORT, W                    ;Last sample in Bank 4
01F6   1409           00733     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
01F7   1009           00734     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
01F8   0080           00735     movwf INDF                      ;Save to QUEUE
01F9   1384           00736         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 2
                      00737         MOVLF BUFFERSIZE-1, cntrc
01FA   303F               M     movlw BUFFERSIZE-1
01FB   00F8               M     movwf cntrc
                      00738     MOVFF sampleRate2, cntra         ;Restore cntra
01FC   0875               M     movf sampleRate2, w
01FD   00F6               M     movwf cntra
                      00739     MOVFF sampleRate1, cntrb        ;Restore cntrb
01FE   0874               M     movf sampleRate1, w
01FF   00F7               M     movwf cntrb
0200   2165           00740         call Delay
0201   0000           00741         nop
0202                  00742 SampleDelayedLoopD
0202   0808           00743     movf ADC_DATAPORT, W            ;Sample
0203   1409           00744     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0204   1009           00745     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0205   0080           00746     movwf INDF                      ;Save to QUEUE
0206   0384           00747     decf FSR, F                     ;Increment QUEUE pointer
                      00748     MOVFF sampleRate2, cntra         ;Restore cntra
0207   0875               M     movf sampleRate2, w
0208   00F6               M     movwf cntra
                      00749     MOVFF sampleRate1, cntrb        ;Restore cntrb
0209   0874               M     movf sampleRate1, w
020A   00F7               M     movwf cntrb
020B   2165           00750     call Delay
020C   0BF8           00751     decfsz cntrc, F                         ;Increment counter, 64 samples?
020D   2A02           00752         goto SampleDelayedLoopD
020E   0000           00753     nop
020F   0808           00754     movf ADC_DATAPORT, W            ;Last sample
0210   1409           00755     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0211   118A           00756     bcf PCLATH, 3                                       ;insure correct program memory page
0212   120A           00757     bcf PCLATH, 4
0213   2970           00758     goto ADCShutdown
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00759 
                      00760 ;SampleXYDelayed
                      00761 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 20 MHz clock
                      00762 ;Sampling rate = 5e6 / (26 + 7 * SAMPLERATE1:SAMPLERATE2 + 3 * SAMPLERATE1) with 4 MHz clock
                      00763 ;SampleXYDelayed does not sample X and Y at the same time.  Y is sampled 6 clock cycles
                      00764 ;behind X.  For a 20 MHz clock this is 1.2 uS, for a 4 MHz clock this is 6 uS.
                      00765 ;-----------------------------------------------------------------------------
0214                  00766 SampleXYDelayed
0214   1009           00767     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
0215   1489           00768     bsf ADC_CONTROLPORT, ADDR0              ;Set channel to Y
                      00769     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0216   3020               M     movlw BUFFERMIN
0217   0084               M     movwf FSR
0218   0808           00770     movf ADC_DATAPORT, W            ;Sample X
0219   1409           00771         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
021A   1009           00772         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
021B   1089           00773     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
021C   0080           00774     movwf INDF                      ;Save to QUEUE
021D   0A84           00775     incf FSR, F                     ;Increment QUEUE pointer
                      00776     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
021E   301F               M     movlw BUFFERSIZE/2-1
021F   00F8               M     movwf cntrc
                      00777     MOVFF sampleRate2, cntra         ;Restore cntra
0220   0875               M     movf sampleRate2, w
0221   00F6               M     movwf cntra
                      00778     MOVFF sampleRate1, cntrb        ;Restore cntrb
0222   0874               M     movf sampleRate1, w
0223   00F7               M     movwf cntrb
0224   2165           00779         call Delay
0225   0000           00780         nop
0226                  00781 SampleXYDelayedLA
0226   0808           00782     movf ADC_DATAPORT, W            ;Sample Y
0227   1409           00783     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0228   1009           00784         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0229   1489           00785         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
022A   0080           00786     movwf INDF                      ;Save to QUEUE
022B   0A84           00787     incf FSR, F                     ;Increment QUEUE pointer
022C   0808           00788     movf ADC_DATAPORT, W            ;Sample X
022D   1409           00789         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
022E   1009           00790         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
022F   1089           00791         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0230   0080           00792     movwf INDF                      ;Save to QUEUE
0231   0A84           00793     incf FSR, F                     ;Increment QUEUE pointer
                      00794     MOVFF sampleRate2, cntra         ;Restore cntra
0232   0875               M     movf sampleRate2, w
0233   00F6               M     movwf cntra
                      00795     MOVFF sampleRate1, cntrb        ;Restore cntrb
0234   0874               M     movf sampleRate1, w
0235   00F7               M     movwf cntrb
0236   2165           00796     call Delay
0237   0BF8           00797     decfsz cntrc, F                     ;Increment counter, 64 samples?
0238   2A26           00798         goto SampleXYDelayedLA
0239   0000           00799     nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023A   0808           00800     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
023B   1409           00801     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
023C   1009           00802         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
023D   1489           00803         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
023E   0080           00804     movwf INDF                      ;Save to QUEUE
023F   1784           00805         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0240   0808           00806     movf ADC_DATAPORT, W            ;Sample X
0241   1409           00807         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0242   1009           00808         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0243   1089           00809         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0244   0080           00810     movwf INDF                      ;Save to QUEUE
0245   0384           00811         decf FSR, f                                             ;Increment QUEUE pointer
                      00812     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
0246   301F               M     movlw BUFFERSIZE/2-1
0247   00F8               M     movwf cntrc
                      00813     MOVFF sampleRate2, cntra         ;Restore cntra
0248   0875               M     movf sampleRate2, w
0249   00F6               M     movwf cntra
                      00814     MOVFF sampleRate1, cntrb        ;Restore cntrb
024A   0874               M     movf sampleRate1, w
024B   00F7               M     movwf cntrb
024C   2165           00815     call Delay
024D   0000           00816         nop
024E                  00817 SampleXYDelayedLB
024E   0808           00818     movf ADC_DATAPORT, W            ;Sample Y
024F   1409           00819     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0250   1009           00820         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0251   1489           00821         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0252   0080           00822     movwf INDF                      ;Save to QUEUE
0253   0384           00823     decf FSR, F                     ;Increment QUEUE pointer
0254   0808           00824     movf ADC_DATAPORT, W            ;Sample X
0255   1409           00825         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0256   1009           00826         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0257   1089           00827         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0258   0080           00828     movwf INDF                      ;Save to QUEUE
0259   0384           00829     decf FSR, F                     ;Increment QUEUE pointer
                      00830     MOVFF sampleRate2, cntra         ;Restore cntra
025A   0875               M     movf sampleRate2, w
025B   00F6               M     movwf cntra
                      00831     MOVFF sampleRate1, cntrb        ;Restore cntrb
025C   0874               M     movf sampleRate1, w
025D   00F7               M     movwf cntrb
025E   2165           00832     call Delay
025F   0BF8           00833     decfsz cntrc, F                     ;Increment counter, 64 samples?
0260   2A4E           00834         goto SampleXYDelayedLB
0261   0000           00835     nop
0262   0808           00836     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
0263   1409           00837     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0264   1009           00838         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0265   1489           00839         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0266   0080           00840     movwf INDF                      ;Save to QUEUE
0267   1783           00841         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
0268   0808           00842     movf ADC_DATAPORT, W            ;Sample X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0269   1409           00843         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
026A   1009           00844         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
026B   1089           00845         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
026C   0080           00846     movwf INDF                      ;Save to QUEUE
026D   0A84           00847         incf FSR, f                                             ;Increment QUEUE pointer
                      00848     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
026E   301F               M     movlw BUFFERSIZE/2-1
026F   00F8               M     movwf cntrc
                      00849     MOVFF sampleRate2, cntra         ;Restore cntra
0270   0875               M     movf sampleRate2, w
0271   00F6               M     movwf cntra
                      00850     MOVFF sampleRate1, cntrb        ;Restore cntrb
0272   0874               M     movf sampleRate1, w
0273   00F7               M     movwf cntrb
0274   2165           00851     call Delay
0275   0000           00852         nop
0276                  00853 SampleXYDelayedLC
0276   0808           00854     movf ADC_DATAPORT, W            ;Sample Y
0277   1409           00855     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0278   1009           00856         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0279   1489           00857         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
027A   0080           00858     movwf INDF                      ;Save to QUEUE
027B   0A84           00859     incf FSR, F                     ;Increment QUEUE pointer
027C   0808           00860     movf ADC_DATAPORT, W            ;Sample X
027D   1409           00861         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
027E   1009           00862         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
027F   1089           00863         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0280   0080           00864     movwf INDF                      ;Save to QUEUE
0281   0A84           00865     incf FSR, F                     ;Increment QUEUE pointer
                      00866     MOVFF sampleRate2, cntra         ;Restore cntra
0282   0875               M     movf sampleRate2, w
0283   00F6               M     movwf cntra
                      00867     MOVFF sampleRate1, cntrb        ;Restore cntrb
0284   0874               M     movf sampleRate1, w
0285   00F7               M     movwf cntrb
0286   2165           00868     call Delay
0287   0BF8           00869     decfsz cntrc, F                     ;Increment counter, 64 samples?
0288   2A76           00870         goto SampleXYDelayedLC
0289   0000           00871     nop
028A   0808           00872     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
028B   1409           00873     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
028C   1009           00874         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
028D   1489           00875         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
028E   0080           00876     movwf INDF                      ;Save to QUEUE
028F   1384           00877         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
0290   0808           00878     movf ADC_DATAPORT, W            ;Sample X
0291   1409           00879         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0292   1009           00880         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0293   1089           00881         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0294   0080           00882     movwf INDF                      ;Save to QUEUE
0295   0384           00883         decf FSR, f                                             ;Increment QUEUE pointer
                      00884     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
0296   301F               M     movlw BUFFERSIZE/2-1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0297   00F8               M     movwf cntrc
                      00885     MOVFF sampleRate2, cntra         ;Restore cntra
0298   0875               M     movf sampleRate2, w
0299   00F6               M     movwf cntra
                      00886     MOVFF sampleRate1, cntrb        ;Restore cntrb
029A   0874               M     movf sampleRate1, w
029B   00F7               M     movwf cntrb
029C   2165           00887     call Delay
029D   0000           00888         nop
029E                  00889 SampleXYDelayedLD
029E   0808           00890     movf ADC_DATAPORT, W            ;Sample Y
029F   1409           00891     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02A0   1009           00892         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02A1   1489           00893         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
02A2   0080           00894     movwf INDF                      ;Save to QUEUE
02A3   0384           00895     decf FSR, F                     ;Increment QUEUE pointer
02A4   0808           00896     movf ADC_DATAPORT, W            ;Sample X
02A5   1409           00897     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02A6   1009           00898         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
02A7   1089           00899         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
02A8   0080           00900     movwf INDF                      ;Save to QUEUE
02A9   0384           00901     decf FSR, F                     ;Increment QUEUE pointer
                      00902     MOVFF sampleRate2, cntra         ;Restore cntra
02AA   0875               M     movf sampleRate2, w
02AB   00F6               M     movwf cntra
                      00903     MOVFF sampleRate1, cntrb        ;Restore cntrb
02AC   0874               M     movf sampleRate1, w
02AD   00F7               M     movwf cntrb
02AE   2165           00904     call Delay
02AF   0BF8           00905     decfsz cntrc, F                     ;Increment counter, 64 samples?
02B0   2A9E           00906         goto SampleXYDelayedLD
02B1   0000           00907     nop
02B2   0808           00908     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
02B3   1409           00909     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
02B4   118A           00910     bcf PCLATH, 3                                       ;insure correct program memory page
02B5   120A           00911     bcf PCLATH, 4
02B6   2970           00912     goto ADCShutdown
                      00913 
                      00914 ;Fast sample
                      00915 ;Sampling rate = 625 kHz with 20 MHz clock
                      00916 ;Sampling rate = 125 kHz with 4 MHz clock
                      00917 ;-----------------------------------------------------------------------------
02B7                  00918 Sample625k
02B7   1009           00919     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      00920     MOVLF BUFFERSIZE-1, cntra               ;Initialize counter
02B8   303F               M     movlw BUFFERSIZE-1
02B9   00F6               M     movwf cntra
                      00921     MOVLF BUFFERMIN, FSR                ;Initialize pointer
02BA   3020               M     movlw BUFFERMIN
02BB   0084               M     movwf FSR
02BC   0000           00922         nop
02BD                  00923 Sample625kLoopA
02BD   0808           00924     movf ADC_DATAPORT, W                ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02BE   1409           00925     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02BF   1009           00926     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02C0   0080           00927     movwf INDF                          ;Save to QUEUE
02C1   0A84           00928     incf FSR, F                         ;Increment QUEUE pointer
02C2   0BF6           00929     decfsz cntra, F                      ;Increment counter, 64 samples?
02C3   2ABD           00930         goto Sample625kLoopA
02C4   0000           00931     nop
02C5   0808           00932         movf ADC_DATAPORT, w                            ;Last sample in Bank 1
02C6   1409           00933         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
02C7   1009           00934         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
02C8   0080           00935         movwf INDF                                                      ;Save to QUEUE
02C9   1784           00936         bsf FSR, 7                                                      ;Move QUEUE pointer to Bank 2
                      00937         MOVLF BUFFERSIZE-1, cntra
02CA   303F               M     movlw BUFFERSIZE-1
02CB   00F6               M     movwf cntra
02CC   0000           00938         nop
02CD                  00939 Sample625kLoopB
02CD   0808           00940     movf ADC_DATAPORT, W                ;Sample
02CE   1409           00941     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02CF   1009           00942     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02D0   0080           00943     movwf INDF                          ;Save to QUEUE
02D1   0384           00944     decf FSR, F                         ;Increment QUEUE pointer
02D2   0BF6           00945     decfsz cntra, F                      ;Increment counter, 64 samples?
02D3   2ACD           00946         goto Sample625kLoopB
02D4   0000           00947         nop
02D5   0808           00948         movf ADC_DATAPORT, w                            ;Last sample in Bank 2
02D6   1409           00949         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
02D7   1009           00950         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
02D8   0080           00951         movwf INDF                                                      ;Save to QUEUE
02D9   1783           00952         bsf STATUS, IRP                                         ;Move QUEUE pointer to Bank 4
                      00953         MOVLF BUFFERSIZE-1, cntra
02DA   303F               M     movlw BUFFERSIZE-1
02DB   00F6               M     movwf cntra
02DC   0000           00954         nop
02DD                  00955 Sample625kLoopC
02DD   0808           00956     movf ADC_DATAPORT, W                ;Sample
02DE   1409           00957     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02DF   1009           00958     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02E0   0080           00959     movwf INDF                          ;Save to QUEUE
02E1   0A84           00960     incf FSR, F                         ;Increment QUEUE pointer
02E2   0BF6           00961     decfsz cntra, F                      ;Increment counter, 64 samples?
02E3   2ADD           00962         goto Sample625kLoopC
02E4   0000           00963         nop
02E5   0808           00964         movf ADC_DATAPORT, w                            ;Last sample in Bank 4
02E6   1409           00965         bsf ADC_CONTROLPORT, RDD                        ;stop conversion
02E7   1009           00966         bcf ADC_CONTROLPORT, RDD                        ;begin next conversion
02E8   0080           00967         movwf INDF                                                      ;Save to QUEUE
02E9   1384           00968         bcf FSR, 7                                                      ;Move QUEUE pointer to Bank 3
                      00969         MOVLF BUFFERSIZE-1, cntra
02EA   303F               M     movlw BUFFERSIZE-1
02EB   00F6               M     movwf cntra
02EC   0000           00970         nop
02ED                  00971 Sample625kLoopD
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02ED   0808           00972     movf ADC_DATAPORT, W                ;Sample
02EE   1409           00973     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02EF   1009           00974     bcf ADC_CONTROLPORT, RDD            ;Begin next conversion
02F0   0080           00975     movwf INDF                          ;Save to QUEUE
02F1   0384           00976     decf FSR, F                         ;Increment QUEUE pointer
02F2   0BF6           00977     decfsz cntra, F                      ;Increment counter, 64 samples?
02F3   2AED           00978         goto Sample625kLoopD
02F4   0000           00979         nop
02F5   0808           00980     movf ADC_DATAPORT, W                ;Last sample
02F6   1409           00981     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
02F7   118A           00982     bcf PCLATH, 3                                               ;insure correct program memory page
02F8   120A           00983     bcf PCLATH, 4
02F9   2970           00984     goto ADCShutdown
                      00985 
                      00986 ;Fast sample
                      00987 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      00988 ;Sampling rate =  83.333 kHz with 4 MHz clock
                      00989 ;or
                      00990 ;Sampling rate = 250 kHz with 20 MHz clock
                      00991 ;Sampling rate =  50 kHz with 4 MHz clock
                      00992 ;-----------------------------------------------------------------------------
02FA                  00993 Sample417k250k
02FA   1009           00994     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
                      00995     MOVLF BUFFERSIZE - 1, cntra     ;Initialize counter
02FB   303F               M     movlw BUFFERSIZE - 1
02FC   00F6               M     movwf cntra
                      00996     MOVLF BUFFERMIN, FSR            ;Initialize pointer
02FD   3020               M     movlw BUFFERMIN
02FE   0084               M     movwf FSR
02FF   2B00           00997         goto $ + 1                                              ;Delay 3
0300   1D70           00998         btfss configLoc1, 2                             ;Choose to delay by 3 more or by 11 more
0301   2B03           00999                 goto Sample417kLoopA
0302   2359           01000         call DelaySeven                                 ;Delay 9 cycles
0303                  01001 Sample417kLoopA
0303   0808           01002     movf ADC_DATAPORT, W            ;Sample
0304   1409           01003     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0305   1009           01004     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0306   0080           01005     movwf INDF                      ;Save to QUEUE
0307   0A84           01006     incf FSR, F                     ;Increment QUEUE pointer
0308   1D70           01007     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0309   2B0B           01008         goto Sample417kA            ;Delaying 4 cycles, sample at 417k
030A                  01009 Sample250kA
030A   2359           01010         call DelaySeven                                 ;Delay 9 cycles
030B                  01011 Sample417kA
030B   0000           01012     nop
030C   0BF6           01013     decfsz cntra, F                  ;Increment counter, 64 samples?
030D   2B03           01014         goto Sample417kLoopA
030E   0000           01015     nop
030F   0808           01016         movf ADC_DATAPORT, W                    ;Last sample bank 1
0310   1409           01017     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0311   1009           01018     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0312   0080           01019     movwf INDF                      ;Save to QUEUE
0313   1784           01020         bsf FSR, 7                                              ;Goto bank 2
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01021         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0314   303F               M     movlw BUFFERSIZE - 1
0315   00F6               M     movwf cntra
0316   2B17           01022         goto $ + 1
0317   1D70           01023     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0318   2B1A           01024         goto Sample417kLoopB        ;Delaying  cycles, sample at 417k
0319   2359           01025         call DelaySeven                                 ;Delay 9 cycles
031A                  01026 Sample417kLoopB
031A   0808           01027     movf ADC_DATAPORT, W            ;Sample
031B   1409           01028     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
031C   1009           01029     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
031D   0080           01030     movwf INDF                      ;Save to QUEUE
031E   0384           01031     decf FSR, F                     ;Increment QUEUE pointer
031F                  01032 StSample417kLoopB
031F   1D70           01033     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0320   2B22           01034         goto Sample417kB            ;Delaying 4 cycles, sample at 417k
0321                  01035 Sample250kB
0321   2359           01036         call DelaySeven                                 ;Delay 9 cycles
0322                  01037 Sample417kB
0322   0000           01038     nop
0323   0BF6           01039     decfsz cntra, F                  ;Increment counter, 64 samples?
0324   2B1A           01040         goto Sample417kLoopB
0325   0000           01041     nop
0326   0808           01042         movf ADC_DATAPORT, W                    ;Last sample bank 2
0327   1409           01043     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0328   1009           01044     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0329   0080           01045     movwf INDF                      ;Save to QUEUE
032A   1783           01046         bsf STATUS, IRP                                 ;Goto bank 4
                      01047         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
032B   303F               M     movlw BUFFERSIZE - 1
032C   00F6               M     movwf cntra
032D   2B2E           01048         goto $ + 1
032E   1D70           01049     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
032F   2B31           01050         goto Sample417kLoopC        ;Delaying  cycles, sample at 417k
0330   2359           01051         call DelaySeven                                 ;Delay 9 cycles
0331                  01052 Sample417kLoopC
0331   0808           01053     movf ADC_DATAPORT, W            ;Sample
0332   1409           01054     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0333   1009           01055     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0334   0080           01056     movwf INDF                      ;Save to QUEUE
0335   0A84           01057     incf FSR, F                     ;Increment QUEUE pointer
0336                  01058 StSample417kLoopC
0336   1D70           01059     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
0337   2B39           01060         goto Sample417kC            ;Delaying 4 cycles, sample at 417k
0338                  01061 Sample250kC
0338   2359           01062         call DelaySeven                                 ;Delay 9 cycles
0339                  01063 Sample417kC
0339   0000           01064     nop
033A   0BF6           01065     decfsz cntra, F                  ;Increment counter, 64 samples?
033B   2B31           01066         goto Sample417kLoopC
033C   0000           01067     nop
033D   0808           01068         movf ADC_DATAPORT, W                    ;Last sample bank 4
033E   1409           01069     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

033F   1009           01070     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0340   0080           01071     movwf INDF                      ;Save to QUEUE
0341   1384           01072         bcf FSR, 7                                              ;Goto bank 3
                      01073         MOVLF BUFFERSIZE - 1, cntra             ;Reinitialize counter
0342   303F               M     movlw BUFFERSIZE - 1
0343   00F6               M     movwf cntra
0344   2B45           01074         goto $ + 1
0345   1D70           01075     btfss configLoc1, 2             ;Choose to delay 5 cycles or 13 cycles depending on mode
0346   2B48           01076         goto Sample417kLoopD        ;Delaying  cycles, sample at 417k
0347   2359           01077         call DelaySeven                                 ;Delay 9 cycles
0348                  01078 Sample417kLoopD
0348   0808           01079     movf ADC_DATAPORT, W            ;Sample
0349   1409           01080     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
034A   1009           01081     bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
034B   0080           01082     movwf INDF                      ;Save to QUEUE
034C   0384           01083     decf FSR, F                     ;Increment QUEUE pointer
034D                  01084 StSample417kLoopD
034D   1D70           01085     btfss configLoc1, 2             ;Choose to delay 4 cycles or 12 cycles depending on mode
034E   2B50           01086         goto Sample417kD            ;Delaying 4 cycles, sample at 417k
034F                  01087 Sample250kD
034F   2359           01088         call DelaySeven                                 ;Delay 9 cycles
0350                  01089 Sample417kD
0350   0000           01090     nop
0351   0BF6           01091     decfsz cntra, F                  ;Increment counter, 64 samples?
0352   2B48           01092         goto Sample417kLoopD
0353   0000           01093     nop
0354   0808           01094     movf ADC_DATAPORT, W            ;Last sample
0355   1409           01095     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0356   118A           01096     bcf PCLATH, 3                                       ;insure correct program memory page
0357   120A           01097     bcf PCLATH, 4
0358   2970           01098     goto ADCShutdown
                      01099 
                      01100 ;Delay Seven Cycles, helper to Sample417k250k
0359                  01101 DelaySeven
0359   0000           01102         nop                                                             ;1
035A                  01103 DelaySix
035A   0000           01104         nop
035B                  01105 DelayFive
035B   0000           01106         nop
035C                  01107 DelayFour
035C   2B5D           01108         goto $ + 1                                              ;5
035D                  01109 DelayTwo
035D   0008           01110         return                                                  ;7
                      01111 
                      01112 
                      01113 ;Fast sample XY
                      01114 ;Sampling rate = 250 kHz with 20 MHz clock
035E                  01115 SampleXY250k192k
035E   1009           01116     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
035F   1489           01117     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01118     MOVLF BUFFERMIN, FSR            ;Initialize pointer
0360   3020               M     movlw BUFFERMIN
0361   0084               M     movwf FSR
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 56


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0362   0808           01119     movf ADC_DATAPORT, W            ;Sample X
0363   1409           01120         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0364   1009           01121         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0365   1089           01122     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0366   0080           01123     movwf INDF                      ;Save to QUEUE
0367   0A84           01124     incf FSR, F                     ;Increment QUEUE pointer
                      01125     MOVLF BUFFERSIZE/2-1, cntrc         ;Initialize counter, use cntrc as counter
0368   301F               M     movlw BUFFERSIZE/2-1
0369   00F8               M     movwf cntrc
036A   1C70           01126     btfss configLoc1, 0                 ;Delay 250k or 192k
036B   235B           01127         call DelayFive                   ;192k
036C   235D           01128         call DelayTwo
036D                  01129 SampleXY250kLA
036D   0808           01130     movf ADC_DATAPORT, W            ;Sample Y
036E   1409           01131     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
036F   1009           01132         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0370   1489           01133         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0371   0080           01134     movwf INDF                      ;Save to QUEUE
0372   0A84           01135     incf FSR, F                     ;Increment QUEUE pointer
0373   0808           01136     movf ADC_DATAPORT, W            ;Sample X
0374   1409           01137         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0375   1009           01138         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0376   1089           01139         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0377   0080           01140     movwf INDF                      ;Save to QUEUE
0378   0A84           01141     incf FSR, F                     ;Increment QUEUE pointer
0379   1C70           01142     btfss configLoc1, 0                 ;Delay 250k or 192k
037A   235B           01143         call DelayFive                   ;192k
037B   2B7C           01144     goto $ + 1
037C   0000           01145     nop
037D   0BF8           01146     decfsz cntrc, F                     ;Increment counter, 64 samples?
037E   2B6D           01147         goto SampleXY250kLA
037F   0000           01148     nop
0380   0808           01149     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
0381   1409           01150     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0382   1009           01151         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0383   1489           01152         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0384   0080           01153     movwf INDF                      ;Save to QUEUE
0385   1784           01154         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0386   0808           01155     movf ADC_DATAPORT, W            ;Sample X
0387   1409           01156         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0388   1009           01157         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0389   1089           01158         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
038A   0080           01159     movwf INDF                      ;Save to QUEUE
038B   0384           01160         decf FSR, f                                             ;Increment QUEUE pointer
                      01161     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
038C   301F               M     movlw BUFFERSIZE/2-1
038D   00F8               M     movwf cntrc
038E   1C70           01162     btfss configLoc1, 0                 ;Delay 250k or 192k
038F   235B           01163         call DelayFive                   ;192k
0390   235D           01164         call DelayTwo
0391                  01165 SampleXY250kLB
0391   0808           01166     movf ADC_DATAPORT, W            ;Sample Y
0392   1409           01167     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 57


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0393   1009           01168         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0394   1489           01169         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0395   0080           01170     movwf INDF                      ;Save to QUEUE
0396   0384           01171     decf FSR, F                     ;Increment QUEUE pointer
0397   0808           01172     movf ADC_DATAPORT, W            ;Sample X
0398   1409           01173         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0399   1009           01174         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
039A   1089           01175         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
039B   0080           01176     movwf INDF                      ;Save to QUEUE
039C   0384           01177     decf FSR, F                     ;Increment QUEUE pointer
039D   1C70           01178     btfss configLoc1, 0                 ;Delay 250k or 192k
039E   235B           01179         call DelayFive                   ;192k
039F   2BA0           01180     goto $ + 1
03A0   0000           01181         nop
03A1   0BF8           01182     decfsz cntrc, F                     ;Increment counter, 64 samples?
03A2   2B91           01183         goto SampleXY250kLB
03A3   0000           01184     nop
03A4   0808           01185     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
03A5   1409           01186     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03A6   1009           01187         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03A7   1489           01188         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03A8   0080           01189     movwf INDF                      ;Save to QUEUE
03A9   1783           01190         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
03AA   0808           01191     movf ADC_DATAPORT, W            ;Sample X
03AB   1409           01192         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03AC   1009           01193         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03AD   1089           01194         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03AE   0080           01195     movwf INDF                      ;Save to QUEUE
03AF   0A84           01196         incf FSR, f                                             ;Increment QUEUE pointer
                      01197     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03B0   301F               M     movlw BUFFERSIZE/2-1
03B1   00F8               M     movwf cntrc
03B2   1C70           01198     btfss configLoc1, 0                 ;Delay 250k or 192k
03B3   235B           01199         call DelayFive                   ;192k
03B4   235D           01200         call DelayTwo
03B5                  01201 SampleXY250kLC
03B5   0808           01202     movf ADC_DATAPORT, W            ;Sample Y
03B6   1409           01203     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03B7   1009           01204         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03B8   1489           01205         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03B9   0080           01206     movwf INDF                      ;Save to QUEUE
03BA   0A84           01207     incf FSR, F                     ;Increment QUEUE pointer
03BB   0808           01208     movf ADC_DATAPORT, W            ;Sample X
03BC   1409           01209         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03BD   1009           01210         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03BE   1089           01211         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03BF   0080           01212     movwf INDF                      ;Save to QUEUE
03C0   0A84           01213     incf FSR, F                     ;Increment QUEUE pointer
03C1   1C70           01214     btfss configLoc1, 0                 ;Delay 250k or 192k
03C2   235B           01215         call DelayFive                   ;192k
03C3   2BC4           01216     goto $ + 1
03C4   0000           01217     nop
03C5   0BF8           01218     decfsz cntrc, F                     ;Increment counter, 64 samples?
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 58


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03C6   2BB5           01219         goto SampleXY250kLC
03C7   0000           01220     nop
03C8   0808           01221     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
03C9   1409           01222     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03CA   1009           01223         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03CB   1489           01224         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03CC   0080           01225     movwf INDF                      ;Save to QUEUE
03CD   1384           01226         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
03CE   0808           01227     movf ADC_DATAPORT, W            ;Sample X
03CF   1409           01228         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03D0   1009           01229         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03D1   1089           01230         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03D2   0080           01231     movwf INDF                      ;Save to QUEUE
03D3   0384           01232         decf FSR, f                                             ;Increment QUEUE pointer
                      01233     MOVLF BUFFERSIZE/2-1, cntrc     ;Initialize counter, use cntrc as counter
03D4   301F               M     movlw BUFFERSIZE/2-1
03D5   00F8               M     movwf cntrc
03D6   1C70           01234     btfss configLoc1, 0                 ;Delay 250k or 192k
03D7   235B           01235         call DelayFive                   ;192k
03D8   235D           01236         call DelayTwo
03D9                  01237 SampleXY250kLD
03D9   0808           01238     movf ADC_DATAPORT, W            ;Sample Y
03DA   1409           01239     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03DB   1009           01240         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03DC   1489           01241         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
03DD   0080           01242     movwf INDF                      ;Save to QUEUE
03DE   0384           01243     decf FSR, F                     ;Increment QUEUE pointer
03DF   0808           01244     movf ADC_DATAPORT, W            ;Sample X
03E0   1409           01245     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03E1   1009           01246         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
03E2   1089           01247         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
03E3   0080           01248     movwf INDF                      ;Save to QUEUE
03E4   0384           01249     decf FSR, F                     ;Increment QUEUE pointer
03E5   1C70           01250     btfss configLoc1, 0                 ;Delay 250k or 192k
03E6   235B           01251         call DelayFive                   ;192k
03E7   2BE8           01252     goto $ + 1
03E8   0000           01253         nop
03E9   0BF8           01254         decfsz cntrc, F                 ;Increment counter, 64 samples?
03EA   2BD9           01255         goto SampleXY250kLD
03EB   0000           01256     nop
03EC   0808           01257     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
03ED   1409           01258     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
03EE   118A           01259     bcf PCLATH, 3                                       ;insure correct program memory page
03EF   120A           01260     bcf PCLATH, 4
03F0   2970           01261     goto ADCShutdown
                      01262 
                      01263 ;Fastest sample
                      01264 ;Sampling rate = 1 MHz with 20 MHz clock
                      01265 ;Sampling rate = 200 kHz with 4 MHz clock
                      01266 ;-----------------------------------------------------------------------------
03F1                  01267 Sample1M
03F1   1009           01268     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01269     MOVLF BUFFERMIN, FSR                ;Initialize pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 59


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03F2   3020               M     movlw BUFFERMIN
03F3   0084               M     movwf FSR
03F4   0000           01270         nop
  0000                01271     local count
  00000001            01272     count = 1
                      01273     while count < BUFFERSIZE
03F5   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
03F6   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
03F7   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
03F8   0080           01277         movwf INDF                      ;Save to QUEUE
03F9   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01279         count = count + 1
03FA   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
03FB   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
03FC   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
03FD   0080           01277         movwf INDF                      ;Save to QUEUE
03FE   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01279         count = count + 1
03FF   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0400   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0401   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0402   0080           01277         movwf INDF                      ;Save to QUEUE
0403   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01279         count = count + 1
0404   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0405   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0406   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0407   0080           01277         movwf INDF                      ;Save to QUEUE
0408   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01279         count = count + 1
0409   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
040A   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
040B   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
040C   0080           01277         movwf INDF                      ;Save to QUEUE
040D   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01279         count = count + 1
040E   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
040F   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0410   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0411   0080           01277         movwf INDF                      ;Save to QUEUE
0412   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01279         count = count + 1
0413   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0414   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0415   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0416   0080           01277         movwf INDF                      ;Save to QUEUE
0417   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01279         count = count + 1
0418   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0419   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
041A   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
041B   0080           01277         movwf INDF                      ;Save to QUEUE
041C   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 60


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000009            01279         count = count + 1
041D   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
041E   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
041F   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0420   0080           01277         movwf INDF                      ;Save to QUEUE
0421   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01279         count = count + 1
0422   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0423   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0424   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0425   0080           01277         movwf INDF                      ;Save to QUEUE
0426   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01279         count = count + 1
0427   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0428   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0429   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
042A   0080           01277         movwf INDF                      ;Save to QUEUE
042B   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01279         count = count + 1
042C   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
042D   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
042E   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
042F   0080           01277         movwf INDF                      ;Save to QUEUE
0430   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01279         count = count + 1
0431   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0432   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0433   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0434   0080           01277         movwf INDF                      ;Save to QUEUE
0435   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01279         count = count + 1
0436   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0437   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0438   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0439   0080           01277         movwf INDF                      ;Save to QUEUE
043A   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01279         count = count + 1
043B   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
043C   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
043D   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
043E   0080           01277         movwf INDF                      ;Save to QUEUE
043F   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01279         count = count + 1
0440   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0441   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0442   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0443   0080           01277         movwf INDF                      ;Save to QUEUE
0444   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01279         count = count + 1
0445   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0446   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0447   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0448   0080           01277         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 61


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0449   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01279         count = count + 1
044A   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
044B   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
044C   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
044D   0080           01277         movwf INDF                      ;Save to QUEUE
044E   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01279         count = count + 1
044F   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0450   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0451   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0452   0080           01277         movwf INDF                      ;Save to QUEUE
0453   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01279         count = count + 1
0454   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0455   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0456   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0457   0080           01277         movwf INDF                      ;Save to QUEUE
0458   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01279         count = count + 1
0459   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
045A   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
045B   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
045C   0080           01277         movwf INDF                      ;Save to QUEUE
045D   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01279         count = count + 1
045E   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
045F   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0460   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0461   0080           01277         movwf INDF                      ;Save to QUEUE
0462   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01279         count = count + 1
0463   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0464   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0465   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0466   0080           01277         movwf INDF                      ;Save to QUEUE
0467   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01279         count = count + 1
0468   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0469   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
046A   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
046B   0080           01277         movwf INDF                      ;Save to QUEUE
046C   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01279         count = count + 1
046D   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
046E   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
046F   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0470   0080           01277         movwf INDF                      ;Save to QUEUE
0471   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01279         count = count + 1
0472   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0473   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0474   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 62


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0475   0080           01277         movwf INDF                      ;Save to QUEUE
0476   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01279         count = count + 1
0477   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0478   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0479   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
047A   0080           01277         movwf INDF                      ;Save to QUEUE
047B   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01279         count = count + 1
047C   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
047D   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
047E   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
047F   0080           01277         movwf INDF                      ;Save to QUEUE
0480   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01279         count = count + 1
0481   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0482   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0483   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0484   0080           01277         movwf INDF                      ;Save to QUEUE
0485   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01279         count = count + 1
0486   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0487   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0488   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0489   0080           01277         movwf INDF                      ;Save to QUEUE
048A   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01279         count = count + 1
048B   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
048C   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
048D   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
048E   0080           01277         movwf INDF                      ;Save to QUEUE
048F   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01279         count = count + 1
0490   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0491   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0492   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0493   0080           01277         movwf INDF                      ;Save to QUEUE
0494   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01279         count = count + 1
0495   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0496   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0497   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0498   0080           01277         movwf INDF                      ;Save to QUEUE
0499   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01279         count = count + 1
049A   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
049B   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
049C   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
049D   0080           01277         movwf INDF                      ;Save to QUEUE
049E   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01279         count = count + 1
049F   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A0   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 63


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04A1   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04A2   0080           01277         movwf INDF                      ;Save to QUEUE
04A3   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01279         count = count + 1
04A4   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04A5   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04A6   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04A7   0080           01277         movwf INDF                      ;Save to QUEUE
04A8   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01279         count = count + 1
04A9   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04AA   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04AB   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04AC   0080           01277         movwf INDF                      ;Save to QUEUE
04AD   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01279         count = count + 1
04AE   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04AF   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B0   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04B1   0080           01277         movwf INDF                      ;Save to QUEUE
04B2   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01279         count = count + 1
04B3   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B4   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04B5   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04B6   0080           01277         movwf INDF                      ;Save to QUEUE
04B7   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01279         count = count + 1
04B8   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04B9   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04BA   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04BB   0080           01277         movwf INDF                      ;Save to QUEUE
04BC   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01279         count = count + 1
04BD   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04BE   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04BF   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04C0   0080           01277         movwf INDF                      ;Save to QUEUE
04C1   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01279         count = count + 1
04C2   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C3   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C4   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04C5   0080           01277         movwf INDF                      ;Save to QUEUE
04C6   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01279         count = count + 1
04C7   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04C8   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04C9   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04CA   0080           01277         movwf INDF                      ;Save to QUEUE
04CB   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01279         count = count + 1
04CC   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 64


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04CD   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04CE   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04CF   0080           01277         movwf INDF                      ;Save to QUEUE
04D0   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01279         count = count + 1
04D1   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D2   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D3   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04D4   0080           01277         movwf INDF                      ;Save to QUEUE
04D5   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01279         count = count + 1
04D6   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04D7   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04D8   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04D9   0080           01277         movwf INDF                      ;Save to QUEUE
04DA   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000002F            01279         count = count + 1
04DB   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04DC   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04DD   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04DE   0080           01277         movwf INDF                      ;Save to QUEUE
04DF   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01279         count = count + 1
04E0   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E1   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E2   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04E3   0080           01277         movwf INDF                      ;Save to QUEUE
04E4   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01279         count = count + 1
04E5   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04E6   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04E7   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04E8   0080           01277         movwf INDF                      ;Save to QUEUE
04E9   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01279         count = count + 1
04EA   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04EB   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04EC   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04ED   0080           01277         movwf INDF                      ;Save to QUEUE
04EE   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01279         count = count + 1
04EF   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F0   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04F1   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04F2   0080           01277         movwf INDF                      ;Save to QUEUE
04F3   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01279         count = count + 1
04F4   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04F5   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04F6   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04F7   0080           01277         movwf INDF                      ;Save to QUEUE
04F8   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01279         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 65


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04F9   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04FA   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
04FB   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
04FC   0080           01277         movwf INDF                      ;Save to QUEUE
04FD   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01279         count = count + 1
04FE   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
04FF   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0500   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0501   0080           01277         movwf INDF                      ;Save to QUEUE
0502   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01279         count = count + 1
0503   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0504   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0505   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0506   0080           01277         movwf INDF                      ;Save to QUEUE
0507   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01279         count = count + 1
0508   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0509   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
050A   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
050B   0080           01277         movwf INDF                      ;Save to QUEUE
050C   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000039            01279         count = count + 1
050D   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
050E   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
050F   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0510   0080           01277         movwf INDF                      ;Save to QUEUE
0511   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01279         count = count + 1
0512   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0513   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0514   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0515   0080           01277         movwf INDF                      ;Save to QUEUE
0516   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01279         count = count + 1
0517   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0518   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0519   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
051A   0080           01277         movwf INDF                      ;Save to QUEUE
051B   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01279         count = count + 1
051C   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
051D   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
051E   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
051F   0080           01277         movwf INDF                      ;Save to QUEUE
0520   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01279         count = count + 1
0521   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0522   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0523   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0524   0080           01277         movwf INDF                      ;Save to QUEUE
0525   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 66


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000003E            01279         count = count + 1
0526   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
0527   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
0528   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
0529   0080           01277         movwf INDF                      ;Save to QUEUE
052A   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01279         count = count + 1
052B   1409           01274             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
052C   1009           01275             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
052D   0808           01276         movf ADC_DATAPORT, W            ;Save Sample
052E   0080           01277         movwf INDF                      ;Save to QUEUE
052F   0A84           01278         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01279         count = count + 1
                      01280     endw
0530   1409           01281     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
0531   1009           01282     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
0532   0808           01283     movf ADC_DATAPORT, W
0533   0080           01284     movwf INDF
0534   1784           01285     bsf FSR, 7                                                  ;goto bank 2
  00000001            01286     count = 1
                      01287     while count < BUFFERSIZE
0535   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0536   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0537   0808           01290         movf ADC_DATAPORT, W            ;Sample
0538   0080           01291         movwf INDF                      ;Save to QUEUE
0539   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01293         count = count + 1
053A   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
053B   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
053C   0808           01290         movf ADC_DATAPORT, W            ;Sample
053D   0080           01291         movwf INDF                      ;Save to QUEUE
053E   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01293         count = count + 1
053F   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0540   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0541   0808           01290         movf ADC_DATAPORT, W            ;Sample
0542   0080           01291         movwf INDF                      ;Save to QUEUE
0543   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01293         count = count + 1
0544   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0545   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0546   0808           01290         movf ADC_DATAPORT, W            ;Sample
0547   0080           01291         movwf INDF                      ;Save to QUEUE
0548   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01293         count = count + 1
0549   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
054A   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
054B   0808           01290         movf ADC_DATAPORT, W            ;Sample
054C   0080           01291         movwf INDF                      ;Save to QUEUE
054D   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01293         count = count + 1
054E   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
054F   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 67


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0550   0808           01290         movf ADC_DATAPORT, W            ;Sample
0551   0080           01291         movwf INDF                      ;Save to QUEUE
0552   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01293         count = count + 1
0553   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0554   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0555   0808           01290         movf ADC_DATAPORT, W            ;Sample
0556   0080           01291         movwf INDF                      ;Save to QUEUE
0557   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01293         count = count + 1
0558   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0559   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
055A   0808           01290         movf ADC_DATAPORT, W            ;Sample
055B   0080           01291         movwf INDF                      ;Save to QUEUE
055C   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01293         count = count + 1
055D   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
055E   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
055F   0808           01290         movf ADC_DATAPORT, W            ;Sample
0560   0080           01291         movwf INDF                      ;Save to QUEUE
0561   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01293         count = count + 1
0562   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0563   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0564   0808           01290         movf ADC_DATAPORT, W            ;Sample
0565   0080           01291         movwf INDF                      ;Save to QUEUE
0566   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01293         count = count + 1
0567   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0568   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0569   0808           01290         movf ADC_DATAPORT, W            ;Sample
056A   0080           01291         movwf INDF                      ;Save to QUEUE
056B   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01293         count = count + 1
056C   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
056D   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
056E   0808           01290         movf ADC_DATAPORT, W            ;Sample
056F   0080           01291         movwf INDF                      ;Save to QUEUE
0570   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01293         count = count + 1
0571   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0572   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0573   0808           01290         movf ADC_DATAPORT, W            ;Sample
0574   0080           01291         movwf INDF                      ;Save to QUEUE
0575   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01293         count = count + 1
0576   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0577   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0578   0808           01290         movf ADC_DATAPORT, W            ;Sample
0579   0080           01291         movwf INDF                      ;Save to QUEUE
057A   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01293         count = count + 1
057B   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 68


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

057C   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
057D   0808           01290         movf ADC_DATAPORT, W            ;Sample
057E   0080           01291         movwf INDF                      ;Save to QUEUE
057F   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01293         count = count + 1
0580   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0581   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0582   0808           01290         movf ADC_DATAPORT, W            ;Sample
0583   0080           01291         movwf INDF                      ;Save to QUEUE
0584   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01293         count = count + 1
0585   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0586   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0587   0808           01290         movf ADC_DATAPORT, W            ;Sample
0588   0080           01291         movwf INDF                      ;Save to QUEUE
0589   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01293         count = count + 1
058A   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
058B   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
058C   0808           01290         movf ADC_DATAPORT, W            ;Sample
058D   0080           01291         movwf INDF                      ;Save to QUEUE
058E   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01293         count = count + 1
058F   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0590   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0591   0808           01290         movf ADC_DATAPORT, W            ;Sample
0592   0080           01291         movwf INDF                      ;Save to QUEUE
0593   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01293         count = count + 1
0594   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0595   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0596   0808           01290         movf ADC_DATAPORT, W            ;Sample
0597   0080           01291         movwf INDF                      ;Save to QUEUE
0598   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01293         count = count + 1
0599   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
059A   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
059B   0808           01290         movf ADC_DATAPORT, W            ;Sample
059C   0080           01291         movwf INDF                      ;Save to QUEUE
059D   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01293         count = count + 1
059E   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
059F   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05A0   0808           01290         movf ADC_DATAPORT, W            ;Sample
05A1   0080           01291         movwf INDF                      ;Save to QUEUE
05A2   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01293         count = count + 1
05A3   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05A4   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05A5   0808           01290         movf ADC_DATAPORT, W            ;Sample
05A6   0080           01291         movwf INDF                      ;Save to QUEUE
05A7   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01293         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 69


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05A8   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05A9   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05AA   0808           01290         movf ADC_DATAPORT, W            ;Sample
05AB   0080           01291         movwf INDF                      ;Save to QUEUE
05AC   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01293         count = count + 1
05AD   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05AE   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05AF   0808           01290         movf ADC_DATAPORT, W            ;Sample
05B0   0080           01291         movwf INDF                      ;Save to QUEUE
05B1   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01293         count = count + 1
05B2   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05B3   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05B4   0808           01290         movf ADC_DATAPORT, W            ;Sample
05B5   0080           01291         movwf INDF                      ;Save to QUEUE
05B6   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01293         count = count + 1
05B7   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05B8   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05B9   0808           01290         movf ADC_DATAPORT, W            ;Sample
05BA   0080           01291         movwf INDF                      ;Save to QUEUE
05BB   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01293         count = count + 1
05BC   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05BD   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05BE   0808           01290         movf ADC_DATAPORT, W            ;Sample
05BF   0080           01291         movwf INDF                      ;Save to QUEUE
05C0   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01293         count = count + 1
05C1   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05C2   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05C3   0808           01290         movf ADC_DATAPORT, W            ;Sample
05C4   0080           01291         movwf INDF                      ;Save to QUEUE
05C5   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01293         count = count + 1
05C6   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05C7   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05C8   0808           01290         movf ADC_DATAPORT, W            ;Sample
05C9   0080           01291         movwf INDF                      ;Save to QUEUE
05CA   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01293         count = count + 1
05CB   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05CC   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05CD   0808           01290         movf ADC_DATAPORT, W            ;Sample
05CE   0080           01291         movwf INDF                      ;Save to QUEUE
05CF   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01293         count = count + 1
05D0   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D1   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D2   0808           01290         movf ADC_DATAPORT, W            ;Sample
05D3   0080           01291         movwf INDF                      ;Save to QUEUE
05D4   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 70


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000021            01293         count = count + 1
05D5   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05D6   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05D7   0808           01290         movf ADC_DATAPORT, W            ;Sample
05D8   0080           01291         movwf INDF                      ;Save to QUEUE
05D9   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01293         count = count + 1
05DA   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05DB   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05DC   0808           01290         movf ADC_DATAPORT, W            ;Sample
05DD   0080           01291         movwf INDF                      ;Save to QUEUE
05DE   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01293         count = count + 1
05DF   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E0   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E1   0808           01290         movf ADC_DATAPORT, W            ;Sample
05E2   0080           01291         movwf INDF                      ;Save to QUEUE
05E3   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01293         count = count + 1
05E4   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05E5   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05E6   0808           01290         movf ADC_DATAPORT, W            ;Sample
05E7   0080           01291         movwf INDF                      ;Save to QUEUE
05E8   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01293         count = count + 1
05E9   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05EA   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05EB   0808           01290         movf ADC_DATAPORT, W            ;Sample
05EC   0080           01291         movwf INDF                      ;Save to QUEUE
05ED   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01293         count = count + 1
05EE   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05EF   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F0   0808           01290         movf ADC_DATAPORT, W            ;Sample
05F1   0080           01291         movwf INDF                      ;Save to QUEUE
05F2   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01293         count = count + 1
05F3   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F4   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05F5   0808           01290         movf ADC_DATAPORT, W            ;Sample
05F6   0080           01291         movwf INDF                      ;Save to QUEUE
05F7   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01293         count = count + 1
05F8   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05F9   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05FA   0808           01290         movf ADC_DATAPORT, W            ;Sample
05FB   0080           01291         movwf INDF                      ;Save to QUEUE
05FC   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01293         count = count + 1
05FD   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
05FE   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
05FF   0808           01290         movf ADC_DATAPORT, W            ;Sample
0600   0080           01291         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 71


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0601   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01293         count = count + 1
0602   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0603   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0604   0808           01290         movf ADC_DATAPORT, W            ;Sample
0605   0080           01291         movwf INDF                      ;Save to QUEUE
0606   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01293         count = count + 1
0607   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0608   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0609   0808           01290         movf ADC_DATAPORT, W            ;Sample
060A   0080           01291         movwf INDF                      ;Save to QUEUE
060B   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01293         count = count + 1
060C   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
060D   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
060E   0808           01290         movf ADC_DATAPORT, W            ;Sample
060F   0080           01291         movwf INDF                      ;Save to QUEUE
0610   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01293         count = count + 1
0611   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0612   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0613   0808           01290         movf ADC_DATAPORT, W            ;Sample
0614   0080           01291         movwf INDF                      ;Save to QUEUE
0615   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01293         count = count + 1
0616   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0617   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0618   0808           01290         movf ADC_DATAPORT, W            ;Sample
0619   0080           01291         movwf INDF                      ;Save to QUEUE
061A   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01293         count = count + 1
061B   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
061C   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
061D   0808           01290         movf ADC_DATAPORT, W            ;Sample
061E   0080           01291         movwf INDF                      ;Save to QUEUE
061F   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01293         count = count + 1
0620   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0621   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0622   0808           01290         movf ADC_DATAPORT, W            ;Sample
0623   0080           01291         movwf INDF                      ;Save to QUEUE
0624   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01293         count = count + 1
0625   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0626   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0627   0808           01290         movf ADC_DATAPORT, W            ;Sample
0628   0080           01291         movwf INDF                      ;Save to QUEUE
0629   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01293         count = count + 1
062A   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
062B   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
062C   0808           01290         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 72


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

062D   0080           01291         movwf INDF                      ;Save to QUEUE
062E   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01293         count = count + 1
062F   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0630   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0631   0808           01290         movf ADC_DATAPORT, W            ;Sample
0632   0080           01291         movwf INDF                      ;Save to QUEUE
0633   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01293         count = count + 1
0634   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0635   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0636   0808           01290         movf ADC_DATAPORT, W            ;Sample
0637   0080           01291         movwf INDF                      ;Save to QUEUE
0638   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01293         count = count + 1
0639   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
063A   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
063B   0808           01290         movf ADC_DATAPORT, W            ;Sample
063C   0080           01291         movwf INDF                      ;Save to QUEUE
063D   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000036            01293         count = count + 1
063E   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
063F   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0640   0808           01290         movf ADC_DATAPORT, W            ;Sample
0641   0080           01291         movwf INDF                      ;Save to QUEUE
0642   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01293         count = count + 1
0643   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0644   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0645   0808           01290         movf ADC_DATAPORT, W            ;Sample
0646   0080           01291         movwf INDF                      ;Save to QUEUE
0647   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01293         count = count + 1
0648   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0649   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
064A   0808           01290         movf ADC_DATAPORT, W            ;Sample
064B   0080           01291         movwf INDF                      ;Save to QUEUE
064C   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01293         count = count + 1
064D   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
064E   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
064F   0808           01290         movf ADC_DATAPORT, W            ;Sample
0650   0080           01291         movwf INDF                      ;Save to QUEUE
0651   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01293         count = count + 1
0652   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0653   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0654   0808           01290         movf ADC_DATAPORT, W            ;Sample
0655   0080           01291         movwf INDF                      ;Save to QUEUE
0656   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01293         count = count + 1
0657   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0658   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 73


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0659   0808           01290         movf ADC_DATAPORT, W            ;Sample
065A   0080           01291         movwf INDF                      ;Save to QUEUE
065B   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01293         count = count + 1
065C   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
065D   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
065E   0808           01290         movf ADC_DATAPORT, W            ;Sample
065F   0080           01291         movwf INDF                      ;Save to QUEUE
0660   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01293         count = count + 1
0661   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0662   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0663   0808           01290         movf ADC_DATAPORT, W            ;Sample
0664   0080           01291         movwf INDF                      ;Save to QUEUE
0665   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01293         count = count + 1
0666   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0667   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0668   0808           01290         movf ADC_DATAPORT, W            ;Sample
0669   0080           01291         movwf INDF                      ;Save to QUEUE
066A   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01293         count = count + 1
066B   1409           01288         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
066C   1009           01289         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
066D   0808           01290         movf ADC_DATAPORT, W            ;Sample
066E   0080           01291         movwf INDF                      ;Save to QUEUE
066F   0384           01292         decf FSR, F                     ;Increment QUEUE pointer
  00000040            01293         count = count + 1
                      01294         endw
0670   1409           01295     bsf ADC_CONTROLPORT, RDD
0671   1009           01296     bcf ADC_CONTROLPORT, RDD
0672   0808           01297     movf ADC_DATAPORT, W
0673   0080           01298     movwf INDF
0674   1783           01299     bsf STATUS, IRP                                             ;goto bank 4
  00000001            01300     count = 1
                      01301     while count < BUFFERSIZE
0675   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0676   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0677   0808           01304         movf ADC_DATAPORT, W            ;Sample
0678   0080           01305         movwf INDF                      ;Save to QUEUE
0679   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01307         count = count + 1
067A   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
067B   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
067C   0808           01304         movf ADC_DATAPORT, W            ;Sample
067D   0080           01305         movwf INDF                      ;Save to QUEUE
067E   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01307         count = count + 1
067F   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0680   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0681   0808           01304         movf ADC_DATAPORT, W            ;Sample
0682   0080           01305         movwf INDF                      ;Save to QUEUE
0683   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 74


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01307         count = count + 1
0684   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0685   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0686   0808           01304         movf ADC_DATAPORT, W            ;Sample
0687   0080           01305         movwf INDF                      ;Save to QUEUE
0688   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01307         count = count + 1
0689   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
068A   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
068B   0808           01304         movf ADC_DATAPORT, W            ;Sample
068C   0080           01305         movwf INDF                      ;Save to QUEUE
068D   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01307         count = count + 1
068E   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
068F   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0690   0808           01304         movf ADC_DATAPORT, W            ;Sample
0691   0080           01305         movwf INDF                      ;Save to QUEUE
0692   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01307         count = count + 1
0693   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0694   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0695   0808           01304         movf ADC_DATAPORT, W            ;Sample
0696   0080           01305         movwf INDF                      ;Save to QUEUE
0697   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01307         count = count + 1
0698   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0699   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
069A   0808           01304         movf ADC_DATAPORT, W            ;Sample
069B   0080           01305         movwf INDF                      ;Save to QUEUE
069C   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01307         count = count + 1
069D   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
069E   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
069F   0808           01304         movf ADC_DATAPORT, W            ;Sample
06A0   0080           01305         movwf INDF                      ;Save to QUEUE
06A1   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01307         count = count + 1
06A2   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A3   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06A4   0808           01304         movf ADC_DATAPORT, W            ;Sample
06A5   0080           01305         movwf INDF                      ;Save to QUEUE
06A6   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01307         count = count + 1
06A7   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06A8   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06A9   0808           01304         movf ADC_DATAPORT, W            ;Sample
06AA   0080           01305         movwf INDF                      ;Save to QUEUE
06AB   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01307         count = count + 1
06AC   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06AD   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06AE   0808           01304         movf ADC_DATAPORT, W            ;Sample
06AF   0080           01305         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 75


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06B0   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01307         count = count + 1
06B1   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B2   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B3   0808           01304         movf ADC_DATAPORT, W            ;Sample
06B4   0080           01305         movwf INDF                      ;Save to QUEUE
06B5   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01307         count = count + 1
06B6   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06B7   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06B8   0808           01304         movf ADC_DATAPORT, W            ;Sample
06B9   0080           01305         movwf INDF                      ;Save to QUEUE
06BA   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01307         count = count + 1
06BB   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06BC   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06BD   0808           01304         movf ADC_DATAPORT, W            ;Sample
06BE   0080           01305         movwf INDF                      ;Save to QUEUE
06BF   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01307         count = count + 1
06C0   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C1   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C2   0808           01304         movf ADC_DATAPORT, W            ;Sample
06C3   0080           01305         movwf INDF                      ;Save to QUEUE
06C4   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01307         count = count + 1
06C5   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06C6   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06C7   0808           01304         movf ADC_DATAPORT, W            ;Sample
06C8   0080           01305         movwf INDF                      ;Save to QUEUE
06C9   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01307         count = count + 1
06CA   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06CB   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06CC   0808           01304         movf ADC_DATAPORT, W            ;Sample
06CD   0080           01305         movwf INDF                      ;Save to QUEUE
06CE   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01307         count = count + 1
06CF   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D0   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D1   0808           01304         movf ADC_DATAPORT, W            ;Sample
06D2   0080           01305         movwf INDF                      ;Save to QUEUE
06D3   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01307         count = count + 1
06D4   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06D5   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06D6   0808           01304         movf ADC_DATAPORT, W            ;Sample
06D7   0080           01305         movwf INDF                      ;Save to QUEUE
06D8   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01307         count = count + 1
06D9   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06DA   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06DB   0808           01304         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 76


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

06DC   0080           01305         movwf INDF                      ;Save to QUEUE
06DD   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01307         count = count + 1
06DE   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06DF   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E0   0808           01304         movf ADC_DATAPORT, W            ;Sample
06E1   0080           01305         movwf INDF                      ;Save to QUEUE
06E2   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01307         count = count + 1
06E3   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E4   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06E5   0808           01304         movf ADC_DATAPORT, W            ;Sample
06E6   0080           01305         movwf INDF                      ;Save to QUEUE
06E7   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01307         count = count + 1
06E8   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06E9   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06EA   0808           01304         movf ADC_DATAPORT, W            ;Sample
06EB   0080           01305         movwf INDF                      ;Save to QUEUE
06EC   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01307         count = count + 1
06ED   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06EE   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06EF   0808           01304         movf ADC_DATAPORT, W            ;Sample
06F0   0080           01305         movwf INDF                      ;Save to QUEUE
06F1   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01307         count = count + 1
06F2   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F3   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F4   0808           01304         movf ADC_DATAPORT, W            ;Sample
06F5   0080           01305         movwf INDF                      ;Save to QUEUE
06F6   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01307         count = count + 1
06F7   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06F8   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06F9   0808           01304         movf ADC_DATAPORT, W            ;Sample
06FA   0080           01305         movwf INDF                      ;Save to QUEUE
06FB   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01307         count = count + 1
06FC   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
06FD   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
06FE   0808           01304         movf ADC_DATAPORT, W            ;Sample
06FF   0080           01305         movwf INDF                      ;Save to QUEUE
0700   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01307         count = count + 1
0701   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0702   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0703   0808           01304         movf ADC_DATAPORT, W            ;Sample
0704   0080           01305         movwf INDF                      ;Save to QUEUE
0705   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01307         count = count + 1
0706   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0707   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 77


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0708   0808           01304         movf ADC_DATAPORT, W            ;Sample
0709   0080           01305         movwf INDF                      ;Save to QUEUE
070A   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01307         count = count + 1
070B   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
070C   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
070D   0808           01304         movf ADC_DATAPORT, W            ;Sample
070E   0080           01305         movwf INDF                      ;Save to QUEUE
070F   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01307         count = count + 1
0710   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0711   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0712   0808           01304         movf ADC_DATAPORT, W            ;Sample
0713   0080           01305         movwf INDF                      ;Save to QUEUE
0714   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01307         count = count + 1
0715   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0716   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0717   0808           01304         movf ADC_DATAPORT, W            ;Sample
0718   0080           01305         movwf INDF                      ;Save to QUEUE
0719   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01307         count = count + 1
071A   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
071B   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
071C   0808           01304         movf ADC_DATAPORT, W            ;Sample
071D   0080           01305         movwf INDF                      ;Save to QUEUE
071E   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01307         count = count + 1
071F   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0720   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0721   0808           01304         movf ADC_DATAPORT, W            ;Sample
0722   0080           01305         movwf INDF                      ;Save to QUEUE
0723   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01307         count = count + 1
0724   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0725   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0726   0808           01304         movf ADC_DATAPORT, W            ;Sample
0727   0080           01305         movwf INDF                      ;Save to QUEUE
0728   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01307         count = count + 1
0729   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
072A   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
072B   0808           01304         movf ADC_DATAPORT, W            ;Sample
072C   0080           01305         movwf INDF                      ;Save to QUEUE
072D   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01307         count = count + 1
072E   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
072F   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0730   0808           01304         movf ADC_DATAPORT, W            ;Sample
0731   0080           01305         movwf INDF                      ;Save to QUEUE
0732   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01307         count = count + 1
0733   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 78


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0734   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0735   0808           01304         movf ADC_DATAPORT, W            ;Sample
0736   0080           01305         movwf INDF                      ;Save to QUEUE
0737   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01307         count = count + 1
0738   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0739   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
073A   0808           01304         movf ADC_DATAPORT, W            ;Sample
073B   0080           01305         movwf INDF                      ;Save to QUEUE
073C   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01307         count = count + 1
073D   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
073E   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
073F   0808           01304         movf ADC_DATAPORT, W            ;Sample
0740   0080           01305         movwf INDF                      ;Save to QUEUE
0741   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01307         count = count + 1
0742   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0743   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0744   0808           01304         movf ADC_DATAPORT, W            ;Sample
0745   0080           01305         movwf INDF                      ;Save to QUEUE
0746   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01307         count = count + 1
0747   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0748   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0749   0808           01304         movf ADC_DATAPORT, W            ;Sample
074A   0080           01305         movwf INDF                      ;Save to QUEUE
074B   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01307         count = count + 1
074C   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
074D   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
074E   0808           01304         movf ADC_DATAPORT, W            ;Sample
074F   0080           01305         movwf INDF                      ;Save to QUEUE
0750   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01307         count = count + 1
0751   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0752   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0753   0808           01304         movf ADC_DATAPORT, W            ;Sample
0754   0080           01305         movwf INDF                      ;Save to QUEUE
0755   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01307         count = count + 1
0756   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0757   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0758   0808           01304         movf ADC_DATAPORT, W            ;Sample
0759   0080           01305         movwf INDF                      ;Save to QUEUE
075A   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000002F            01307         count = count + 1
075B   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
075C   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
075D   0808           01304         movf ADC_DATAPORT, W            ;Sample
075E   0080           01305         movwf INDF                      ;Save to QUEUE
075F   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01307         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 79


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0760   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0761   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0762   0808           01304         movf ADC_DATAPORT, W            ;Sample
0763   0080           01305         movwf INDF                      ;Save to QUEUE
0764   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01307         count = count + 1
0765   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0766   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0767   0808           01304         movf ADC_DATAPORT, W            ;Sample
0768   0080           01305         movwf INDF                      ;Save to QUEUE
0769   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01307         count = count + 1
076A   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
076B   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
076C   0808           01304         movf ADC_DATAPORT, W            ;Sample
076D   0080           01305         movwf INDF                      ;Save to QUEUE
076E   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01307         count = count + 1
076F   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0770   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0771   0808           01304         movf ADC_DATAPORT, W            ;Sample
0772   0080           01305         movwf INDF                      ;Save to QUEUE
0773   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01307         count = count + 1
0774   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0775   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0776   0808           01304         movf ADC_DATAPORT, W            ;Sample
0777   0080           01305         movwf INDF                      ;Save to QUEUE
0778   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000035            01307         count = count + 1
0779   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
077A   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
077B   0808           01304         movf ADC_DATAPORT, W            ;Sample
077C   0080           01305         movwf INDF                      ;Save to QUEUE
077D   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000036            01307         count = count + 1
077E   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
077F   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0780   0808           01304         movf ADC_DATAPORT, W            ;Sample
0781   0080           01305         movwf INDF                      ;Save to QUEUE
0782   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000037            01307         count = count + 1
0783   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0784   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0785   0808           01304         movf ADC_DATAPORT, W            ;Sample
0786   0080           01305         movwf INDF                      ;Save to QUEUE
0787   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000038            01307         count = count + 1
0788   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0789   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
078A   0808           01304         movf ADC_DATAPORT, W            ;Sample
078B   0080           01305         movwf INDF                      ;Save to QUEUE
078C   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 80


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000039            01307         count = count + 1
078D   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
078E   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
078F   0808           01304         movf ADC_DATAPORT, W            ;Sample
0790   0080           01305         movwf INDF                      ;Save to QUEUE
0791   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003A            01307         count = count + 1
0792   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0793   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0794   0808           01304         movf ADC_DATAPORT, W            ;Sample
0795   0080           01305         movwf INDF                      ;Save to QUEUE
0796   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003B            01307         count = count + 1
0797   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0798   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0799   0808           01304         movf ADC_DATAPORT, W            ;Sample
079A   0080           01305         movwf INDF                      ;Save to QUEUE
079B   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003C            01307         count = count + 1
079C   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
079D   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
079E   0808           01304         movf ADC_DATAPORT, W            ;Sample
079F   0080           01305         movwf INDF                      ;Save to QUEUE
07A0   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003D            01307         count = count + 1
07A1   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A2   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A3   0808           01304         movf ADC_DATAPORT, W            ;Sample
07A4   0080           01305         movwf INDF                      ;Save to QUEUE
07A5   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003E            01307         count = count + 1
07A6   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07A7   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07A8   0808           01304         movf ADC_DATAPORT, W            ;Sample
07A9   0080           01305         movwf INDF                      ;Save to QUEUE
07AA   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  0000003F            01307         count = count + 1
07AB   1409           01302         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07AC   1009           01303         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07AD   0808           01304         movf ADC_DATAPORT, W            ;Sample
07AE   0080           01305         movwf INDF                      ;Save to QUEUE
07AF   0A84           01306         incf FSR, F                     ;Increment QUEUE pointer
  00000040            01307         count = count + 1
                      01308         endw
07B0   1409           01309     bsf ADC_CONTROLPORT, RDD
07B1   1009           01310     bcf ADC_CONTROLPORT, RDD
07B2   0808           01311     movf ADC_DATAPORT, W            ;Sample
07B3   0080           01312     movwf INDF
07B4   1384           01313     bcf FSR, 7                                                  ;goto bank 3
  00000001            01314     count = 1
                      01315     while count < D'14'
07B5   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07B6   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 81


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07B7   0808           01318             movf ADC_DATAPORT, W
07B8   0080           01319         movwf INDF                      ;Save to QUEUE
07B9   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01321         count = count + 1
07BA   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07BB   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07BC   0808           01318             movf ADC_DATAPORT, W
07BD   0080           01319         movwf INDF                      ;Save to QUEUE
07BE   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01321         count = count + 1
07BF   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C0   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C1   0808           01318             movf ADC_DATAPORT, W
07C2   0080           01319         movwf INDF                      ;Save to QUEUE
07C3   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01321         count = count + 1
07C4   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07C5   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07C6   0808           01318             movf ADC_DATAPORT, W
07C7   0080           01319         movwf INDF                      ;Save to QUEUE
07C8   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01321         count = count + 1
07C9   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07CA   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07CB   0808           01318             movf ADC_DATAPORT, W
07CC   0080           01319         movwf INDF                      ;Save to QUEUE
07CD   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01321         count = count + 1
07CE   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07CF   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07D0   0808           01318             movf ADC_DATAPORT, W
07D1   0080           01319         movwf INDF                      ;Save to QUEUE
07D2   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01321         count = count + 1
07D3   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D4   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07D5   0808           01318             movf ADC_DATAPORT, W
07D6   0080           01319         movwf INDF                      ;Save to QUEUE
07D7   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01321         count = count + 1
07D8   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07D9   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07DA   0808           01318             movf ADC_DATAPORT, W
07DB   0080           01319         movwf INDF                      ;Save to QUEUE
07DC   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01321         count = count + 1
07DD   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07DE   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07DF   0808           01318             movf ADC_DATAPORT, W
07E0   0080           01319         movwf INDF                      ;Save to QUEUE
07E1   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01321         count = count + 1
07E2   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 82


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

07E3   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E4   0808           01318             movf ADC_DATAPORT, W
07E5   0080           01319         movwf INDF                      ;Save to QUEUE
07E6   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01321         count = count + 1
07E7   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07E8   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07E9   0808           01318             movf ADC_DATAPORT, W
07EA   0080           01319         movwf INDF                      ;Save to QUEUE
07EB   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01321         count = count + 1
07EC   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07ED   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07EE   0808           01318             movf ADC_DATAPORT, W
07EF   0080           01319         movwf INDF                      ;Save to QUEUE
07F0   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01321         count = count + 1
07F1   1409           01316         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F2   1009           01317         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F3   0808           01318             movf ADC_DATAPORT, W
07F4   0080           01319         movwf INDF                      ;Save to QUEUE
07F5   0384           01320         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01321         count = count + 1
                      01322         endw
07F6                  01323 Sample1MhzEnd
                      01324     while count < BUFFERSIZE
07F6   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07F7   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07F8   0808           01327             movf ADC_DATAPORT, W
07F9   0080           01328         movwf INDF                      ;Save to QUEUE
07FA   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01330         count = count + 1
07FB   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
07FC   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
07FD   0808           01327             movf ADC_DATAPORT, W
07FE   0080           01328         movwf INDF                      ;Save to QUEUE
07FF   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01330         count = count + 1
0800   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0801   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0802   0808           01327             movf ADC_DATAPORT, W
0803   0080           01328         movwf INDF                      ;Save to QUEUE
0804   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01330         count = count + 1
0805   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0806   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0807   0808           01327             movf ADC_DATAPORT, W
0808   0080           01328         movwf INDF                      ;Save to QUEUE
0809   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01330         count = count + 1
080A   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
080B   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
080C   0808           01327             movf ADC_DATAPORT, W
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 83


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

080D   0080           01328         movwf INDF                      ;Save to QUEUE
080E   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01330         count = count + 1
080F   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0810   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0811   0808           01327             movf ADC_DATAPORT, W
0812   0080           01328         movwf INDF                      ;Save to QUEUE
0813   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01330         count = count + 1
0814   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0815   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0816   0808           01327             movf ADC_DATAPORT, W
0817   0080           01328         movwf INDF                      ;Save to QUEUE
0818   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01330         count = count + 1
0819   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
081A   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
081B   0808           01327             movf ADC_DATAPORT, W
081C   0080           01328         movwf INDF                      ;Save to QUEUE
081D   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01330         count = count + 1
081E   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
081F   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0820   0808           01327             movf ADC_DATAPORT, W
0821   0080           01328         movwf INDF                      ;Save to QUEUE
0822   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01330         count = count + 1
0823   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0824   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0825   0808           01327             movf ADC_DATAPORT, W
0826   0080           01328         movwf INDF                      ;Save to QUEUE
0827   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01330         count = count + 1
0828   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0829   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
082A   0808           01327             movf ADC_DATAPORT, W
082B   0080           01328         movwf INDF                      ;Save to QUEUE
082C   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01330         count = count + 1
082D   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
082E   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
082F   0808           01327             movf ADC_DATAPORT, W
0830   0080           01328         movwf INDF                      ;Save to QUEUE
0831   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01330         count = count + 1
0832   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0833   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0834   0808           01327             movf ADC_DATAPORT, W
0835   0080           01328         movwf INDF                      ;Save to QUEUE
0836   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01330         count = count + 1
0837   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0838   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 84


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0839   0808           01327             movf ADC_DATAPORT, W
083A   0080           01328         movwf INDF                      ;Save to QUEUE
083B   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01330         count = count + 1
083C   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
083D   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
083E   0808           01327             movf ADC_DATAPORT, W
083F   0080           01328         movwf INDF                      ;Save to QUEUE
0840   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01330         count = count + 1
0841   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0842   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0843   0808           01327             movf ADC_DATAPORT, W
0844   0080           01328         movwf INDF                      ;Save to QUEUE
0845   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01330         count = count + 1
0846   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0847   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0848   0808           01327             movf ADC_DATAPORT, W
0849   0080           01328         movwf INDF                      ;Save to QUEUE
084A   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01330         count = count + 1
084B   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
084C   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
084D   0808           01327             movf ADC_DATAPORT, W
084E   0080           01328         movwf INDF                      ;Save to QUEUE
084F   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01330         count = count + 1
0850   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0851   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0852   0808           01327             movf ADC_DATAPORT, W
0853   0080           01328         movwf INDF                      ;Save to QUEUE
0854   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01330         count = count + 1
0855   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0856   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0857   0808           01327             movf ADC_DATAPORT, W
0858   0080           01328         movwf INDF                      ;Save to QUEUE
0859   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01330         count = count + 1
085A   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
085B   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
085C   0808           01327             movf ADC_DATAPORT, W
085D   0080           01328         movwf INDF                      ;Save to QUEUE
085E   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01330         count = count + 1
085F   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0860   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0861   0808           01327             movf ADC_DATAPORT, W
0862   0080           01328         movwf INDF                      ;Save to QUEUE
0863   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01330         count = count + 1
0864   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 85


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0865   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0866   0808           01327             movf ADC_DATAPORT, W
0867   0080           01328         movwf INDF                      ;Save to QUEUE
0868   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01330         count = count + 1
0869   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
086A   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
086B   0808           01327             movf ADC_DATAPORT, W
086C   0080           01328         movwf INDF                      ;Save to QUEUE
086D   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01330         count = count + 1
086E   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
086F   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0870   0808           01327             movf ADC_DATAPORT, W
0871   0080           01328         movwf INDF                      ;Save to QUEUE
0872   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01330         count = count + 1
0873   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0874   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0875   0808           01327             movf ADC_DATAPORT, W
0876   0080           01328         movwf INDF                      ;Save to QUEUE
0877   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000028            01330         count = count + 1
0878   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0879   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
087A   0808           01327             movf ADC_DATAPORT, W
087B   0080           01328         movwf INDF                      ;Save to QUEUE
087C   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000029            01330         count = count + 1
087D   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
087E   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
087F   0808           01327             movf ADC_DATAPORT, W
0880   0080           01328         movwf INDF                      ;Save to QUEUE
0881   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002A            01330         count = count + 1
0882   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0883   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0884   0808           01327             movf ADC_DATAPORT, W
0885   0080           01328         movwf INDF                      ;Save to QUEUE
0886   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002B            01330         count = count + 1
0887   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0888   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0889   0808           01327             movf ADC_DATAPORT, W
088A   0080           01328         movwf INDF                      ;Save to QUEUE
088B   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002C            01330         count = count + 1
088C   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
088D   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
088E   0808           01327             movf ADC_DATAPORT, W
088F   0080           01328         movwf INDF                      ;Save to QUEUE
0890   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002D            01330         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 86


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0891   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0892   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0893   0808           01327             movf ADC_DATAPORT, W
0894   0080           01328         movwf INDF                      ;Save to QUEUE
0895   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002E            01330         count = count + 1
0896   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0897   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0898   0808           01327             movf ADC_DATAPORT, W
0899   0080           01328         movwf INDF                      ;Save to QUEUE
089A   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000002F            01330         count = count + 1
089B   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
089C   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
089D   0808           01327             movf ADC_DATAPORT, W
089E   0080           01328         movwf INDF                      ;Save to QUEUE
089F   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000030            01330         count = count + 1
08A0   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A1   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A2   0808           01327             movf ADC_DATAPORT, W
08A3   0080           01328         movwf INDF                      ;Save to QUEUE
08A4   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000031            01330         count = count + 1
08A5   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08A6   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08A7   0808           01327             movf ADC_DATAPORT, W
08A8   0080           01328         movwf INDF                      ;Save to QUEUE
08A9   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000032            01330         count = count + 1
08AA   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08AB   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08AC   0808           01327             movf ADC_DATAPORT, W
08AD   0080           01328         movwf INDF                      ;Save to QUEUE
08AE   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000033            01330         count = count + 1
08AF   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B0   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B1   0808           01327             movf ADC_DATAPORT, W
08B2   0080           01328         movwf INDF                      ;Save to QUEUE
08B3   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000034            01330         count = count + 1
08B4   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08B5   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08B6   0808           01327             movf ADC_DATAPORT, W
08B7   0080           01328         movwf INDF                      ;Save to QUEUE
08B8   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000035            01330         count = count + 1
08B9   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08BA   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08BB   0808           01327             movf ADC_DATAPORT, W
08BC   0080           01328         movwf INDF                      ;Save to QUEUE
08BD   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 87


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000036            01330         count = count + 1
08BE   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08BF   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C0   0808           01327             movf ADC_DATAPORT, W
08C1   0080           01328         movwf INDF                      ;Save to QUEUE
08C2   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000037            01330         count = count + 1
08C3   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C4   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08C5   0808           01327             movf ADC_DATAPORT, W
08C6   0080           01328         movwf INDF                      ;Save to QUEUE
08C7   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000038            01330         count = count + 1
08C8   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08C9   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08CA   0808           01327             movf ADC_DATAPORT, W
08CB   0080           01328         movwf INDF                      ;Save to QUEUE
08CC   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000039            01330         count = count + 1
08CD   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08CE   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08CF   0808           01327             movf ADC_DATAPORT, W
08D0   0080           01328         movwf INDF                      ;Save to QUEUE
08D1   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003A            01330         count = count + 1
08D2   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D3   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D4   0808           01327             movf ADC_DATAPORT, W
08D5   0080           01328         movwf INDF                      ;Save to QUEUE
08D6   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003B            01330         count = count + 1
08D7   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08D8   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08D9   0808           01327             movf ADC_DATAPORT, W
08DA   0080           01328         movwf INDF                      ;Save to QUEUE
08DB   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003C            01330         count = count + 1
08DC   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08DD   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08DE   0808           01327             movf ADC_DATAPORT, W
08DF   0080           01328         movwf INDF                      ;Save to QUEUE
08E0   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003D            01330         count = count + 1
08E1   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E2   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E3   0808           01327             movf ADC_DATAPORT, W
08E4   0080           01328         movwf INDF                      ;Save to QUEUE
08E5   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003E            01330         count = count + 1
08E6   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08E7   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08E8   0808           01327             movf ADC_DATAPORT, W
08E9   0080           01328         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 88


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

08EA   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  0000003F            01330         count = count + 1
08EB   1409           01325         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08EC   1009           01326         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08ED   0808           01327             movf ADC_DATAPORT, W
08EE   0080           01328         movwf INDF                      ;Save to QUEUE
08EF   0384           01329         decf FSR, F                     ;Increment QUEUE pointer
  00000040            01330         count = count + 1
                      01331         endw
08F0   1409           01332     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
08F1   0808           01333     movf ADC_DATAPORT, W                ;Sample
08F2   118A           01334     bcf PCLATH, 3                                               ;insure correct program memory page
08F3   120A           01335     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
08F4   2970           01336     goto ADCShutdown
                      01337 
                      01338 ;Fastest XY sample
                      01339 ;Sampling rate = 416.667 kHz with 20 MHz clock
                      01340 ;Sampling rate =  83.333 kHz with 4 MHz clock
08F5                  01341 SampleXY417k
08F5   1009           01342     bcf ADC_CONTROLPORT, RDD        ;Begin Conversion
08F6   1489           01343     bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
                      01344     MOVLF BUFFERMIN, FSR            ;Initialize pointer
08F7   3020               M     movlw BUFFERMIN
08F8   0084               M     movwf FSR
08F9   0808           01345     movf ADC_DATAPORT, W            ;Sample X
08FA   1409           01346         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
08FB   1009           01347         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
08FC   1089           01348     bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
08FD   0080           01349     movwf INDF                      ;Save to QUEUE
08FE   0A84           01350     incf FSR, F                     ;Increment QUEUE pointer
  00000001            01351     count = 1
                      01352     while count < BUFFERSIZE / 2
08FF   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0900   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0901   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0902   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0903   0080           01357                 movwf INDF                      ;Save to QUEUE
0904   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0905   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0906   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0907   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0908   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0909   0080           01363                 movwf INDF                      ;Save to QUEUE
090A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01365                 count = count + 1
090B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
090C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
090D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
090E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
090F   0080           01357                 movwf INDF                      ;Save to QUEUE
0910   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0911   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 89


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0912   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0913   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0914   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0915   0080           01363                 movwf INDF                      ;Save to QUEUE
0916   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01365                 count = count + 1
0917   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0918   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0919   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
091A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
091B   0080           01357                 movwf INDF                      ;Save to QUEUE
091C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
091D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
091E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
091F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0920   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0921   0080           01363                 movwf INDF                      ;Save to QUEUE
0922   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01365                 count = count + 1
0923   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0924   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0925   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0926   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0927   0080           01357                 movwf INDF                      ;Save to QUEUE
0928   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0929   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
092A   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
092B   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
092C   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
092D   0080           01363                 movwf INDF                      ;Save to QUEUE
092E   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01365                 count = count + 1
092F   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0930   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0931   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0932   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0933   0080           01357                 movwf INDF                      ;Save to QUEUE
0934   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0935   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0936   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0937   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0938   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0939   0080           01363                 movwf INDF                      ;Save to QUEUE
093A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01365                 count = count + 1
093B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
093C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
093D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
093E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
093F   0080           01357                 movwf INDF                      ;Save to QUEUE
0940   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0941   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0942   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 90


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0943   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0944   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0945   0080           01363                 movwf INDF                      ;Save to QUEUE
0946   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01365                 count = count + 1
0947   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0948   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0949   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
094A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
094B   0080           01357                 movwf INDF                      ;Save to QUEUE
094C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
094D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
094E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
094F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0950   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0951   0080           01363                 movwf INDF                      ;Save to QUEUE
0952   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01365                 count = count + 1
0953   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0954   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0955   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0956   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0957   0080           01357                 movwf INDF                      ;Save to QUEUE
0958   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0959   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
095A   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
095B   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
095C   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
095D   0080           01363                 movwf INDF                      ;Save to QUEUE
095E   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01365                 count = count + 1
095F   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0960   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0961   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0962   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0963   0080           01357                 movwf INDF                      ;Save to QUEUE
0964   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0965   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0966   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0967   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0968   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0969   0080           01363                 movwf INDF                      ;Save to QUEUE
096A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01365                 count = count + 1
096B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
096C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
096D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
096E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
096F   0080           01357                 movwf INDF                      ;Save to QUEUE
0970   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0971   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0972   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0973   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 91


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0974   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0975   0080           01363                 movwf INDF                      ;Save to QUEUE
0976   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01365                 count = count + 1
0977   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0978   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0979   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
097A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
097B   0080           01357                 movwf INDF                      ;Save to QUEUE
097C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
097D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
097E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
097F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0980   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0981   0080           01363                 movwf INDF                      ;Save to QUEUE
0982   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01365                 count = count + 1
0983   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0984   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0985   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0986   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0987   0080           01357                 movwf INDF                      ;Save to QUEUE
0988   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0989   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
098A   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
098B   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
098C   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
098D   0080           01363                 movwf INDF                      ;Save to QUEUE
098E   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01365                 count = count + 1
098F   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0990   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0991   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0992   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0993   0080           01357                 movwf INDF                      ;Save to QUEUE
0994   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0995   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0996   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0997   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0998   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0999   0080           01363                 movwf INDF                      ;Save to QUEUE
099A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01365                 count = count + 1
099B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
099C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
099D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
099E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
099F   0080           01357                 movwf INDF                      ;Save to QUEUE
09A0   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09A1   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09A2   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09A3   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09A4   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 92


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09A5   0080           01363                 movwf INDF                      ;Save to QUEUE
09A6   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01365                 count = count + 1
09A7   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09A8   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09A9   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09AA   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09AB   0080           01357                 movwf INDF                      ;Save to QUEUE
09AC   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09AD   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09AE   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09AF   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09B0   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09B1   0080           01363                 movwf INDF                      ;Save to QUEUE
09B2   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01365                 count = count + 1
09B3   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09B4   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09B5   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09B6   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09B7   0080           01357                 movwf INDF                      ;Save to QUEUE
09B8   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09B9   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09BA   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09BB   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09BC   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09BD   0080           01363                 movwf INDF                      ;Save to QUEUE
09BE   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01365                 count = count + 1
09BF   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09C0   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09C1   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09C2   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09C3   0080           01357                 movwf INDF                      ;Save to QUEUE
09C4   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09C5   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09C6   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09C7   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09C8   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09C9   0080           01363                 movwf INDF                      ;Save to QUEUE
09CA   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01365                 count = count + 1
09CB   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09CC   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09CD   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09CE   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09CF   0080           01357                 movwf INDF                      ;Save to QUEUE
09D0   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09D1   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09D2   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09D3   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09D4   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09D5   0080           01363                 movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 93


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

09D6   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01365                 count = count + 1
09D7   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09D8   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09D9   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09DA   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09DB   0080           01357                 movwf INDF                      ;Save to QUEUE
09DC   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09DD   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09DE   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09DF   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09E0   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09E1   0080           01363                 movwf INDF                      ;Save to QUEUE
09E2   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01365                 count = count + 1
09E3   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09E4   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09E5   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09E6   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09E7   0080           01357                 movwf INDF                      ;Save to QUEUE
09E8   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09E9   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09EA   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09EB   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09EC   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09ED   0080           01363                 movwf INDF                      ;Save to QUEUE
09EE   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01365                 count = count + 1
09EF   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09F0   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09F1   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09F2   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09F3   0080           01357                 movwf INDF                      ;Save to QUEUE
09F4   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
09F5   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
09F6   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09F7   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09F8   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
09F9   0080           01363                 movwf INDF                      ;Save to QUEUE
09FA   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01365                 count = count + 1
09FB   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
09FC   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
09FD   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
09FE   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
09FF   0080           01357                 movwf INDF                      ;Save to QUEUE
0A00   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A01   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A02   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A03   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A04   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A05   0080           01363                 movwf INDF                      ;Save to QUEUE
0A06   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 94


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000017            01365                 count = count + 1
0A07   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A08   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A09   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A0A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A0B   0080           01357                 movwf INDF                      ;Save to QUEUE
0A0C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A0D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A0E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A0F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A10   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A11   0080           01363                 movwf INDF                      ;Save to QUEUE
0A12   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01365                 count = count + 1
0A13   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A14   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A15   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A16   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A17   0080           01357                 movwf INDF                      ;Save to QUEUE
0A18   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A19   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A1A   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A1B   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A1C   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A1D   0080           01363                 movwf INDF                      ;Save to QUEUE
0A1E   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01365                 count = count + 1
0A1F   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A20   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A21   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A22   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A23   0080           01357                 movwf INDF                      ;Save to QUEUE
0A24   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A25   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A26   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A27   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A28   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A29   0080           01363                 movwf INDF                      ;Save to QUEUE
0A2A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01365                 count = count + 1
0A2B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A2C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A2D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A2E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A2F   0080           01357                 movwf INDF                      ;Save to QUEUE
0A30   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A31   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A32   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A33   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A34   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A35   0080           01363                 movwf INDF                      ;Save to QUEUE
0A36   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01365                 count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 95


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A37   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A38   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A39   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A3A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A3B   0080           01357                 movwf INDF                      ;Save to QUEUE
0A3C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A3D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A3E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A3F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A40   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A41   0080           01363                 movwf INDF                      ;Save to QUEUE
0A42   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01365                 count = count + 1
0A43   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A44   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A45   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A46   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A47   0080           01357                 movwf INDF                      ;Save to QUEUE
0A48   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A49   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A4A   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A4B   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A4C   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A4D   0080           01363                 movwf INDF                      ;Save to QUEUE
0A4E   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01365                 count = count + 1
0A4F   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A50   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A51   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A52   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A53   0080           01357                 movwf INDF                      ;Save to QUEUE
0A54   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A55   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A56   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A57   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A58   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A59   0080           01363                 movwf INDF                      ;Save to QUEUE
0A5A   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01365                 count = count + 1
0A5B   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
0A5C   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A5D   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A5E   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A5F   0080           01357                 movwf INDF                      ;Save to QUEUE
0A60   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A61   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A62   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A63   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A64   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A65   0080           01363                 movwf INDF                      ;Save to QUEUE
0A66   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01365                 count = count + 1
0A67   0808           01353                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 96


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A68   1409           01354                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A69   1009           01355                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A6A   1489           01356                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A6B   0080           01357                 movwf INDF                      ;Save to QUEUE
0A6C   0A84           01358                 incf FSR, F                     ;Increment QUEUE pointer
0A6D   0808           01359                 movf ADC_DATAPORT, W            ;Sample X
0A6E   1409           01360                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A6F   1009           01361                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A70   1089           01362                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A71   0080           01363                 movwf INDF                      ;Save to QUEUE
0A72   0A84           01364                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01365                 count = count + 1
                      01366         endw
0A73   0808           01367     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 1
0A74   1409           01368     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A75   1009           01369         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A76   1489           01370         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A77   0080           01371     movwf INDF                      ;Save to QUEUE
0A78   1784           01372         bsf FSR, 7                                              ;Move QUEUE pointer to Bank 2
0A79   0808           01373     movf ADC_DATAPORT, W            ;Sample X
0A7A   1409           01374         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A7B   1009           01375         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A7C   1089           01376         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A7D   0080           01377     movwf INDF                      ;Save to QUEUE
0A7E   0384           01378         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01379     count = 1
                      01380     while count < BUFFERSIZE / 2
0A7F   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0A80   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A81   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A82   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A83   0080           01385                 movwf INDF                      ;Save to QUEUE
0A84   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0A85   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0A86   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A87   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A88   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A89   0080           01391                 movwf INDF                      ;Save to QUEUE
0A8A   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01393                 count = count + 1
0A8B   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0A8C   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A8D   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A8E   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A8F   0080           01385                 movwf INDF                      ;Save to QUEUE
0A90   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0A91   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0A92   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A93   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A94   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0A95   0080           01391                 movwf INDF                      ;Save to QUEUE
0A96   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01393                 count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 97


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0A97   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0A98   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A99   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0A9A   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0A9B   0080           01385                 movwf INDF                      ;Save to QUEUE
0A9C   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0A9D   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0A9E   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0A9F   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AA0   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AA1   0080           01391                 movwf INDF                      ;Save to QUEUE
0AA2   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000004            01393                 count = count + 1
0AA3   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AA4   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AA5   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AA6   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AA7   0080           01385                 movwf INDF                      ;Save to QUEUE
0AA8   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AA9   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AAA   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AAB   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AAC   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AAD   0080           01391                 movwf INDF                      ;Save to QUEUE
0AAE   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01393                 count = count + 1
0AAF   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AB0   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AB1   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AB2   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AB3   0080           01385                 movwf INDF                      ;Save to QUEUE
0AB4   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AB5   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AB6   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AB7   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AB8   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AB9   0080           01391                 movwf INDF                      ;Save to QUEUE
0ABA   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01393                 count = count + 1
0ABB   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0ABC   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ABD   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ABE   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ABF   0080           01385                 movwf INDF                      ;Save to QUEUE
0AC0   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AC1   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AC2   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AC3   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AC4   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AC5   0080           01391                 movwf INDF                      ;Save to QUEUE
0AC6   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01393                 count = count + 1
0AC7   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 98


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AC8   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AC9   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ACA   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ACB   0080           01385                 movwf INDF                      ;Save to QUEUE
0ACC   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0ACD   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0ACE   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ACF   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AD0   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AD1   0080           01391                 movwf INDF                      ;Save to QUEUE
0AD2   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01393                 count = count + 1
0AD3   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AD4   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AD5   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AD6   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AD7   0080           01385                 movwf INDF                      ;Save to QUEUE
0AD8   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AD9   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0ADA   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ADB   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ADC   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ADD   0080           01391                 movwf INDF                      ;Save to QUEUE
0ADE   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01393                 count = count + 1
0ADF   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AE0   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AE1   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AE2   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AE3   0080           01385                 movwf INDF                      ;Save to QUEUE
0AE4   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AE5   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AE6   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AE7   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AE8   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AE9   0080           01391                 movwf INDF                      ;Save to QUEUE
0AEA   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01393                 count = count + 1
0AEB   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AEC   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AED   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AEE   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AEF   0080           01385                 movwf INDF                      ;Save to QUEUE
0AF0   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AF1   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AF2   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AF3   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AF4   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0AF5   0080           01391                 movwf INDF                      ;Save to QUEUE
0AF6   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01393                 count = count + 1
0AF7   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0AF8   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 99


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0AF9   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0AFA   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0AFB   0080           01385                 movwf INDF                      ;Save to QUEUE
0AFC   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0AFD   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0AFE   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0AFF   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B00   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B01   0080           01391                 movwf INDF                      ;Save to QUEUE
0B02   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01393                 count = count + 1
0B03   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B04   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B05   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B06   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B07   0080           01385                 movwf INDF                      ;Save to QUEUE
0B08   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B09   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B0A   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B0B   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B0C   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B0D   0080           01391                 movwf INDF                      ;Save to QUEUE
0B0E   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01393                 count = count + 1
0B0F   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B10   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B11   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B12   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B13   0080           01385                 movwf INDF                      ;Save to QUEUE
0B14   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B15   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B16   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B17   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B18   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B19   0080           01391                 movwf INDF                      ;Save to QUEUE
0B1A   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01393                 count = count + 1
0B1B   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B1C   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B1D   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B1E   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B1F   0080           01385                 movwf INDF                      ;Save to QUEUE
0B20   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B21   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B22   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B23   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B24   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B25   0080           01391                 movwf INDF                      ;Save to QUEUE
0B26   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01393                 count = count + 1
0B27   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B28   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B29   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 100


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B2A   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B2B   0080           01385                 movwf INDF                      ;Save to QUEUE
0B2C   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B2D   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B2E   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B2F   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B30   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B31   0080           01391                 movwf INDF                      ;Save to QUEUE
0B32   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01393                 count = count + 1
0B33   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B34   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B35   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B36   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B37   0080           01385                 movwf INDF                      ;Save to QUEUE
0B38   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B39   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B3A   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B3B   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B3C   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B3D   0080           01391                 movwf INDF                      ;Save to QUEUE
0B3E   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01393                 count = count + 1
0B3F   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B40   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B41   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B42   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B43   0080           01385                 movwf INDF                      ;Save to QUEUE
0B44   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B45   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B46   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B47   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B48   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B49   0080           01391                 movwf INDF                      ;Save to QUEUE
0B4A   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01393                 count = count + 1
0B4B   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B4C   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B4D   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B4E   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B4F   0080           01385                 movwf INDF                      ;Save to QUEUE
0B50   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B51   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B52   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B53   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B54   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B55   0080           01391                 movwf INDF                      ;Save to QUEUE
0B56   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01393                 count = count + 1
0B57   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B58   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B59   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B5A   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 101


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B5B   0080           01385                 movwf INDF                      ;Save to QUEUE
0B5C   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B5D   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B5E   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B5F   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B60   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B61   0080           01391                 movwf INDF                      ;Save to QUEUE
0B62   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01393                 count = count + 1
0B63   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B64   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B65   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B66   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B67   0080           01385                 movwf INDF                      ;Save to QUEUE
0B68   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B69   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B6A   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B6B   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B6C   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B6D   0080           01391                 movwf INDF                      ;Save to QUEUE
0B6E   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01393                 count = count + 1
0B6F   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B70   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B71   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B72   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B73   0080           01385                 movwf INDF                      ;Save to QUEUE
0B74   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B75   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B76   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B77   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B78   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B79   0080           01391                 movwf INDF                      ;Save to QUEUE
0B7A   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01393                 count = count + 1
0B7B   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B7C   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B7D   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B7E   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B7F   0080           01385                 movwf INDF                      ;Save to QUEUE
0B80   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B81   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B82   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B83   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B84   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B85   0080           01391                 movwf INDF                      ;Save to QUEUE
0B86   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01393                 count = count + 1
0B87   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B88   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B89   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B8A   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B8B   0080           01385                 movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 102


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0B8C   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B8D   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B8E   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B8F   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B90   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B91   0080           01391                 movwf INDF                      ;Save to QUEUE
0B92   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01393                 count = count + 1
0B93   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0B94   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B95   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B96   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0B97   0080           01385                 movwf INDF                      ;Save to QUEUE
0B98   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0B99   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0B9A   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0B9B   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0B9C   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0B9D   0080           01391                 movwf INDF                      ;Save to QUEUE
0B9E   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01393                 count = count + 1
0B9F   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BA0   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BA1   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BA2   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BA3   0080           01385                 movwf INDF                      ;Save to QUEUE
0BA4   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BA5   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BA6   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BA7   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BA8   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BA9   0080           01391                 movwf INDF                      ;Save to QUEUE
0BAA   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01393                 count = count + 1
0BAB   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BAC   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BAD   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BAE   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BAF   0080           01385                 movwf INDF                      ;Save to QUEUE
0BB0   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BB1   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BB2   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BB3   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BB4   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BB5   0080           01391                 movwf INDF                      ;Save to QUEUE
0BB6   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01393                 count = count + 1
0BB7   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BB8   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BB9   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BBA   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BBB   0080           01385                 movwf INDF                      ;Save to QUEUE
0BBC   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 103


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BBD   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BBE   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BBF   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BC0   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BC1   0080           01391                 movwf INDF                      ;Save to QUEUE
0BC2   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01393                 count = count + 1
0BC3   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BC4   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BC5   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BC6   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BC7   0080           01385                 movwf INDF                      ;Save to QUEUE
0BC8   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BC9   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BCA   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BCB   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BCC   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BCD   0080           01391                 movwf INDF                      ;Save to QUEUE
0BCE   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01393                 count = count + 1
0BCF   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BD0   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BD1   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BD2   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BD3   0080           01385                 movwf INDF                      ;Save to QUEUE
0BD4   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BD5   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BD6   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BD7   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BD8   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BD9   0080           01391                 movwf INDF                      ;Save to QUEUE
0BDA   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01393                 count = count + 1
0BDB   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BDC   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BDD   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BDE   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BDF   0080           01385                 movwf INDF                      ;Save to QUEUE
0BE0   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BE1   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
0BE2   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BE3   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BE4   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BE5   0080           01391                 movwf INDF                      ;Save to QUEUE
0BE6   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01393                 count = count + 1
0BE7   0808           01381                 movf ADC_DATAPORT, W            ;Sample Y
0BE8   1409           01382                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BE9   1009           01383                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BEA   1489           01384                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BEB   0080           01385                 movwf INDF                      ;Save to QUEUE
0BEC   0384           01386                 decf FSR, F                     ;Increment QUEUE pointer
0BED   0808           01387                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 104


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0BEE   1409           01388                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BEF   1009           01389                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BF0   1089           01390                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BF1   0080           01391                 movwf INDF                      ;Save to QUEUE
0BF2   0384           01392                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01393                 count = count + 1
                      01394         endw
0BF3   0808           01395     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 2
0BF4   1409           01396     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BF5   1009           01397         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BF6   1489           01398         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0BF7   0080           01399     movwf INDF                      ;Save to QUEUE
0BF8   1783           01400         bsf STATUS, IRP                                 ;Move QUEUE pointer to Bank 4
0BF9   0808           01401     movf ADC_DATAPORT, W            ;Sample X
0BFA   1409           01402         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0BFB   1009           01403         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0BFC   1089           01404         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0BFD   0080           01405     movwf INDF                      ;Save to QUEUE
0BFE   0A84           01406         incf FSR, f                                             ;Increment QUEUE pointer
  00000001            01407     count = 1
                      01408     while count < BUFFERSIZE / 2
0BFF   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C00   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C01   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C02   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C03   0080           01413                 movwf INDF                      ;Save to QUEUE
0C04   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C05   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C06   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C07   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C08   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C09   0080           01419                 movwf INDF                      ;Save to QUEUE
0C0A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000002            01421                 count = count + 1
0C0B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C0C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C0D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C0E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C0F   0080           01413                 movwf INDF                      ;Save to QUEUE
0C10   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C11   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C12   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C13   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C14   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C15   0080           01419                 movwf INDF                      ;Save to QUEUE
0C16   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000003            01421                 count = count + 1
0C17   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C18   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C19   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C1A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C1B   0080           01413                 movwf INDF                      ;Save to QUEUE
0C1C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 105


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C1D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C1E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C1F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C20   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C21   0080           01419                 movwf INDF                      ;Save to QUEUE
0C22   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000004            01421                 count = count + 1
0C23   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C24   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C25   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C26   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C27   0080           01413                 movwf INDF                      ;Save to QUEUE
0C28   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C29   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C2A   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C2B   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C2C   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C2D   0080           01419                 movwf INDF                      ;Save to QUEUE
0C2E   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000005            01421                 count = count + 1
0C2F   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C30   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C31   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C32   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C33   0080           01413                 movwf INDF                      ;Save to QUEUE
0C34   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C35   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C36   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C37   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C38   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C39   0080           01419                 movwf INDF                      ;Save to QUEUE
0C3A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000006            01421                 count = count + 1
0C3B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C3C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C3D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C3E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C3F   0080           01413                 movwf INDF                      ;Save to QUEUE
0C40   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C41   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C42   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C43   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C44   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C45   0080           01419                 movwf INDF                      ;Save to QUEUE
0C46   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000007            01421                 count = count + 1
0C47   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C48   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C49   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C4A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C4B   0080           01413                 movwf INDF                      ;Save to QUEUE
0C4C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C4D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 106


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C4E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C4F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C50   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C51   0080           01419                 movwf INDF                      ;Save to QUEUE
0C52   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000008            01421                 count = count + 1
0C53   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C54   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C55   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C56   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C57   0080           01413                 movwf INDF                      ;Save to QUEUE
0C58   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C59   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C5A   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C5B   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C5C   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C5D   0080           01419                 movwf INDF                      ;Save to QUEUE
0C5E   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000009            01421                 count = count + 1
0C5F   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C60   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C61   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C62   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C63   0080           01413                 movwf INDF                      ;Save to QUEUE
0C64   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C65   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C66   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C67   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C68   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C69   0080           01419                 movwf INDF                      ;Save to QUEUE
0C6A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01421                 count = count + 1
0C6B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C6C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C6D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C6E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C6F   0080           01413                 movwf INDF                      ;Save to QUEUE
0C70   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C71   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C72   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C73   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C74   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C75   0080           01419                 movwf INDF                      ;Save to QUEUE
0C76   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01421                 count = count + 1
0C77   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C78   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C79   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C7A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C7B   0080           01413                 movwf INDF                      ;Save to QUEUE
0C7C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C7D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C7E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 107


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0C7F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C80   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C81   0080           01419                 movwf INDF                      ;Save to QUEUE
0C82   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01421                 count = count + 1
0C83   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C84   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C85   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C86   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C87   0080           01413                 movwf INDF                      ;Save to QUEUE
0C88   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C89   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C8A   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C8B   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C8C   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C8D   0080           01419                 movwf INDF                      ;Save to QUEUE
0C8E   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01421                 count = count + 1
0C8F   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C90   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C91   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C92   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C93   0080           01413                 movwf INDF                      ;Save to QUEUE
0C94   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0C95   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0C96   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C97   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C98   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0C99   0080           01419                 movwf INDF                      ;Save to QUEUE
0C9A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01421                 count = count + 1
0C9B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0C9C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0C9D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0C9E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0C9F   0080           01413                 movwf INDF                      ;Save to QUEUE
0CA0   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CA1   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CA2   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CA3   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CA4   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CA5   0080           01419                 movwf INDF                      ;Save to QUEUE
0CA6   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01421                 count = count + 1
0CA7   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CA8   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CA9   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CAA   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CAB   0080           01413                 movwf INDF                      ;Save to QUEUE
0CAC   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CAD   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CAE   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CAF   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 108


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CB0   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CB1   0080           01419                 movwf INDF                      ;Save to QUEUE
0CB2   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000010            01421                 count = count + 1
0CB3   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CB4   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CB5   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CB6   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CB7   0080           01413                 movwf INDF                      ;Save to QUEUE
0CB8   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CB9   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CBA   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CBB   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CBC   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CBD   0080           01419                 movwf INDF                      ;Save to QUEUE
0CBE   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000011            01421                 count = count + 1
0CBF   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CC0   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CC1   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CC2   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CC3   0080           01413                 movwf INDF                      ;Save to QUEUE
0CC4   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CC5   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CC6   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CC7   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CC8   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CC9   0080           01419                 movwf INDF                      ;Save to QUEUE
0CCA   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000012            01421                 count = count + 1
0CCB   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CCC   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CCD   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CCE   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CCF   0080           01413                 movwf INDF                      ;Save to QUEUE
0CD0   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CD1   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CD2   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CD3   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CD4   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CD5   0080           01419                 movwf INDF                      ;Save to QUEUE
0CD6   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000013            01421                 count = count + 1
0CD7   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CD8   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CD9   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CDA   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CDB   0080           01413                 movwf INDF                      ;Save to QUEUE
0CDC   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CDD   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CDE   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CDF   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CE0   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 109


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0CE1   0080           01419                 movwf INDF                      ;Save to QUEUE
0CE2   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000014            01421                 count = count + 1
0CE3   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CE4   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CE5   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CE6   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CE7   0080           01413                 movwf INDF                      ;Save to QUEUE
0CE8   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CE9   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CEA   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CEB   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CEC   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CED   0080           01419                 movwf INDF                      ;Save to QUEUE
0CEE   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000015            01421                 count = count + 1
0CEF   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CF0   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CF1   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CF2   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CF3   0080           01413                 movwf INDF                      ;Save to QUEUE
0CF4   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0CF5   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0CF6   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CF7   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CF8   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0CF9   0080           01419                 movwf INDF                      ;Save to QUEUE
0CFA   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000016            01421                 count = count + 1
0CFB   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0CFC   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0CFD   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0CFE   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0CFF   0080           01413                 movwf INDF                      ;Save to QUEUE
0D00   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D01   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D02   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D03   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D04   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D05   0080           01419                 movwf INDF                      ;Save to QUEUE
0D06   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000017            01421                 count = count + 1
0D07   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D08   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D09   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D0A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D0B   0080           01413                 movwf INDF                      ;Save to QUEUE
0D0C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D0D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D0E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D0F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D10   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D11   0080           01419                 movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 110


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0D12   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000018            01421                 count = count + 1
0D13   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D14   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D15   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D16   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D17   0080           01413                 movwf INDF                      ;Save to QUEUE
0D18   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D19   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D1A   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D1B   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D1C   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D1D   0080           01419                 movwf INDF                      ;Save to QUEUE
0D1E   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000019            01421                 count = count + 1
0D1F   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D20   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D21   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D22   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D23   0080           01413                 movwf INDF                      ;Save to QUEUE
0D24   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D25   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D26   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D27   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D28   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D29   0080           01419                 movwf INDF                      ;Save to QUEUE
0D2A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01421                 count = count + 1
0D2B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D2C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D2D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D2E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D2F   0080           01413                 movwf INDF                      ;Save to QUEUE
0D30   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D31   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D32   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D33   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D34   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D35   0080           01419                 movwf INDF                      ;Save to QUEUE
0D36   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01421                 count = count + 1
0D37   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D38   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D39   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D3A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D3B   0080           01413                 movwf INDF                      ;Save to QUEUE
0D3C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D3D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D3E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D3F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D40   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D41   0080           01419                 movwf INDF                      ;Save to QUEUE
0D42   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 111


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001C            01421                 count = count + 1
0D43   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D44   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D45   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D46   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D47   0080           01413                 movwf INDF                      ;Save to QUEUE
0D48   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D49   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D4A   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D4B   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D4C   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D4D   0080           01419                 movwf INDF                      ;Save to QUEUE
0D4E   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01421                 count = count + 1
0D4F   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D50   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D51   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D52   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D53   0080           01413                 movwf INDF                      ;Save to QUEUE
0D54   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D55   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D56   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D57   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D58   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D59   0080           01419                 movwf INDF                      ;Save to QUEUE
0D5A   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01421                 count = count + 1
0D5B   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D5C   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D5D   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D5E   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D5F   0080           01413                 movwf INDF                      ;Save to QUEUE
0D60   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D61   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D62   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D63   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D64   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D65   0080           01419                 movwf INDF                      ;Save to QUEUE
0D66   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01421                 count = count + 1
0D67   0808           01409                 movf ADC_DATAPORT, W            ;Sample Y
0D68   1409           01410                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D69   1009           01411                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D6A   1489           01412                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D6B   0080           01413                 movwf INDF                      ;Save to QUEUE
0D6C   0A84           01414                 incf FSR, F                     ;Increment QUEUE pointer
0D6D   0808           01415                 movf ADC_DATAPORT, W            ;Sample X
0D6E   1409           01416                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D6F   1009           01417                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D70   1089           01418                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D71   0080           01419                 movwf INDF                      ;Save to QUEUE
0D72   0A84           01420                 incf FSR, F                     ;Increment QUEUE pointer
  00000020            01421                 count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 112


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01422         endw
0D73   0808           01423     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 4
0D74   1409           01424     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D75   1009           01425         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D76   1489           01426         bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D77   0080           01427     movwf INDF                      ;Save to QUEUE
0D78   1384           01428         bcf FSR, 7                                              ;Move QUEUE pointer to Bank 3
0D79   0808           01429     movf ADC_DATAPORT, W            ;Sample X
0D7A   1409           01430         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D7B   1009           01431         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D7C   1089           01432         bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D7D   0080           01433     movwf INDF                      ;Save to QUEUE
0D7E   0384           01434         decf FSR, f                                             ;Increment QUEUE pointer
  00000001            01435     count = 1
                      01436     while count < BUFFERSIZE / 2
0D7F   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0D80   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D81   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D82   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D83   0080           01441                 movwf INDF                      ;Save to QUEUE
0D84   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0D85   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0D86   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D87   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D88   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D89   0080           01447                 movwf INDF                      ;Save to QUEUE
0D8A   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000002            01449                 count = count + 1
0D8B   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0D8C   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D8D   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D8E   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D8F   0080           01441                 movwf INDF                      ;Save to QUEUE
0D90   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0D91   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0D92   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D93   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D94   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0D95   0080           01447                 movwf INDF                      ;Save to QUEUE
0D96   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000003            01449                 count = count + 1
0D97   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0D98   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D99   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0D9A   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0D9B   0080           01441                 movwf INDF                      ;Save to QUEUE
0D9C   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0D9D   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0D9E   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0D9F   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DA0   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DA1   0080           01447                 movwf INDF                      ;Save to QUEUE
0DA2   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 113


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01449                 count = count + 1
0DA3   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DA4   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DA5   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DA6   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DA7   0080           01441                 movwf INDF                      ;Save to QUEUE
0DA8   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DA9   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DAA   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DAB   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DAC   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DAD   0080           01447                 movwf INDF                      ;Save to QUEUE
0DAE   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000005            01449                 count = count + 1
0DAF   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DB0   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DB1   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DB2   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DB3   0080           01441                 movwf INDF                      ;Save to QUEUE
0DB4   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DB5   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DB6   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DB7   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DB8   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DB9   0080           01447                 movwf INDF                      ;Save to QUEUE
0DBA   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000006            01449                 count = count + 1
0DBB   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DBC   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DBD   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DBE   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DBF   0080           01441                 movwf INDF                      ;Save to QUEUE
0DC0   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DC1   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DC2   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DC3   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DC4   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DC5   0080           01447                 movwf INDF                      ;Save to QUEUE
0DC6   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000007            01449                 count = count + 1
0DC7   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DC8   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DC9   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DCA   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DCB   0080           01441                 movwf INDF                      ;Save to QUEUE
0DCC   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DCD   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DCE   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DCF   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DD0   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DD1   0080           01447                 movwf INDF                      ;Save to QUEUE
0DD2   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000008            01449                 count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 114


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0DD3   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DD4   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DD5   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DD6   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DD7   0080           01441                 movwf INDF                      ;Save to QUEUE
0DD8   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DD9   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DDA   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DDB   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DDC   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DDD   0080           01447                 movwf INDF                      ;Save to QUEUE
0DDE   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000009            01449                 count = count + 1
0DDF   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DE0   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DE1   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DE2   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DE3   0080           01441                 movwf INDF                      ;Save to QUEUE
0DE4   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DE5   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DE6   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DE7   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DE8   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DE9   0080           01447                 movwf INDF                      ;Save to QUEUE
0DEA   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01449                 count = count + 1
0DEB   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DEC   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DED   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DEE   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DEF   0080           01441                 movwf INDF                      ;Save to QUEUE
0DF0   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DF1   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DF2   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DF3   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DF4   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0DF5   0080           01447                 movwf INDF                      ;Save to QUEUE
0DF6   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01449                 count = count + 1
0DF7   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0DF8   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DF9   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0DFA   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0DFB   0080           01441                 movwf INDF                      ;Save to QUEUE
0DFC   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0DFD   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0DFE   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0DFF   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E00   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E01   0080           01447                 movwf INDF                      ;Save to QUEUE
0E02   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01449                 count = count + 1
0E03   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 115


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E04   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E05   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E06   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E07   0080           01441                 movwf INDF                      ;Save to QUEUE
0E08   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E09   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E0A   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E0B   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E0C   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E0D   0080           01447                 movwf INDF                      ;Save to QUEUE
0E0E   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01449                 count = count + 1
0E0F   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E10   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E11   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E12   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E13   0080           01441                 movwf INDF                      ;Save to QUEUE
0E14   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E15   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E16   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E17   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E18   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E19   0080           01447                 movwf INDF                      ;Save to QUEUE
0E1A   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01449                 count = count + 1
0E1B   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E1C   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E1D   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E1E   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E1F   0080           01441                 movwf INDF                      ;Save to QUEUE
0E20   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E21   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E22   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E23   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E24   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E25   0080           01447                 movwf INDF                      ;Save to QUEUE
0E26   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01449                 count = count + 1
0E27   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E28   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E29   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E2A   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E2B   0080           01441                 movwf INDF                      ;Save to QUEUE
0E2C   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E2D   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E2E   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E2F   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E30   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E31   0080           01447                 movwf INDF                      ;Save to QUEUE
0E32   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000010            01449                 count = count + 1
0E33   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E34   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 116


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E35   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E36   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E37   0080           01441                 movwf INDF                      ;Save to QUEUE
0E38   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E39   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E3A   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E3B   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E3C   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E3D   0080           01447                 movwf INDF                      ;Save to QUEUE
0E3E   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000011            01449                 count = count + 1
0E3F   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E40   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E41   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E42   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E43   0080           01441                 movwf INDF                      ;Save to QUEUE
0E44   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E45   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E46   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E47   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E48   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E49   0080           01447                 movwf INDF                      ;Save to QUEUE
0E4A   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000012            01449                 count = count + 1
0E4B   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E4C   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E4D   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E4E   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E4F   0080           01441                 movwf INDF                      ;Save to QUEUE
0E50   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E51   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E52   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E53   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E54   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E55   0080           01447                 movwf INDF                      ;Save to QUEUE
0E56   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000013            01449                 count = count + 1
0E57   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E58   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E59   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E5A   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E5B   0080           01441                 movwf INDF                      ;Save to QUEUE
0E5C   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E5D   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E5E   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E5F   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E60   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E61   0080           01447                 movwf INDF                      ;Save to QUEUE
0E62   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000014            01449                 count = count + 1
0E63   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E64   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E65   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 117


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E66   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E67   0080           01441                 movwf INDF                      ;Save to QUEUE
0E68   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E69   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E6A   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E6B   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E6C   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E6D   0080           01447                 movwf INDF                      ;Save to QUEUE
0E6E   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000015            01449                 count = count + 1
0E6F   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E70   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E71   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E72   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E73   0080           01441                 movwf INDF                      ;Save to QUEUE
0E74   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E75   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E76   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E77   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E78   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E79   0080           01447                 movwf INDF                      ;Save to QUEUE
0E7A   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000016            01449                 count = count + 1
0E7B   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E7C   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E7D   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E7E   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E7F   0080           01441                 movwf INDF                      ;Save to QUEUE
0E80   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E81   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E82   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E83   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E84   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E85   0080           01447                 movwf INDF                      ;Save to QUEUE
0E86   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000017            01449                 count = count + 1
0E87   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E88   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E89   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E8A   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0E8B   0080           01441                 movwf INDF                      ;Save to QUEUE
0E8C   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E8D   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E8E   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E8F   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E90   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E91   0080           01447                 movwf INDF                      ;Save to QUEUE
0E92   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000018            01449                 count = count + 1
0E93   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0E94   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E95   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E96   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 118


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0E97   0080           01441                 movwf INDF                      ;Save to QUEUE
0E98   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0E99   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0E9A   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0E9B   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0E9C   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0E9D   0080           01447                 movwf INDF                      ;Save to QUEUE
0E9E   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000019            01449                 count = count + 1
0E9F   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EA0   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA1   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EA2   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EA3   0080           01441                 movwf INDF                      ;Save to QUEUE
0EA4   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EA5   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0EA6   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EA7   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EA8   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EA9   0080           01447                 movwf INDF                      ;Save to QUEUE
0EAA   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01449                 count = count + 1
0EAB   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EAC   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EAD   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EAE   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EAF   0080           01441                 movwf INDF                      ;Save to QUEUE
0EB0   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EB1   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0EB2   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EB3   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EB4   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EB5   0080           01447                 movwf INDF                      ;Save to QUEUE
0EB6   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01449                 count = count + 1
0EB7   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EB8   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EB9   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EBA   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EBB   0080           01441                 movwf INDF                      ;Save to QUEUE
0EBC   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EBD   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0EBE   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EBF   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EC0   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EC1   0080           01447                 movwf INDF                      ;Save to QUEUE
0EC2   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01449                 count = count + 1
0EC3   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EC4   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EC5   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EC6   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EC7   0080           01441                 movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 119


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EC8   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EC9   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0ECA   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ECB   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ECC   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ECD   0080           01447                 movwf INDF                      ;Save to QUEUE
0ECE   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01449                 count = count + 1
0ECF   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0ED0   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED1   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ED2   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0ED3   0080           01441                 movwf INDF                      ;Save to QUEUE
0ED4   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0ED5   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0ED6   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0ED7   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0ED8   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0ED9   0080           01447                 movwf INDF                      ;Save to QUEUE
0EDA   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01449                 count = count + 1
0EDB   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EDC   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EDD   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EDE   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EDF   0080           01441                 movwf INDF                      ;Save to QUEUE
0EE0   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EE1   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0EE2   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EE3   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EE4   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EE5   0080           01447                 movwf INDF                      ;Save to QUEUE
0EE6   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01449                 count = count + 1
0EE7   0808           01437                 movf ADC_DATAPORT, W            ;Sample Y
0EE8   1409           01438                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EE9   1009           01439                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EEA   1489           01440                 bsf ADC_CONTROLPORT, ADDR0      ;Set channel to Y
0EEB   0080           01441                 movwf INDF                      ;Save to QUEUE
0EEC   0384           01442                 decf FSR, F                     ;Increment QUEUE pointer
0EED   0808           01443                 movf ADC_DATAPORT, W            ;Sample X
0EEE   1409           01444                 bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EEF   1009           01445                 bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EF0   1089           01446                 bcf ADC_CONTROLPORT, ADDR0      ;Set channel to X
0EF1   0080           01447                 movwf INDF                      ;Save to QUEUE
0EF2   0384           01448                 decf FSR, F                     ;Increment QUEUE pointer
  00000020            01449                 count = count + 1
                      01450         endw
0EF3   0808           01451     movf ADC_DATAPORT, W            ;Sample Y, last in Bank 3
0EF4   1409           01452     bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EF5   118A           01453     bcf PCLATH, 3                                       ;insure correct program memory page
0EF6   120A           01454     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 120


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0EF7   2970           01455         goto ADCShutdown
                      01456         
                      01457 ;Fast sample
                      01458 ;Sampling rate = 833.333 kHz with 20 MHz clock
                      01459 ;Sampling rate = 166.667 kHz with 4 MHz clock
                      01460 ;-----------------------------------------------------------------------------
0EF8                  01461 Sample833k
0EF8   1009           01462     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01463     MOVLF BUFFERMIN, FSR                ;Initialize pointer
0EF9   3020               M     movlw BUFFERMIN
0EFA   0084               M     movwf FSR
0EFB   0000           01464     nop
  0000                01465     local count
  00000001            01466     count = 1
                      01467     while count < BUFFERSIZE
0EFC   0808           01468         movf ADC_DATAPORT, W            ;Sample
0EFD   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0EFE   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0EFF   0080           01471         movwf INDF                      ;Save to QUEUE
0F00   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F01   0000           01473         nop                             ;Wait a cycle
  00000002            01474         count = count + 1
0F02   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F03   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F04   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F05   0080           01471         movwf INDF                      ;Save to QUEUE
0F06   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F07   0000           01473         nop                             ;Wait a cycle
  00000003            01474         count = count + 1
0F08   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F09   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F0A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F0B   0080           01471         movwf INDF                      ;Save to QUEUE
0F0C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F0D   0000           01473         nop                             ;Wait a cycle
  00000004            01474         count = count + 1
0F0E   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F0F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F10   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F11   0080           01471         movwf INDF                      ;Save to QUEUE
0F12   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F13   0000           01473         nop                             ;Wait a cycle
  00000005            01474         count = count + 1
0F14   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F15   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F16   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F17   0080           01471         movwf INDF                      ;Save to QUEUE
0F18   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F19   0000           01473         nop                             ;Wait a cycle
  00000006            01474         count = count + 1
0F1A   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F1B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F1C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 121


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F1D   0080           01471         movwf INDF                      ;Save to QUEUE
0F1E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F1F   0000           01473         nop                             ;Wait a cycle
  00000007            01474         count = count + 1
0F20   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F21   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F22   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F23   0080           01471         movwf INDF                      ;Save to QUEUE
0F24   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F25   0000           01473         nop                             ;Wait a cycle
  00000008            01474         count = count + 1
0F26   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F27   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F28   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F29   0080           01471         movwf INDF                      ;Save to QUEUE
0F2A   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F2B   0000           01473         nop                             ;Wait a cycle
  00000009            01474         count = count + 1
0F2C   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F2D   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F2E   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F2F   0080           01471         movwf INDF                      ;Save to QUEUE
0F30   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F31   0000           01473         nop                             ;Wait a cycle
  0000000A            01474         count = count + 1
0F32   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F33   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F34   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F35   0080           01471         movwf INDF                      ;Save to QUEUE
0F36   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F37   0000           01473         nop                             ;Wait a cycle
  0000000B            01474         count = count + 1
0F38   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F39   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F3A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F3B   0080           01471         movwf INDF                      ;Save to QUEUE
0F3C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F3D   0000           01473         nop                             ;Wait a cycle
  0000000C            01474         count = count + 1
0F3E   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F3F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F40   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F41   0080           01471         movwf INDF                      ;Save to QUEUE
0F42   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F43   0000           01473         nop                             ;Wait a cycle
  0000000D            01474         count = count + 1
0F44   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F45   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F46   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F47   0080           01471         movwf INDF                      ;Save to QUEUE
0F48   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F49   0000           01473         nop                             ;Wait a cycle
  0000000E            01474         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 122


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F4A   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F4B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F4C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F4D   0080           01471         movwf INDF                      ;Save to QUEUE
0F4E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F4F   0000           01473         nop                             ;Wait a cycle
  0000000F            01474         count = count + 1
0F50   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F51   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F52   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F53   0080           01471         movwf INDF                      ;Save to QUEUE
0F54   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F55   0000           01473         nop                             ;Wait a cycle
  00000010            01474         count = count + 1
0F56   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F57   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F58   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F59   0080           01471         movwf INDF                      ;Save to QUEUE
0F5A   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F5B   0000           01473         nop                             ;Wait a cycle
  00000011            01474         count = count + 1
0F5C   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F5D   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F5E   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F5F   0080           01471         movwf INDF                      ;Save to QUEUE
0F60   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F61   0000           01473         nop                             ;Wait a cycle
  00000012            01474         count = count + 1
0F62   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F63   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F64   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F65   0080           01471         movwf INDF                      ;Save to QUEUE
0F66   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F67   0000           01473         nop                             ;Wait a cycle
  00000013            01474         count = count + 1
0F68   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F69   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F6A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F6B   0080           01471         movwf INDF                      ;Save to QUEUE
0F6C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F6D   0000           01473         nop                             ;Wait a cycle
  00000014            01474         count = count + 1
0F6E   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F6F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F70   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F71   0080           01471         movwf INDF                      ;Save to QUEUE
0F72   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F73   0000           01473         nop                             ;Wait a cycle
  00000015            01474         count = count + 1
0F74   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F75   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F76   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F77   0080           01471         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 123


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0F78   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F79   0000           01473         nop                             ;Wait a cycle
  00000016            01474         count = count + 1
0F7A   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F7B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F7C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F7D   0080           01471         movwf INDF                      ;Save to QUEUE
0F7E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F7F   0000           01473         nop                             ;Wait a cycle
  00000017            01474         count = count + 1
0F80   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F81   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F82   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F83   0080           01471         movwf INDF                      ;Save to QUEUE
0F84   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F85   0000           01473         nop                             ;Wait a cycle
  00000018            01474         count = count + 1
0F86   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F87   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F88   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F89   0080           01471         movwf INDF                      ;Save to QUEUE
0F8A   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F8B   0000           01473         nop                             ;Wait a cycle
  00000019            01474         count = count + 1
0F8C   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F8D   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F8E   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F8F   0080           01471         movwf INDF                      ;Save to QUEUE
0F90   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F91   0000           01473         nop                             ;Wait a cycle
  0000001A            01474         count = count + 1
0F92   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F93   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F94   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F95   0080           01471         movwf INDF                      ;Save to QUEUE
0F96   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F97   0000           01473         nop                             ;Wait a cycle
  0000001B            01474         count = count + 1
0F98   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F99   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0F9A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0F9B   0080           01471         movwf INDF                      ;Save to QUEUE
0F9C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0F9D   0000           01473         nop                             ;Wait a cycle
  0000001C            01474         count = count + 1
0F9E   0808           01468         movf ADC_DATAPORT, W            ;Sample
0F9F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FA0   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA1   0080           01471         movwf INDF                      ;Save to QUEUE
0FA2   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FA3   0000           01473         nop                             ;Wait a cycle
  0000001D            01474         count = count + 1
0FA4   0808           01468         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 124


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FA5   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FA6   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FA7   0080           01471         movwf INDF                      ;Save to QUEUE
0FA8   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FA9   0000           01473         nop                             ;Wait a cycle
  0000001E            01474         count = count + 1
0FAA   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FAB   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FAC   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FAD   0080           01471         movwf INDF                      ;Save to QUEUE
0FAE   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FAF   0000           01473         nop                             ;Wait a cycle
  0000001F            01474         count = count + 1
0FB0   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FB1   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB2   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB3   0080           01471         movwf INDF                      ;Save to QUEUE
0FB4   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FB5   0000           01473         nop                             ;Wait a cycle
  00000020            01474         count = count + 1
0FB6   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FB7   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FB8   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FB9   0080           01471         movwf INDF                      ;Save to QUEUE
0FBA   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FBB   0000           01473         nop                             ;Wait a cycle
  00000021            01474         count = count + 1
0FBC   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FBD   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FBE   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FBF   0080           01471         movwf INDF                      ;Save to QUEUE
0FC0   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FC1   0000           01473         nop                             ;Wait a cycle
  00000022            01474         count = count + 1
0FC2   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FC3   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FC4   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FC5   0080           01471         movwf INDF                      ;Save to QUEUE
0FC6   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FC7   0000           01473         nop                             ;Wait a cycle
  00000023            01474         count = count + 1
0FC8   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FC9   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FCA   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FCB   0080           01471         movwf INDF                      ;Save to QUEUE
0FCC   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FCD   0000           01473         nop                             ;Wait a cycle
  00000024            01474         count = count + 1
0FCE   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FCF   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FD0   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD1   0080           01471         movwf INDF                      ;Save to QUEUE
0FD2   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 125


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0FD3   0000           01473         nop                             ;Wait a cycle
  00000025            01474         count = count + 1
0FD4   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FD5   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FD6   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FD7   0080           01471         movwf INDF                      ;Save to QUEUE
0FD8   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FD9   0000           01473         nop                             ;Wait a cycle
  00000026            01474         count = count + 1
0FDA   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FDB   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FDC   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FDD   0080           01471         movwf INDF                      ;Save to QUEUE
0FDE   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FDF   0000           01473         nop                             ;Wait a cycle
  00000027            01474         count = count + 1
0FE0   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FE1   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE2   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE3   0080           01471         movwf INDF                      ;Save to QUEUE
0FE4   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FE5   0000           01473         nop                             ;Wait a cycle
  00000028            01474         count = count + 1
0FE6   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FE7   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FE8   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FE9   0080           01471         movwf INDF                      ;Save to QUEUE
0FEA   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FEB   0000           01473         nop                             ;Wait a cycle
  00000029            01474         count = count + 1
0FEC   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FED   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FEE   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FEF   0080           01471         movwf INDF                      ;Save to QUEUE
0FF0   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FF1   0000           01473         nop                             ;Wait a cycle
  0000002A            01474         count = count + 1
0FF2   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FF3   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FF4   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FF5   0080           01471         movwf INDF                      ;Save to QUEUE
0FF6   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FF7   0000           01473         nop                             ;Wait a cycle
  0000002B            01474         count = count + 1
0FF8   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FF9   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
0FFA   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
0FFB   0080           01471         movwf INDF                      ;Save to QUEUE
0FFC   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
0FFD   0000           01473         nop                             ;Wait a cycle
  0000002C            01474         count = count + 1
0FFE   0808           01468         movf ADC_DATAPORT, W            ;Sample
0FFF   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 126


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1000   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1001   0080           01471         movwf INDF                      ;Save to QUEUE
1002   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1003   0000           01473         nop                             ;Wait a cycle
  0000002D            01474         count = count + 1
1004   0808           01468         movf ADC_DATAPORT, W            ;Sample
1005   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1006   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1007   0080           01471         movwf INDF                      ;Save to QUEUE
1008   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1009   0000           01473         nop                             ;Wait a cycle
  0000002E            01474         count = count + 1
100A   0808           01468         movf ADC_DATAPORT, W            ;Sample
100B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
100C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
100D   0080           01471         movwf INDF                      ;Save to QUEUE
100E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
100F   0000           01473         nop                             ;Wait a cycle
  0000002F            01474         count = count + 1
1010   0808           01468         movf ADC_DATAPORT, W            ;Sample
1011   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1012   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1013   0080           01471         movwf INDF                      ;Save to QUEUE
1014   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1015   0000           01473         nop                             ;Wait a cycle
  00000030            01474         count = count + 1
1016   0808           01468         movf ADC_DATAPORT, W            ;Sample
1017   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1018   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1019   0080           01471         movwf INDF                      ;Save to QUEUE
101A   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
101B   0000           01473         nop                             ;Wait a cycle
  00000031            01474         count = count + 1
101C   0808           01468         movf ADC_DATAPORT, W            ;Sample
101D   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
101E   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
101F   0080           01471         movwf INDF                      ;Save to QUEUE
1020   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1021   0000           01473         nop                             ;Wait a cycle
  00000032            01474         count = count + 1
1022   0808           01468         movf ADC_DATAPORT, W            ;Sample
1023   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1024   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1025   0080           01471         movwf INDF                      ;Save to QUEUE
1026   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1027   0000           01473         nop                             ;Wait a cycle
  00000033            01474         count = count + 1
1028   0808           01468         movf ADC_DATAPORT, W            ;Sample
1029   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
102A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
102B   0080           01471         movwf INDF                      ;Save to QUEUE
102C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
102D   0000           01473         nop                             ;Wait a cycle
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 127


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000034            01474         count = count + 1
102E   0808           01468         movf ADC_DATAPORT, W            ;Sample
102F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1030   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1031   0080           01471         movwf INDF                      ;Save to QUEUE
1032   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1033   0000           01473         nop                             ;Wait a cycle
  00000035            01474         count = count + 1
1034   0808           01468         movf ADC_DATAPORT, W            ;Sample
1035   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1036   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1037   0080           01471         movwf INDF                      ;Save to QUEUE
1038   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1039   0000           01473         nop                             ;Wait a cycle
  00000036            01474         count = count + 1
103A   0808           01468         movf ADC_DATAPORT, W            ;Sample
103B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
103C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
103D   0080           01471         movwf INDF                      ;Save to QUEUE
103E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
103F   0000           01473         nop                             ;Wait a cycle
  00000037            01474         count = count + 1
1040   0808           01468         movf ADC_DATAPORT, W            ;Sample
1041   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1042   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1043   0080           01471         movwf INDF                      ;Save to QUEUE
1044   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1045   0000           01473         nop                             ;Wait a cycle
  00000038            01474         count = count + 1
1046   0808           01468         movf ADC_DATAPORT, W            ;Sample
1047   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1048   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1049   0080           01471         movwf INDF                      ;Save to QUEUE
104A   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
104B   0000           01473         nop                             ;Wait a cycle
  00000039            01474         count = count + 1
104C   0808           01468         movf ADC_DATAPORT, W            ;Sample
104D   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
104E   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
104F   0080           01471         movwf INDF                      ;Save to QUEUE
1050   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1051   0000           01473         nop                             ;Wait a cycle
  0000003A            01474         count = count + 1
1052   0808           01468         movf ADC_DATAPORT, W            ;Sample
1053   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1054   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1055   0080           01471         movwf INDF                      ;Save to QUEUE
1056   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1057   0000           01473         nop                             ;Wait a cycle
  0000003B            01474         count = count + 1
1058   0808           01468         movf ADC_DATAPORT, W            ;Sample
1059   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
105A   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 128


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

105B   0080           01471         movwf INDF                      ;Save to QUEUE
105C   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
105D   0000           01473         nop                             ;Wait a cycle
  0000003C            01474         count = count + 1
105E   0808           01468         movf ADC_DATAPORT, W            ;Sample
105F   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1060   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1061   0080           01471         movwf INDF                      ;Save to QUEUE
1062   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1063   0000           01473         nop                             ;Wait a cycle
  0000003D            01474         count = count + 1
1064   0808           01468         movf ADC_DATAPORT, W            ;Sample
1065   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1066   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1067   0080           01471         movwf INDF                      ;Save to QUEUE
1068   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1069   0000           01473         nop                             ;Wait a cycle
  0000003E            01474         count = count + 1
106A   0808           01468         movf ADC_DATAPORT, W            ;Sample
106B   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
106C   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
106D   0080           01471         movwf INDF                      ;Save to QUEUE
106E   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
106F   0000           01473         nop                             ;Wait a cycle
  0000003F            01474         count = count + 1
1070   0808           01468         movf ADC_DATAPORT, W            ;Sample
1071   1409           01469         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1072   1009           01470         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1073   0080           01471         movwf INDF                      ;Save to QUEUE
1074   0A84           01472         incf FSR, F                     ;Increment QUEUE pointer
1075   0000           01473         nop                             ;Wait a cycle
  00000040            01474         count = count + 1
                      01475     endw
1076   0808           01476     movf ADC_DATAPORT, W
1077   1409           01477     bsf ADC_CONTROLPORT, RDD
1078   1009           01478     bcf ADC_CONTROLPORT, RDD
1079   0080           01479     movwf INDF
107A   1784           01480     bsf FSR, 7                                                  ;goto bank 2
107B   0000           01481     nop                                     ;Wait a cycle
  00000001            01482     count = 1
                      01483     while count < BUFFERSIZE
107C   0808           01484         movf ADC_DATAPORT, W            ;Sample
107D   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
107E   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
107F   0080           01487         movwf INDF                      ;Save to QUEUE
1080   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1081   0000           01489         nop                             ;Wait a cycle
  00000002            01490         count = count + 1
1082   0808           01484         movf ADC_DATAPORT, W            ;Sample
1083   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1084   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1085   0080           01487         movwf INDF                      ;Save to QUEUE
1086   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 129


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1087   0000           01489         nop                             ;Wait a cycle
  00000003            01490         count = count + 1
1088   0808           01484         movf ADC_DATAPORT, W            ;Sample
1089   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
108A   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
108B   0080           01487         movwf INDF                      ;Save to QUEUE
108C   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
108D   0000           01489         nop                             ;Wait a cycle
  00000004            01490         count = count + 1
108E   0808           01484         movf ADC_DATAPORT, W            ;Sample
108F   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1090   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1091   0080           01487         movwf INDF                      ;Save to QUEUE
1092   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1093   0000           01489         nop                             ;Wait a cycle
  00000005            01490         count = count + 1
1094   0808           01484         movf ADC_DATAPORT, W            ;Sample
1095   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1096   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1097   0080           01487         movwf INDF                      ;Save to QUEUE
1098   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1099   0000           01489         nop                             ;Wait a cycle
  00000006            01490         count = count + 1
109A   0808           01484         movf ADC_DATAPORT, W            ;Sample
109B   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
109C   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
109D   0080           01487         movwf INDF                      ;Save to QUEUE
109E   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
109F   0000           01489         nop                             ;Wait a cycle
  00000007            01490         count = count + 1
10A0   0808           01484         movf ADC_DATAPORT, W            ;Sample
10A1   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A2   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A3   0080           01487         movwf INDF                      ;Save to QUEUE
10A4   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10A5   0000           01489         nop                             ;Wait a cycle
  00000008            01490         count = count + 1
10A6   0808           01484         movf ADC_DATAPORT, W            ;Sample
10A7   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10A8   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10A9   0080           01487         movwf INDF                      ;Save to QUEUE
10AA   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10AB   0000           01489         nop                             ;Wait a cycle
  00000009            01490         count = count + 1
10AC   0808           01484         movf ADC_DATAPORT, W            ;Sample
10AD   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10AE   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10AF   0080           01487         movwf INDF                      ;Save to QUEUE
10B0   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10B1   0000           01489         nop                             ;Wait a cycle
  0000000A            01490         count = count + 1
10B2   0808           01484         movf ADC_DATAPORT, W            ;Sample
10B3   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 130


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

10B4   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10B5   0080           01487         movwf INDF                      ;Save to QUEUE
10B6   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10B7   0000           01489         nop                             ;Wait a cycle
  0000000B            01490         count = count + 1
10B8   0808           01484         movf ADC_DATAPORT, W            ;Sample
10B9   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10BA   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10BB   0080           01487         movwf INDF                      ;Save to QUEUE
10BC   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10BD   0000           01489         nop                             ;Wait a cycle
  0000000C            01490         count = count + 1
10BE   0808           01484         movf ADC_DATAPORT, W            ;Sample
10BF   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10C0   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C1   0080           01487         movwf INDF                      ;Save to QUEUE
10C2   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10C3   0000           01489         nop                             ;Wait a cycle
  0000000D            01490         count = count + 1
10C4   0808           01484         movf ADC_DATAPORT, W            ;Sample
10C5   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10C6   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10C7   0080           01487         movwf INDF                      ;Save to QUEUE
10C8   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10C9   0000           01489         nop                             ;Wait a cycle
  0000000E            01490         count = count + 1
10CA   0808           01484         movf ADC_DATAPORT, W            ;Sample
10CB   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10CC   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10CD   0080           01487         movwf INDF                      ;Save to QUEUE
10CE   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10CF   0000           01489         nop                             ;Wait a cycle
  0000000F            01490         count = count + 1
10D0   0808           01484         movf ADC_DATAPORT, W            ;Sample
10D1   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10D2   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D3   0080           01487         movwf INDF                      ;Save to QUEUE
10D4   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10D5   0000           01489         nop                             ;Wait a cycle
  00000010            01490         count = count + 1
10D6   0808           01484         movf ADC_DATAPORT, W            ;Sample
10D7   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10D8   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10D9   0080           01487         movwf INDF                      ;Save to QUEUE
10DA   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10DB   0000           01489         nop                             ;Wait a cycle
  00000011            01490         count = count + 1
10DC   0808           01484         movf ADC_DATAPORT, W            ;Sample
10DD   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10DE   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10DF   0080           01487         movwf INDF                      ;Save to QUEUE
10E0   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10E1   0000           01489         nop                             ;Wait a cycle
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 131


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000012            01490         count = count + 1
10E2   0808           01484         movf ADC_DATAPORT, W            ;Sample
10E3   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10E4   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10E5   0080           01487         movwf INDF                      ;Save to QUEUE
10E6   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10E7   0000           01489         nop                             ;Wait a cycle
  00000013            01490         count = count + 1
10E8   0808           01484         movf ADC_DATAPORT, W            ;Sample
10E9   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10EA   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10EB   0080           01487         movwf INDF                      ;Save to QUEUE
10EC   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10ED   0000           01489         nop                             ;Wait a cycle
  00000014            01490         count = count + 1
10EE   0808           01484         movf ADC_DATAPORT, W            ;Sample
10EF   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10F0   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F1   0080           01487         movwf INDF                      ;Save to QUEUE
10F2   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10F3   0000           01489         nop                             ;Wait a cycle
  00000015            01490         count = count + 1
10F4   0808           01484         movf ADC_DATAPORT, W            ;Sample
10F5   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10F6   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10F7   0080           01487         movwf INDF                      ;Save to QUEUE
10F8   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10F9   0000           01489         nop                             ;Wait a cycle
  00000016            01490         count = count + 1
10FA   0808           01484         movf ADC_DATAPORT, W            ;Sample
10FB   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
10FC   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
10FD   0080           01487         movwf INDF                      ;Save to QUEUE
10FE   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
10FF   0000           01489         nop                             ;Wait a cycle
  00000017            01490         count = count + 1
1100   0808           01484         movf ADC_DATAPORT, W            ;Sample
1101   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1102   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1103   0080           01487         movwf INDF                      ;Save to QUEUE
1104   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1105   0000           01489         nop                             ;Wait a cycle
  00000018            01490         count = count + 1
1106   0808           01484         movf ADC_DATAPORT, W            ;Sample
1107   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1108   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1109   0080           01487         movwf INDF                      ;Save to QUEUE
110A   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
110B   0000           01489         nop                             ;Wait a cycle
  00000019            01490         count = count + 1
110C   0808           01484         movf ADC_DATAPORT, W            ;Sample
110D   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
110E   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 132


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

110F   0080           01487         movwf INDF                      ;Save to QUEUE
1110   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1111   0000           01489         nop                             ;Wait a cycle
  0000001A            01490         count = count + 1
1112   0808           01484         movf ADC_DATAPORT, W            ;Sample
1113   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1114   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1115   0080           01487         movwf INDF                      ;Save to QUEUE
1116   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1117   0000           01489         nop                             ;Wait a cycle
  0000001B            01490         count = count + 1
1118   0808           01484         movf ADC_DATAPORT, W            ;Sample
1119   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
111A   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
111B   0080           01487         movwf INDF                      ;Save to QUEUE
111C   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
111D   0000           01489         nop                             ;Wait a cycle
  0000001C            01490         count = count + 1
111E   0808           01484         movf ADC_DATAPORT, W            ;Sample
111F   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1120   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1121   0080           01487         movwf INDF                      ;Save to QUEUE
1122   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1123   0000           01489         nop                             ;Wait a cycle
  0000001D            01490         count = count + 1
1124   0808           01484         movf ADC_DATAPORT, W            ;Sample
1125   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1126   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1127   0080           01487         movwf INDF                      ;Save to QUEUE
1128   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1129   0000           01489         nop                             ;Wait a cycle
  0000001E            01490         count = count + 1
112A   0808           01484         movf ADC_DATAPORT, W            ;Sample
112B   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
112C   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
112D   0080           01487         movwf INDF                      ;Save to QUEUE
112E   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
112F   0000           01489         nop                             ;Wait a cycle
  0000001F            01490         count = count + 1
1130   0808           01484         movf ADC_DATAPORT, W            ;Sample
1131   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1132   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1133   0080           01487         movwf INDF                      ;Save to QUEUE
1134   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1135   0000           01489         nop                             ;Wait a cycle
  00000020            01490         count = count + 1
1136   0808           01484         movf ADC_DATAPORT, W            ;Sample
1137   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1138   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1139   0080           01487         movwf INDF                      ;Save to QUEUE
113A   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
113B   0000           01489         nop                             ;Wait a cycle
  00000021            01490         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 133


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

113C   0808           01484         movf ADC_DATAPORT, W            ;Sample
113D   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
113E   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
113F   0080           01487         movwf INDF                      ;Save to QUEUE
1140   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1141   0000           01489         nop                             ;Wait a cycle
  00000022            01490         count = count + 1
1142   0808           01484         movf ADC_DATAPORT, W            ;Sample
1143   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1144   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1145   0080           01487         movwf INDF                      ;Save to QUEUE
1146   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1147   0000           01489         nop                             ;Wait a cycle
  00000023            01490         count = count + 1
1148   0808           01484         movf ADC_DATAPORT, W            ;Sample
1149   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
114A   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
114B   0080           01487         movwf INDF                      ;Save to QUEUE
114C   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
114D   0000           01489         nop                             ;Wait a cycle
  00000024            01490         count = count + 1
114E   0808           01484         movf ADC_DATAPORT, W            ;Sample
114F   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1150   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1151   0080           01487         movwf INDF                      ;Save to QUEUE
1152   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1153   0000           01489         nop                             ;Wait a cycle
  00000025            01490         count = count + 1
1154   0808           01484         movf ADC_DATAPORT, W            ;Sample
1155   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1156   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1157   0080           01487         movwf INDF                      ;Save to QUEUE
1158   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1159   0000           01489         nop                             ;Wait a cycle
  00000026            01490         count = count + 1
115A   0808           01484         movf ADC_DATAPORT, W            ;Sample
115B   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
115C   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
115D   0080           01487         movwf INDF                      ;Save to QUEUE
115E   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
115F   0000           01489         nop                             ;Wait a cycle
  00000027            01490         count = count + 1
1160   0808           01484         movf ADC_DATAPORT, W            ;Sample
1161   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1162   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1163   0080           01487         movwf INDF                      ;Save to QUEUE
1164   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1165   0000           01489         nop                             ;Wait a cycle
  00000028            01490         count = count + 1
1166   0808           01484         movf ADC_DATAPORT, W            ;Sample
1167   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1168   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1169   0080           01487         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 134


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

116A   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
116B   0000           01489         nop                             ;Wait a cycle
  00000029            01490         count = count + 1
116C   0808           01484         movf ADC_DATAPORT, W            ;Sample
116D   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
116E   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
116F   0080           01487         movwf INDF                      ;Save to QUEUE
1170   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1171   0000           01489         nop                             ;Wait a cycle
  0000002A            01490         count = count + 1
1172   0808           01484         movf ADC_DATAPORT, W            ;Sample
1173   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1174   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1175   0080           01487         movwf INDF                      ;Save to QUEUE
1176   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1177   0000           01489         nop                             ;Wait a cycle
  0000002B            01490         count = count + 1
1178   0808           01484         movf ADC_DATAPORT, W            ;Sample
1179   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
117A   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
117B   0080           01487         movwf INDF                      ;Save to QUEUE
117C   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
117D   0000           01489         nop                             ;Wait a cycle
  0000002C            01490         count = count + 1
117E   0808           01484         movf ADC_DATAPORT, W            ;Sample
117F   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1180   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1181   0080           01487         movwf INDF                      ;Save to QUEUE
1182   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1183   0000           01489         nop                             ;Wait a cycle
  0000002D            01490         count = count + 1
1184   0808           01484         movf ADC_DATAPORT, W            ;Sample
1185   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1186   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1187   0080           01487         movwf INDF                      ;Save to QUEUE
1188   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1189   0000           01489         nop                             ;Wait a cycle
  0000002E            01490         count = count + 1
118A   0808           01484         movf ADC_DATAPORT, W            ;Sample
118B   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
118C   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
118D   0080           01487         movwf INDF                      ;Save to QUEUE
118E   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
118F   0000           01489         nop                             ;Wait a cycle
  0000002F            01490         count = count + 1
1190   0808           01484         movf ADC_DATAPORT, W            ;Sample
1191   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1192   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1193   0080           01487         movwf INDF                      ;Save to QUEUE
1194   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
1195   0000           01489         nop                             ;Wait a cycle
  00000030            01490         count = count + 1
1196   0808           01484         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 135


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1197   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1198   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1199   0080           01487         movwf INDF                      ;Save to QUEUE
119A   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
119B   0000           01489         nop                             ;Wait a cycle
  00000031            01490         count = count + 1
119C   0808           01484         movf ADC_DATAPORT, W            ;Sample
119D   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
119E   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
119F   0080           01487         movwf INDF                      ;Save to QUEUE
11A0   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11A1   0000           01489         nop                             ;Wait a cycle
  00000032            01490         count = count + 1
11A2   0808           01484         movf ADC_DATAPORT, W            ;Sample
11A3   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11A4   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11A5   0080           01487         movwf INDF                      ;Save to QUEUE
11A6   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11A7   0000           01489         nop                             ;Wait a cycle
  00000033            01490         count = count + 1
11A8   0808           01484         movf ADC_DATAPORT, W            ;Sample
11A9   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11AA   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11AB   0080           01487         movwf INDF                      ;Save to QUEUE
11AC   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11AD   0000           01489         nop                             ;Wait a cycle
  00000034            01490         count = count + 1
11AE   0808           01484         movf ADC_DATAPORT, W            ;Sample
11AF   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11B0   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B1   0080           01487         movwf INDF                      ;Save to QUEUE
11B2   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11B3   0000           01489         nop                             ;Wait a cycle
  00000035            01490         count = count + 1
11B4   0808           01484         movf ADC_DATAPORT, W            ;Sample
11B5   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11B6   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11B7   0080           01487         movwf INDF                      ;Save to QUEUE
11B8   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11B9   0000           01489         nop                             ;Wait a cycle
  00000036            01490         count = count + 1
11BA   0808           01484         movf ADC_DATAPORT, W            ;Sample
11BB   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11BC   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11BD   0080           01487         movwf INDF                      ;Save to QUEUE
11BE   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11BF   0000           01489         nop                             ;Wait a cycle
  00000037            01490         count = count + 1
11C0   0808           01484         movf ADC_DATAPORT, W            ;Sample
11C1   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C2   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C3   0080           01487         movwf INDF                      ;Save to QUEUE
11C4   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 136


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11C5   0000           01489         nop                             ;Wait a cycle
  00000038            01490         count = count + 1
11C6   0808           01484         movf ADC_DATAPORT, W            ;Sample
11C7   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11C8   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11C9   0080           01487         movwf INDF                      ;Save to QUEUE
11CA   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11CB   0000           01489         nop                             ;Wait a cycle
  00000039            01490         count = count + 1
11CC   0808           01484         movf ADC_DATAPORT, W            ;Sample
11CD   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11CE   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11CF   0080           01487         movwf INDF                      ;Save to QUEUE
11D0   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11D1   0000           01489         nop                             ;Wait a cycle
  0000003A            01490         count = count + 1
11D2   0808           01484         movf ADC_DATAPORT, W            ;Sample
11D3   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11D4   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11D5   0080           01487         movwf INDF                      ;Save to QUEUE
11D6   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11D7   0000           01489         nop                             ;Wait a cycle
  0000003B            01490         count = count + 1
11D8   0808           01484         movf ADC_DATAPORT, W            ;Sample
11D9   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11DA   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11DB   0080           01487         movwf INDF                      ;Save to QUEUE
11DC   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11DD   0000           01489         nop                             ;Wait a cycle
  0000003C            01490         count = count + 1
11DE   0808           01484         movf ADC_DATAPORT, W            ;Sample
11DF   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11E0   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E1   0080           01487         movwf INDF                      ;Save to QUEUE
11E2   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11E3   0000           01489         nop                             ;Wait a cycle
  0000003D            01490         count = count + 1
11E4   0808           01484         movf ADC_DATAPORT, W            ;Sample
11E5   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11E6   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11E7   0080           01487         movwf INDF                      ;Save to QUEUE
11E8   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11E9   0000           01489         nop                             ;Wait a cycle
  0000003E            01490         count = count + 1
11EA   0808           01484         movf ADC_DATAPORT, W            ;Sample
11EB   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11EC   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11ED   0080           01487         movwf INDF                      ;Save to QUEUE
11EE   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11EF   0000           01489         nop                             ;Wait a cycle
  0000003F            01490         count = count + 1
11F0   0808           01484         movf ADC_DATAPORT, W            ;Sample
11F1   1409           01485         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 137


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

11F2   1009           01486         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11F3   0080           01487         movwf INDF                      ;Save to QUEUE
11F4   0384           01488         decf FSR, F                     ;Increment QUEUE pointer
11F5   0000           01489         nop                             ;Wait a cycle
  00000040            01490         count = count + 1
                      01491     endw
11F6   0808           01492     movf ADC_DATAPORT, W
11F7   1409           01493     bsf ADC_CONTROLPORT, RDD
11F8   1009           01494     bcf ADC_CONTROLPORT, RDD
11F9   0080           01495     movwf INDF
11FA   1783           01496     bsf STATUS, IRP                                             ;goto bank 4
11FB   0000           01497     nop                                     ;Wait a cycle
  00000001            01498     count = 1
                      01499     while count < D'44'
11FC   0808           01500         movf ADC_DATAPORT, W            ;Sample
11FD   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
11FE   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
11FF   0080           01503         movwf INDF                      ;Save to QUEUE
1200   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1201   0000           01505         nop                             ;Wait a cycle
  00000002            01506         count = count + 1
1202   0808           01500         movf ADC_DATAPORT, W            ;Sample
1203   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1204   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1205   0080           01503         movwf INDF                      ;Save to QUEUE
1206   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1207   0000           01505         nop                             ;Wait a cycle
  00000003            01506         count = count + 1
1208   0808           01500         movf ADC_DATAPORT, W            ;Sample
1209   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
120A   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
120B   0080           01503         movwf INDF                      ;Save to QUEUE
120C   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
120D   0000           01505         nop                             ;Wait a cycle
  00000004            01506         count = count + 1
120E   0808           01500         movf ADC_DATAPORT, W            ;Sample
120F   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1210   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1211   0080           01503         movwf INDF                      ;Save to QUEUE
1212   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1213   0000           01505         nop                             ;Wait a cycle
  00000005            01506         count = count + 1
1214   0808           01500         movf ADC_DATAPORT, W            ;Sample
1215   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1216   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1217   0080           01503         movwf INDF                      ;Save to QUEUE
1218   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1219   0000           01505         nop                             ;Wait a cycle
  00000006            01506         count = count + 1
121A   0808           01500         movf ADC_DATAPORT, W            ;Sample
121B   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
121C   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
121D   0080           01503         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 138


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

121E   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
121F   0000           01505         nop                             ;Wait a cycle
  00000007            01506         count = count + 1
1220   0808           01500         movf ADC_DATAPORT, W            ;Sample
1221   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1222   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1223   0080           01503         movwf INDF                      ;Save to QUEUE
1224   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1225   0000           01505         nop                             ;Wait a cycle
  00000008            01506         count = count + 1
1226   0808           01500         movf ADC_DATAPORT, W            ;Sample
1227   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1228   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1229   0080           01503         movwf INDF                      ;Save to QUEUE
122A   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
122B   0000           01505         nop                             ;Wait a cycle
  00000009            01506         count = count + 1
122C   0808           01500         movf ADC_DATAPORT, W            ;Sample
122D   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
122E   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
122F   0080           01503         movwf INDF                      ;Save to QUEUE
1230   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1231   0000           01505         nop                             ;Wait a cycle
  0000000A            01506         count = count + 1
1232   0808           01500         movf ADC_DATAPORT, W            ;Sample
1233   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1234   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1235   0080           01503         movwf INDF                      ;Save to QUEUE
1236   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1237   0000           01505         nop                             ;Wait a cycle
  0000000B            01506         count = count + 1
1238   0808           01500         movf ADC_DATAPORT, W            ;Sample
1239   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
123A   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
123B   0080           01503         movwf INDF                      ;Save to QUEUE
123C   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
123D   0000           01505         nop                             ;Wait a cycle
  0000000C            01506         count = count + 1
123E   0808           01500         movf ADC_DATAPORT, W            ;Sample
123F   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1240   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1241   0080           01503         movwf INDF                      ;Save to QUEUE
1242   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1243   0000           01505         nop                             ;Wait a cycle
  0000000D            01506         count = count + 1
1244   0808           01500         movf ADC_DATAPORT, W            ;Sample
1245   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1246   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1247   0080           01503         movwf INDF                      ;Save to QUEUE
1248   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1249   0000           01505         nop                             ;Wait a cycle
  0000000E            01506         count = count + 1
124A   0808           01500         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 139


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

124B   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
124C   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
124D   0080           01503         movwf INDF                      ;Save to QUEUE
124E   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
124F   0000           01505         nop                             ;Wait a cycle
  0000000F            01506         count = count + 1
1250   0808           01500         movf ADC_DATAPORT, W            ;Sample
1251   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1252   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1253   0080           01503         movwf INDF                      ;Save to QUEUE
1254   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1255   0000           01505         nop                             ;Wait a cycle
  00000010            01506         count = count + 1
1256   0808           01500         movf ADC_DATAPORT, W            ;Sample
1257   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1258   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1259   0080           01503         movwf INDF                      ;Save to QUEUE
125A   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
125B   0000           01505         nop                             ;Wait a cycle
  00000011            01506         count = count + 1
125C   0808           01500         movf ADC_DATAPORT, W            ;Sample
125D   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
125E   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
125F   0080           01503         movwf INDF                      ;Save to QUEUE
1260   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1261   0000           01505         nop                             ;Wait a cycle
  00000012            01506         count = count + 1
1262   0808           01500         movf ADC_DATAPORT, W            ;Sample
1263   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1264   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1265   0080           01503         movwf INDF                      ;Save to QUEUE
1266   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1267   0000           01505         nop                             ;Wait a cycle
  00000013            01506         count = count + 1
1268   0808           01500         movf ADC_DATAPORT, W            ;Sample
1269   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
126A   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
126B   0080           01503         movwf INDF                      ;Save to QUEUE
126C   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
126D   0000           01505         nop                             ;Wait a cycle
  00000014            01506         count = count + 1
126E   0808           01500         movf ADC_DATAPORT, W            ;Sample
126F   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1270   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1271   0080           01503         movwf INDF                      ;Save to QUEUE
1272   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1273   0000           01505         nop                             ;Wait a cycle
  00000015            01506         count = count + 1
1274   0808           01500         movf ADC_DATAPORT, W            ;Sample
1275   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1276   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1277   0080           01503         movwf INDF                      ;Save to QUEUE
1278   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 140


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1279   0000           01505         nop                             ;Wait a cycle
  00000016            01506         count = count + 1
127A   0808           01500         movf ADC_DATAPORT, W            ;Sample
127B   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
127C   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
127D   0080           01503         movwf INDF                      ;Save to QUEUE
127E   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
127F   0000           01505         nop                             ;Wait a cycle
  00000017            01506         count = count + 1
1280   0808           01500         movf ADC_DATAPORT, W            ;Sample
1281   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1282   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1283   0080           01503         movwf INDF                      ;Save to QUEUE
1284   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1285   0000           01505         nop                             ;Wait a cycle
  00000018            01506         count = count + 1
1286   0808           01500         movf ADC_DATAPORT, W            ;Sample
1287   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1288   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1289   0080           01503         movwf INDF                      ;Save to QUEUE
128A   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
128B   0000           01505         nop                             ;Wait a cycle
  00000019            01506         count = count + 1
128C   0808           01500         movf ADC_DATAPORT, W            ;Sample
128D   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
128E   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
128F   0080           01503         movwf INDF                      ;Save to QUEUE
1290   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1291   0000           01505         nop                             ;Wait a cycle
  0000001A            01506         count = count + 1
1292   0808           01500         movf ADC_DATAPORT, W            ;Sample
1293   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1294   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1295   0080           01503         movwf INDF                      ;Save to QUEUE
1296   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
1297   0000           01505         nop                             ;Wait a cycle
  0000001B            01506         count = count + 1
1298   0808           01500         movf ADC_DATAPORT, W            ;Sample
1299   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
129A   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
129B   0080           01503         movwf INDF                      ;Save to QUEUE
129C   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
129D   0000           01505         nop                             ;Wait a cycle
  0000001C            01506         count = count + 1
129E   0808           01500         movf ADC_DATAPORT, W            ;Sample
129F   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12A0   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A1   0080           01503         movwf INDF                      ;Save to QUEUE
12A2   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12A3   0000           01505         nop                             ;Wait a cycle
  0000001D            01506         count = count + 1
12A4   0808           01500         movf ADC_DATAPORT, W            ;Sample
12A5   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 141


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12A6   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12A7   0080           01503         movwf INDF                      ;Save to QUEUE
12A8   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12A9   0000           01505         nop                             ;Wait a cycle
  0000001E            01506         count = count + 1
12AA   0808           01500         movf ADC_DATAPORT, W            ;Sample
12AB   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12AC   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12AD   0080           01503         movwf INDF                      ;Save to QUEUE
12AE   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12AF   0000           01505         nop                             ;Wait a cycle
  0000001F            01506         count = count + 1
12B0   0808           01500         movf ADC_DATAPORT, W            ;Sample
12B1   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B2   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B3   0080           01503         movwf INDF                      ;Save to QUEUE
12B4   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12B5   0000           01505         nop                             ;Wait a cycle
  00000020            01506         count = count + 1
12B6   0808           01500         movf ADC_DATAPORT, W            ;Sample
12B7   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12B8   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12B9   0080           01503         movwf INDF                      ;Save to QUEUE
12BA   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12BB   0000           01505         nop                             ;Wait a cycle
  00000021            01506         count = count + 1
12BC   0808           01500         movf ADC_DATAPORT, W            ;Sample
12BD   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12BE   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12BF   0080           01503         movwf INDF                      ;Save to QUEUE
12C0   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12C1   0000           01505         nop                             ;Wait a cycle
  00000022            01506         count = count + 1
12C2   0808           01500         movf ADC_DATAPORT, W            ;Sample
12C3   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12C4   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12C5   0080           01503         movwf INDF                      ;Save to QUEUE
12C6   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12C7   0000           01505         nop                             ;Wait a cycle
  00000023            01506         count = count + 1
12C8   0808           01500         movf ADC_DATAPORT, W            ;Sample
12C9   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12CA   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12CB   0080           01503         movwf INDF                      ;Save to QUEUE
12CC   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12CD   0000           01505         nop                             ;Wait a cycle
  00000024            01506         count = count + 1
12CE   0808           01500         movf ADC_DATAPORT, W            ;Sample
12CF   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12D0   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D1   0080           01503         movwf INDF                      ;Save to QUEUE
12D2   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12D3   0000           01505         nop                             ;Wait a cycle
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 142


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000025            01506         count = count + 1
12D4   0808           01500         movf ADC_DATAPORT, W            ;Sample
12D5   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12D6   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12D7   0080           01503         movwf INDF                      ;Save to QUEUE
12D8   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12D9   0000           01505         nop                             ;Wait a cycle
  00000026            01506         count = count + 1
12DA   0808           01500         movf ADC_DATAPORT, W            ;Sample
12DB   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12DC   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12DD   0080           01503         movwf INDF                      ;Save to QUEUE
12DE   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12DF   0000           01505         nop                             ;Wait a cycle
  00000027            01506         count = count + 1
12E0   0808           01500         movf ADC_DATAPORT, W            ;Sample
12E1   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E2   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E3   0080           01503         movwf INDF                      ;Save to QUEUE
12E4   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12E5   0000           01505         nop                             ;Wait a cycle
  00000028            01506         count = count + 1
12E6   0808           01500         movf ADC_DATAPORT, W            ;Sample
12E7   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12E8   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12E9   0080           01503         movwf INDF                      ;Save to QUEUE
12EA   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12EB   0000           01505         nop                             ;Wait a cycle
  00000029            01506         count = count + 1
12EC   0808           01500         movf ADC_DATAPORT, W            ;Sample
12ED   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12EE   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12EF   0080           01503         movwf INDF                      ;Save to QUEUE
12F0   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12F1   0000           01505         nop                             ;Wait a cycle
  0000002A            01506         count = count + 1
12F2   0808           01500         movf ADC_DATAPORT, W            ;Sample
12F3   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12F4   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12F5   0080           01503         movwf INDF                      ;Save to QUEUE
12F6   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12F7   0000           01505         nop                             ;Wait a cycle
  0000002B            01506         count = count + 1
12F8   0808           01500         movf ADC_DATAPORT, W            ;Sample
12F9   1409           01501         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
12FA   1009           01502         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
12FB   0080           01503         movwf INDF                      ;Save to QUEUE
12FC   0A84           01504         incf FSR, F                     ;Increment QUEUE pointer
12FD   0000           01505         nop                             ;Wait a cycle
  0000002C            01506         count = count + 1
                      01507     endw
12FE                  01508 Sample833kEnd
                      01509     while count < BUFFERSIZE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 143


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

12FE   0808           01510         movf ADC_DATAPORT, W            ;Sample
12FF   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1300   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1301   0080           01513         movwf INDF                      ;Save to QUEUE
1302   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1303   0000           01515         nop                             ;Wait a cycle
  0000002D            01516         count = count + 1
1304   0808           01510         movf ADC_DATAPORT, W            ;Sample
1305   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1306   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1307   0080           01513         movwf INDF                      ;Save to QUEUE
1308   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1309   0000           01515         nop                             ;Wait a cycle
  0000002E            01516         count = count + 1
130A   0808           01510         movf ADC_DATAPORT, W            ;Sample
130B   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
130C   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
130D   0080           01513         movwf INDF                      ;Save to QUEUE
130E   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
130F   0000           01515         nop                             ;Wait a cycle
  0000002F            01516         count = count + 1
1310   0808           01510         movf ADC_DATAPORT, W            ;Sample
1311   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1312   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1313   0080           01513         movwf INDF                      ;Save to QUEUE
1314   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1315   0000           01515         nop                             ;Wait a cycle
  00000030            01516         count = count + 1
1316   0808           01510         movf ADC_DATAPORT, W            ;Sample
1317   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1318   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1319   0080           01513         movwf INDF                      ;Save to QUEUE
131A   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
131B   0000           01515         nop                             ;Wait a cycle
  00000031            01516         count = count + 1
131C   0808           01510         movf ADC_DATAPORT, W            ;Sample
131D   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
131E   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
131F   0080           01513         movwf INDF                      ;Save to QUEUE
1320   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1321   0000           01515         nop                             ;Wait a cycle
  00000032            01516         count = count + 1
1322   0808           01510         movf ADC_DATAPORT, W            ;Sample
1323   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1324   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1325   0080           01513         movwf INDF                      ;Save to QUEUE
1326   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1327   0000           01515         nop                             ;Wait a cycle
  00000033            01516         count = count + 1
1328   0808           01510         movf ADC_DATAPORT, W            ;Sample
1329   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
132A   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
132B   0080           01513         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 144


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

132C   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
132D   0000           01515         nop                             ;Wait a cycle
  00000034            01516         count = count + 1
132E   0808           01510         movf ADC_DATAPORT, W            ;Sample
132F   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1330   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1331   0080           01513         movwf INDF                      ;Save to QUEUE
1332   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1333   0000           01515         nop                             ;Wait a cycle
  00000035            01516         count = count + 1
1334   0808           01510         movf ADC_DATAPORT, W            ;Sample
1335   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1336   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1337   0080           01513         movwf INDF                      ;Save to QUEUE
1338   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1339   0000           01515         nop                             ;Wait a cycle
  00000036            01516         count = count + 1
133A   0808           01510         movf ADC_DATAPORT, W            ;Sample
133B   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
133C   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
133D   0080           01513         movwf INDF                      ;Save to QUEUE
133E   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
133F   0000           01515         nop                             ;Wait a cycle
  00000037            01516         count = count + 1
1340   0808           01510         movf ADC_DATAPORT, W            ;Sample
1341   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1342   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1343   0080           01513         movwf INDF                      ;Save to QUEUE
1344   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1345   0000           01515         nop                             ;Wait a cycle
  00000038            01516         count = count + 1
1346   0808           01510         movf ADC_DATAPORT, W            ;Sample
1347   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1348   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1349   0080           01513         movwf INDF                      ;Save to QUEUE
134A   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
134B   0000           01515         nop                             ;Wait a cycle
  00000039            01516         count = count + 1
134C   0808           01510         movf ADC_DATAPORT, W            ;Sample
134D   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
134E   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
134F   0080           01513         movwf INDF                      ;Save to QUEUE
1350   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1351   0000           01515         nop                             ;Wait a cycle
  0000003A            01516         count = count + 1
1352   0808           01510         movf ADC_DATAPORT, W            ;Sample
1353   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1354   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1355   0080           01513         movwf INDF                      ;Save to QUEUE
1356   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1357   0000           01515         nop                             ;Wait a cycle
  0000003B            01516         count = count + 1
1358   0808           01510         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 145


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1359   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
135A   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
135B   0080           01513         movwf INDF                      ;Save to QUEUE
135C   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
135D   0000           01515         nop                             ;Wait a cycle
  0000003C            01516         count = count + 1
135E   0808           01510         movf ADC_DATAPORT, W            ;Sample
135F   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1360   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1361   0080           01513         movwf INDF                      ;Save to QUEUE
1362   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1363   0000           01515         nop                             ;Wait a cycle
  0000003D            01516         count = count + 1
1364   0808           01510         movf ADC_DATAPORT, W            ;Sample
1365   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1366   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1367   0080           01513         movwf INDF                      ;Save to QUEUE
1368   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1369   0000           01515         nop                             ;Wait a cycle
  0000003E            01516         count = count + 1
136A   0808           01510         movf ADC_DATAPORT, W            ;Sample
136B   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
136C   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
136D   0080           01513         movwf INDF                      ;Save to QUEUE
136E   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
136F   0000           01515         nop                             ;Wait a cycle
  0000003F            01516         count = count + 1
1370   0808           01510         movf ADC_DATAPORT, W            ;Sample
1371   1409           01511         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1372   1009           01512         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1373   0080           01513         movwf INDF                      ;Save to QUEUE
1374   0A84           01514         incf FSR, F                     ;Increment QUEUE pointer
1375   0000           01515         nop                             ;Wait a cycle
  00000040            01516         count = count + 1
                      01517     endw
1376   0808           01518     movf ADC_DATAPORT, W
1377   1409           01519     bsf ADC_CONTROLPORT, RDD
1378   1009           01520     bcf ADC_CONTROLPORT, RDD
1379   0080           01521     movwf INDF
137A   1384           01522     bcf FSR, 7                                                  ;goto bank 3
137B   0000           01523     nop                                     ;Wait a cycle
  00000001            01524     count = 1
                      01525     while count < BUFFERSIZE
137C   0808           01526         movf ADC_DATAPORT, W            ;Sample
137D   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
137E   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
137F   0080           01529         movwf INDF                      ;Save to QUEUE
1380   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1381   0000           01531         nop                             ;Wait a cycle
  00000002            01532         count = count + 1
1382   0808           01526         movf ADC_DATAPORT, W            ;Sample
1383   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1384   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 146


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1385   0080           01529         movwf INDF                      ;Save to QUEUE
1386   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1387   0000           01531         nop                             ;Wait a cycle
  00000003            01532         count = count + 1
1388   0808           01526         movf ADC_DATAPORT, W            ;Sample
1389   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
138A   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
138B   0080           01529         movwf INDF                      ;Save to QUEUE
138C   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
138D   0000           01531         nop                             ;Wait a cycle
  00000004            01532         count = count + 1
138E   0808           01526         movf ADC_DATAPORT, W            ;Sample
138F   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1390   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1391   0080           01529         movwf INDF                      ;Save to QUEUE
1392   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1393   0000           01531         nop                             ;Wait a cycle
  00000005            01532         count = count + 1
1394   0808           01526         movf ADC_DATAPORT, W            ;Sample
1395   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1396   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1397   0080           01529         movwf INDF                      ;Save to QUEUE
1398   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1399   0000           01531         nop                             ;Wait a cycle
  00000006            01532         count = count + 1
139A   0808           01526         movf ADC_DATAPORT, W            ;Sample
139B   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
139C   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
139D   0080           01529         movwf INDF                      ;Save to QUEUE
139E   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
139F   0000           01531         nop                             ;Wait a cycle
  00000007            01532         count = count + 1
13A0   0808           01526         movf ADC_DATAPORT, W            ;Sample
13A1   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A2   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13A3   0080           01529         movwf INDF                      ;Save to QUEUE
13A4   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13A5   0000           01531         nop                             ;Wait a cycle
  00000008            01532         count = count + 1
13A6   0808           01526         movf ADC_DATAPORT, W            ;Sample
13A7   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13A8   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13A9   0080           01529         movwf INDF                      ;Save to QUEUE
13AA   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13AB   0000           01531         nop                             ;Wait a cycle
  00000009            01532         count = count + 1
13AC   0808           01526         movf ADC_DATAPORT, W            ;Sample
13AD   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13AE   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13AF   0080           01529         movwf INDF                      ;Save to QUEUE
13B0   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13B1   0000           01531         nop                             ;Wait a cycle
  0000000A            01532         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 147


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13B2   0808           01526         movf ADC_DATAPORT, W            ;Sample
13B3   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13B4   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13B5   0080           01529         movwf INDF                      ;Save to QUEUE
13B6   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13B7   0000           01531         nop                             ;Wait a cycle
  0000000B            01532         count = count + 1
13B8   0808           01526         movf ADC_DATAPORT, W            ;Sample
13B9   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13BA   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13BB   0080           01529         movwf INDF                      ;Save to QUEUE
13BC   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13BD   0000           01531         nop                             ;Wait a cycle
  0000000C            01532         count = count + 1
13BE   0808           01526         movf ADC_DATAPORT, W            ;Sample
13BF   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13C0   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C1   0080           01529         movwf INDF                      ;Save to QUEUE
13C2   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13C3   0000           01531         nop                             ;Wait a cycle
  0000000D            01532         count = count + 1
13C4   0808           01526         movf ADC_DATAPORT, W            ;Sample
13C5   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13C6   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13C7   0080           01529         movwf INDF                      ;Save to QUEUE
13C8   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13C9   0000           01531         nop                             ;Wait a cycle
  0000000E            01532         count = count + 1
13CA   0808           01526         movf ADC_DATAPORT, W            ;Sample
13CB   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13CC   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13CD   0080           01529         movwf INDF                      ;Save to QUEUE
13CE   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13CF   0000           01531         nop                             ;Wait a cycle
  0000000F            01532         count = count + 1
13D0   0808           01526         movf ADC_DATAPORT, W            ;Sample
13D1   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D2   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D3   0080           01529         movwf INDF                      ;Save to QUEUE
13D4   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13D5   0000           01531         nop                             ;Wait a cycle
  00000010            01532         count = count + 1
13D6   0808           01526         movf ADC_DATAPORT, W            ;Sample
13D7   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13D8   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13D9   0080           01529         movwf INDF                      ;Save to QUEUE
13DA   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13DB   0000           01531         nop                             ;Wait a cycle
  00000011            01532         count = count + 1
13DC   0808           01526         movf ADC_DATAPORT, W            ;Sample
13DD   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13DE   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13DF   0080           01529         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 148


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

13E0   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13E1   0000           01531         nop                             ;Wait a cycle
  00000012            01532         count = count + 1
13E2   0808           01526         movf ADC_DATAPORT, W            ;Sample
13E3   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13E4   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13E5   0080           01529         movwf INDF                      ;Save to QUEUE
13E6   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13E7   0000           01531         nop                             ;Wait a cycle
  00000013            01532         count = count + 1
13E8   0808           01526         movf ADC_DATAPORT, W            ;Sample
13E9   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13EA   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13EB   0080           01529         movwf INDF                      ;Save to QUEUE
13EC   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13ED   0000           01531         nop                             ;Wait a cycle
  00000014            01532         count = count + 1
13EE   0808           01526         movf ADC_DATAPORT, W            ;Sample
13EF   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13F0   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F1   0080           01529         movwf INDF                      ;Save to QUEUE
13F2   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13F3   0000           01531         nop                             ;Wait a cycle
  00000015            01532         count = count + 1
13F4   0808           01526         movf ADC_DATAPORT, W            ;Sample
13F5   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13F6   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13F7   0080           01529         movwf INDF                      ;Save to QUEUE
13F8   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13F9   0000           01531         nop                             ;Wait a cycle
  00000016            01532         count = count + 1
13FA   0808           01526         movf ADC_DATAPORT, W            ;Sample
13FB   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
13FC   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
13FD   0080           01529         movwf INDF                      ;Save to QUEUE
13FE   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
13FF   0000           01531         nop                             ;Wait a cycle
  00000017            01532         count = count + 1
1400   0808           01526         movf ADC_DATAPORT, W            ;Sample
1401   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1402   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1403   0080           01529         movwf INDF                      ;Save to QUEUE
1404   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1405   0000           01531         nop                             ;Wait a cycle
  00000018            01532         count = count + 1
1406   0808           01526         movf ADC_DATAPORT, W            ;Sample
1407   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1408   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1409   0080           01529         movwf INDF                      ;Save to QUEUE
140A   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
140B   0000           01531         nop                             ;Wait a cycle
  00000019            01532         count = count + 1
140C   0808           01526         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 149


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

140D   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
140E   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
140F   0080           01529         movwf INDF                      ;Save to QUEUE
1410   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1411   0000           01531         nop                             ;Wait a cycle
  0000001A            01532         count = count + 1
1412   0808           01526         movf ADC_DATAPORT, W            ;Sample
1413   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1414   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1415   0080           01529         movwf INDF                      ;Save to QUEUE
1416   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1417   0000           01531         nop                             ;Wait a cycle
  0000001B            01532         count = count + 1
1418   0808           01526         movf ADC_DATAPORT, W            ;Sample
1419   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
141A   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
141B   0080           01529         movwf INDF                      ;Save to QUEUE
141C   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
141D   0000           01531         nop                             ;Wait a cycle
  0000001C            01532         count = count + 1
141E   0808           01526         movf ADC_DATAPORT, W            ;Sample
141F   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1420   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1421   0080           01529         movwf INDF                      ;Save to QUEUE
1422   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1423   0000           01531         nop                             ;Wait a cycle
  0000001D            01532         count = count + 1
1424   0808           01526         movf ADC_DATAPORT, W            ;Sample
1425   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1426   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1427   0080           01529         movwf INDF                      ;Save to QUEUE
1428   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1429   0000           01531         nop                             ;Wait a cycle
  0000001E            01532         count = count + 1
142A   0808           01526         movf ADC_DATAPORT, W            ;Sample
142B   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
142C   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
142D   0080           01529         movwf INDF                      ;Save to QUEUE
142E   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
142F   0000           01531         nop                             ;Wait a cycle
  0000001F            01532         count = count + 1
1430   0808           01526         movf ADC_DATAPORT, W            ;Sample
1431   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1432   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1433   0080           01529         movwf INDF                      ;Save to QUEUE
1434   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1435   0000           01531         nop                             ;Wait a cycle
  00000020            01532         count = count + 1
1436   0808           01526         movf ADC_DATAPORT, W            ;Sample
1437   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1438   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1439   0080           01529         movwf INDF                      ;Save to QUEUE
143A   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 150


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

143B   0000           01531         nop                             ;Wait a cycle
  00000021            01532         count = count + 1
143C   0808           01526         movf ADC_DATAPORT, W            ;Sample
143D   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
143E   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
143F   0080           01529         movwf INDF                      ;Save to QUEUE
1440   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1441   0000           01531         nop                             ;Wait a cycle
  00000022            01532         count = count + 1
1442   0808           01526         movf ADC_DATAPORT, W            ;Sample
1443   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1444   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1445   0080           01529         movwf INDF                      ;Save to QUEUE
1446   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1447   0000           01531         nop                             ;Wait a cycle
  00000023            01532         count = count + 1
1448   0808           01526         movf ADC_DATAPORT, W            ;Sample
1449   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
144A   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
144B   0080           01529         movwf INDF                      ;Save to QUEUE
144C   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
144D   0000           01531         nop                             ;Wait a cycle
  00000024            01532         count = count + 1
144E   0808           01526         movf ADC_DATAPORT, W            ;Sample
144F   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1450   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1451   0080           01529         movwf INDF                      ;Save to QUEUE
1452   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1453   0000           01531         nop                             ;Wait a cycle
  00000025            01532         count = count + 1
1454   0808           01526         movf ADC_DATAPORT, W            ;Sample
1455   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1456   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1457   0080           01529         movwf INDF                      ;Save to QUEUE
1458   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1459   0000           01531         nop                             ;Wait a cycle
  00000026            01532         count = count + 1
145A   0808           01526         movf ADC_DATAPORT, W            ;Sample
145B   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
145C   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
145D   0080           01529         movwf INDF                      ;Save to QUEUE
145E   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
145F   0000           01531         nop                             ;Wait a cycle
  00000027            01532         count = count + 1
1460   0808           01526         movf ADC_DATAPORT, W            ;Sample
1461   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1462   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1463   0080           01529         movwf INDF                      ;Save to QUEUE
1464   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1465   0000           01531         nop                             ;Wait a cycle
  00000028            01532         count = count + 1
1466   0808           01526         movf ADC_DATAPORT, W            ;Sample
1467   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 151


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1468   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1469   0080           01529         movwf INDF                      ;Save to QUEUE
146A   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
146B   0000           01531         nop                             ;Wait a cycle
  00000029            01532         count = count + 1
146C   0808           01526         movf ADC_DATAPORT, W            ;Sample
146D   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
146E   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
146F   0080           01529         movwf INDF                      ;Save to QUEUE
1470   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1471   0000           01531         nop                             ;Wait a cycle
  0000002A            01532         count = count + 1
1472   0808           01526         movf ADC_DATAPORT, W            ;Sample
1473   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1474   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1475   0080           01529         movwf INDF                      ;Save to QUEUE
1476   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1477   0000           01531         nop                             ;Wait a cycle
  0000002B            01532         count = count + 1
1478   0808           01526         movf ADC_DATAPORT, W            ;Sample
1479   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
147A   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
147B   0080           01529         movwf INDF                      ;Save to QUEUE
147C   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
147D   0000           01531         nop                             ;Wait a cycle
  0000002C            01532         count = count + 1
147E   0808           01526         movf ADC_DATAPORT, W            ;Sample
147F   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1480   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1481   0080           01529         movwf INDF                      ;Save to QUEUE
1482   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1483   0000           01531         nop                             ;Wait a cycle
  0000002D            01532         count = count + 1
1484   0808           01526         movf ADC_DATAPORT, W            ;Sample
1485   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1486   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1487   0080           01529         movwf INDF                      ;Save to QUEUE
1488   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1489   0000           01531         nop                             ;Wait a cycle
  0000002E            01532         count = count + 1
148A   0808           01526         movf ADC_DATAPORT, W            ;Sample
148B   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
148C   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
148D   0080           01529         movwf INDF                      ;Save to QUEUE
148E   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
148F   0000           01531         nop                             ;Wait a cycle
  0000002F            01532         count = count + 1
1490   0808           01526         movf ADC_DATAPORT, W            ;Sample
1491   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1492   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1493   0080           01529         movwf INDF                      ;Save to QUEUE
1494   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
1495   0000           01531         nop                             ;Wait a cycle
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 152


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000030            01532         count = count + 1
1496   0808           01526         movf ADC_DATAPORT, W            ;Sample
1497   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1498   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1499   0080           01529         movwf INDF                      ;Save to QUEUE
149A   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
149B   0000           01531         nop                             ;Wait a cycle
  00000031            01532         count = count + 1
149C   0808           01526         movf ADC_DATAPORT, W            ;Sample
149D   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
149E   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
149F   0080           01529         movwf INDF                      ;Save to QUEUE
14A0   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14A1   0000           01531         nop                             ;Wait a cycle
  00000032            01532         count = count + 1
14A2   0808           01526         movf ADC_DATAPORT, W            ;Sample
14A3   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14A4   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14A5   0080           01529         movwf INDF                      ;Save to QUEUE
14A6   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14A7   0000           01531         nop                             ;Wait a cycle
  00000033            01532         count = count + 1
14A8   0808           01526         movf ADC_DATAPORT, W            ;Sample
14A9   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14AA   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14AB   0080           01529         movwf INDF                      ;Save to QUEUE
14AC   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14AD   0000           01531         nop                             ;Wait a cycle
  00000034            01532         count = count + 1
14AE   0808           01526         movf ADC_DATAPORT, W            ;Sample
14AF   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14B0   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B1   0080           01529         movwf INDF                      ;Save to QUEUE
14B2   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14B3   0000           01531         nop                             ;Wait a cycle
  00000035            01532         count = count + 1
14B4   0808           01526         movf ADC_DATAPORT, W            ;Sample
14B5   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14B6   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14B7   0080           01529         movwf INDF                      ;Save to QUEUE
14B8   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14B9   0000           01531         nop                             ;Wait a cycle
  00000036            01532         count = count + 1
14BA   0808           01526         movf ADC_DATAPORT, W            ;Sample
14BB   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14BC   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14BD   0080           01529         movwf INDF                      ;Save to QUEUE
14BE   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14BF   0000           01531         nop                             ;Wait a cycle
  00000037            01532         count = count + 1
14C0   0808           01526         movf ADC_DATAPORT, W            ;Sample
14C1   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14C2   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 153


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

14C3   0080           01529         movwf INDF                      ;Save to QUEUE
14C4   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14C5   0000           01531         nop                             ;Wait a cycle
  00000038            01532         count = count + 1
14C6   0808           01526         movf ADC_DATAPORT, W            ;Sample
14C7   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14C8   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14C9   0080           01529         movwf INDF                      ;Save to QUEUE
14CA   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14CB   0000           01531         nop                             ;Wait a cycle
  00000039            01532         count = count + 1
14CC   0808           01526         movf ADC_DATAPORT, W            ;Sample
14CD   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14CE   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14CF   0080           01529         movwf INDF                      ;Save to QUEUE
14D0   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14D1   0000           01531         nop                             ;Wait a cycle
  0000003A            01532         count = count + 1
14D2   0808           01526         movf ADC_DATAPORT, W            ;Sample
14D3   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14D4   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14D5   0080           01529         movwf INDF                      ;Save to QUEUE
14D6   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14D7   0000           01531         nop                             ;Wait a cycle
  0000003B            01532         count = count + 1
14D8   0808           01526         movf ADC_DATAPORT, W            ;Sample
14D9   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14DA   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14DB   0080           01529         movwf INDF                      ;Save to QUEUE
14DC   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14DD   0000           01531         nop                             ;Wait a cycle
  0000003C            01532         count = count + 1
14DE   0808           01526         movf ADC_DATAPORT, W            ;Sample
14DF   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14E0   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14E1   0080           01529         movwf INDF                      ;Save to QUEUE
14E2   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14E3   0000           01531         nop                             ;Wait a cycle
  0000003D            01532         count = count + 1
14E4   0808           01526         movf ADC_DATAPORT, W            ;Sample
14E5   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14E6   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14E7   0080           01529         movwf INDF                      ;Save to QUEUE
14E8   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14E9   0000           01531         nop                             ;Wait a cycle
  0000003E            01532         count = count + 1
14EA   0808           01526         movf ADC_DATAPORT, W            ;Sample
14EB   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14EC   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14ED   0080           01529         movwf INDF                      ;Save to QUEUE
14EE   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14EF   0000           01531         nop                             ;Wait a cycle
  0000003F            01532         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 154


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

14F0   0808           01526         movf ADC_DATAPORT, W            ;Sample
14F1   1409           01527         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
14F2   1009           01528         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
14F3   0080           01529         movwf INDF                      ;Save to QUEUE
14F4   0384           01530         decf FSR, F                     ;Increment QUEUE pointer
14F5   0000           01531         nop                             ;Wait a cycle
  00000040            01532         count = count + 1
                      01533     endw
14F6   0808           01534     movf ADC_DATAPORT, W                ;Last sample
14F7   1409           01535     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
14F8   118A           01536     bcf PCLATH, 3                                               ;insure correct program memory page
14F9   120A           01537     bcf PCLATH, 4
Message[306]: Crossing page boundary -- ensure page bits are set.
14FA   2970           01538     goto ADCShutdown
                      01539 
                      01540 ;Repetative sample
                      01541 ;Equivalent sampling rate = 5 MHz with 20 MHz clock
                      01542 ;-----------------------------------------------------------------------------
14FB                  01543 SampleRep5M
14FB   3014           01544     movlw high SampleRep5MPickSt
14FC   008A           01545     movwf PCLATH
14FD   087A           01546         movf modetempb, w
14FE   0782           01547         addwf PCL, f
14FF                  01548 SampleRep5MPickSt
                      01549         MGOTO SampleRep5MStep1
                          M         if (SampleRep5MStep1 & (0x1000))
14FF   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep1 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1500   118A               M                 bcf PCLATH, 3
                          M         endif
1501   2D0E               M         goto SampleRep5MStep1
                      01550         MGOTO SampleRep5MStep2
                          M         if (SampleRep5MStep2 & (0x1000))
1502   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep2 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1503   118A               M                 bcf PCLATH, 3
                          M         endif
1504   2E1E               M         goto SampleRep5MStep2
                      01551         MGOTO SampleRep5MStep3
                          M         if (SampleRep5MStep3 & (0x1000))
1505   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 155


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M         endif
                          M         if (SampleRep5MStep3 & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1506   118A               M                 bcf PCLATH, 3
                          M         endif
1507   2F21               M         goto SampleRep5MStep3
                      01552         MGOTO SampleRep5MStep4
                          M         if (SampleRep5MStep4 & (0x1000))
1508   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep4 & (0x800))
1509   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
150A   2824               M         goto SampleRep5MStep4
                      01553         MGOTO SampleRep5MStep5
                          M         if (SampleRep5MStep5 & (0x1000))
150B   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MStep5 & (0x800))
150C   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
150D   2928               M         goto SampleRep5MStep5
150E                  01554 SampleRep5MPickEn
150E                  01555 SampleRep5MStep1
150E   1009           01556     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01557     MOVLF BUFFERMIN, FSR                ;Initialize pointer
150F   3020               M     movlw BUFFERMIN
1510   0084               M     movwf FSR
1511   0000           01558         nop
  0000                01559     local count
  00000001            01560     count = 1
                      01561     while count < D'52'
1512   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1513   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1514   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1515   0080           01565         movwf INDF                      ;Save to QUEUE
1516   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01567         count = count + 1
1517   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1518   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1519   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
151A   0080           01565         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 156


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

151B   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01567         count = count + 1
151C   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
151D   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
151E   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
151F   0080           01565         movwf INDF                      ;Save to QUEUE
1520   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01567         count = count + 1
1521   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1522   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1523   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1524   0080           01565         movwf INDF                      ;Save to QUEUE
1525   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01567         count = count + 1
1526   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1527   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1528   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1529   0080           01565         movwf INDF                      ;Save to QUEUE
152A   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01567         count = count + 1
152B   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
152C   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
152D   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
152E   0080           01565         movwf INDF                      ;Save to QUEUE
152F   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01567         count = count + 1
1530   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1531   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1532   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1533   0080           01565         movwf INDF                      ;Save to QUEUE
1534   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01567         count = count + 1
1535   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1536   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1537   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1538   0080           01565         movwf INDF                      ;Save to QUEUE
1539   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01567         count = count + 1
153A   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
153B   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
153C   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
153D   0080           01565         movwf INDF                      ;Save to QUEUE
153E   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01567         count = count + 1
153F   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1540   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1541   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1542   0080           01565         movwf INDF                      ;Save to QUEUE
1543   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01567         count = count + 1
1544   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1545   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1546   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 157


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1547   0080           01565         movwf INDF                      ;Save to QUEUE
1548   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01567         count = count + 1
1549   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
154A   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
154B   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
154C   0080           01565         movwf INDF                      ;Save to QUEUE
154D   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01567         count = count + 1
154E   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
154F   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1550   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1551   0080           01565         movwf INDF                      ;Save to QUEUE
1552   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01567         count = count + 1
1553   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1554   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1555   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1556   0080           01565         movwf INDF                      ;Save to QUEUE
1557   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01567         count = count + 1
1558   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1559   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
155A   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
155B   0080           01565         movwf INDF                      ;Save to QUEUE
155C   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01567         count = count + 1
155D   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
155E   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
155F   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1560   0080           01565         movwf INDF                      ;Save to QUEUE
1561   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01567         count = count + 1
1562   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1563   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1564   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1565   0080           01565         movwf INDF                      ;Save to QUEUE
1566   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01567         count = count + 1
1567   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1568   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1569   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
156A   0080           01565         movwf INDF                      ;Save to QUEUE
156B   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01567         count = count + 1
156C   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
156D   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
156E   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
156F   0080           01565         movwf INDF                      ;Save to QUEUE
1570   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01567         count = count + 1
1571   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1572   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 158


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1573   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1574   0080           01565         movwf INDF                      ;Save to QUEUE
1575   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01567         count = count + 1
1576   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1577   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1578   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1579   0080           01565         movwf INDF                      ;Save to QUEUE
157A   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01567         count = count + 1
157B   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
157C   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
157D   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
157E   0080           01565         movwf INDF                      ;Save to QUEUE
157F   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01567         count = count + 1
1580   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1581   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1582   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1583   0080           01565         movwf INDF                      ;Save to QUEUE
1584   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01567         count = count + 1
1585   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1586   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1587   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1588   0080           01565         movwf INDF                      ;Save to QUEUE
1589   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01567         count = count + 1
158A   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
158B   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
158C   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
158D   0080           01565         movwf INDF                      ;Save to QUEUE
158E   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01567         count = count + 1
158F   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1590   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1591   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1592   0080           01565         movwf INDF                      ;Save to QUEUE
1593   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01567         count = count + 1
1594   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1595   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1596   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1597   0080           01565         movwf INDF                      ;Save to QUEUE
1598   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01567         count = count + 1
1599   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
159A   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
159B   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
159C   0080           01565         movwf INDF                      ;Save to QUEUE
159D   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01567         count = count + 1
159E   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 159


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

159F   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15A0   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15A1   0080           01565         movwf INDF                      ;Save to QUEUE
15A2   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01567         count = count + 1
15A3   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15A4   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15A5   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15A6   0080           01565         movwf INDF                      ;Save to QUEUE
15A7   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000001F            01567         count = count + 1
15A8   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15A9   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15AA   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15AB   0080           01565         movwf INDF                      ;Save to QUEUE
15AC   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01567         count = count + 1
15AD   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15AE   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15AF   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15B0   0080           01565         movwf INDF                      ;Save to QUEUE
15B1   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01567         count = count + 1
15B2   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15B3   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15B4   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15B5   0080           01565         movwf INDF                      ;Save to QUEUE
15B6   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01567         count = count + 1
15B7   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15B8   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15B9   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15BA   0080           01565         movwf INDF                      ;Save to QUEUE
15BB   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01567         count = count + 1
15BC   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15BD   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15BE   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15BF   0080           01565         movwf INDF                      ;Save to QUEUE
15C0   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01567         count = count + 1
15C1   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15C2   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15C3   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15C4   0080           01565         movwf INDF                      ;Save to QUEUE
15C5   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01567         count = count + 1
15C6   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15C7   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15C8   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15C9   0080           01565         movwf INDF                      ;Save to QUEUE
15CA   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01567         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 160


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

15CB   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15CC   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15CD   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15CE   0080           01565         movwf INDF                      ;Save to QUEUE
15CF   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000027            01567         count = count + 1
15D0   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15D1   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15D2   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15D3   0080           01565         movwf INDF                      ;Save to QUEUE
15D4   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000028            01567         count = count + 1
15D5   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15D6   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15D7   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15D8   0080           01565         movwf INDF                      ;Save to QUEUE
15D9   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000029            01567         count = count + 1
15DA   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15DB   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15DC   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15DD   0080           01565         movwf INDF                      ;Save to QUEUE
15DE   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000002A            01567         count = count + 1
15DF   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15E0   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15E1   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15E2   0080           01565         movwf INDF                      ;Save to QUEUE
15E3   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000002B            01567         count = count + 1
15E4   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15E5   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15E6   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15E7   0080           01565         movwf INDF                      ;Save to QUEUE
15E8   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000002C            01567         count = count + 1
15E9   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15EA   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15EB   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15EC   0080           01565         movwf INDF                      ;Save to QUEUE
15ED   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000002D            01567         count = count + 1
15EE   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15EF   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15F0   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15F1   0080           01565         movwf INDF                      ;Save to QUEUE
15F2   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  0000002E            01567         count = count + 1
15F3   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15F4   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15F5   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15F6   0080           01565         movwf INDF                      ;Save to QUEUE
15F7   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 161


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002F            01567         count = count + 1
15F8   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15F9   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15FA   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
15FB   0080           01565         movwf INDF                      ;Save to QUEUE
15FC   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000030            01567         count = count + 1
15FD   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
15FE   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
15FF   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1600   0080           01565         movwf INDF                      ;Save to QUEUE
1601   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000031            01567         count = count + 1
1602   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1603   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1604   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
1605   0080           01565         movwf INDF                      ;Save to QUEUE
1606   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000032            01567         count = count + 1
1607   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1608   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1609   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
160A   0080           01565         movwf INDF                      ;Save to QUEUE
160B   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000033            01567         count = count + 1
160C   1409           01562             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
160D   1009           01563             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
160E   0808           01564         movf ADC_DATAPORT, W            ;Save Sample
160F   0080           01565         movwf INDF                      ;Save to QUEUE
1610   0A84           01566         incf FSR, F                     ;Increment QUEUE pointer
  00000034            01567         count = count + 1
                      01568     endw
1611   1409           01569     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
1612   0808           01570     movf ADC_DATAPORT, W                ;Sample
1613                  01571 SampleRep5MEndA
1613   0080           01572         movwf INDF
1614   0A84           01573         incf FSR, F
1615   2E18           01574         goto SampleRep5MEndB
1616                  01575 SampleRep5MEndC
1616   0080           01576         movwf INDF
1617   0384           01577         decf FSR, F
1618                  01578 SampleRep5MEndB
                      01579         ADDLF D'3', modetempb, f
1618   3003               M     movlw D'3'
1619   07FA               M     addwf modetempb, f
161A   1486           01580         bsf ADC_PORT, CS
                      01581         MGOTO MainB  
                          M         if (MainB   & (0x1000))
                          M                 bsf PCLATH, 4
                          M         else
161B   120A               M                 bcf PCLATH, 4
                          M         endif
                          M         if (MainB   & (0x800))
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 162


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bsf PCLATH, 3
                          M         else
161C   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
161D   28A8               M         goto MainB
                      01582         
161E                  01583 SampleRep5MStep2
161E   0000           01584     nop
161F   1009           01585     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1620   2E21           01586         goto $ + 1
1621   0000           01587         nop
  0000                01588     local count
  00000001            01589     count = 1
                      01590     while count < D'12'
1622   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1623   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1624   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1625   0080           01594         movwf INDF                      ;Save to QUEUE
1626   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01596         count = count + 1
1627   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1628   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1629   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
162A   0080           01594         movwf INDF                      ;Save to QUEUE
162B   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01596         count = count + 1
162C   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
162D   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
162E   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
162F   0080           01594         movwf INDF                      ;Save to QUEUE
1630   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01596         count = count + 1
1631   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1632   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1633   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1634   0080           01594         movwf INDF                      ;Save to QUEUE
1635   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01596         count = count + 1
1636   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1637   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1638   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1639   0080           01594         movwf INDF                      ;Save to QUEUE
163A   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01596         count = count + 1
163B   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
163C   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
163D   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
163E   0080           01594         movwf INDF                      ;Save to QUEUE
163F   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01596         count = count + 1
1640   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1641   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 163


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1642   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1643   0080           01594         movwf INDF                      ;Save to QUEUE
1644   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01596         count = count + 1
1645   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1646   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1647   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1648   0080           01594         movwf INDF                      ;Save to QUEUE
1649   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01596         count = count + 1
164A   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
164B   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
164C   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
164D   0080           01594         movwf INDF                      ;Save to QUEUE
164E   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01596         count = count + 1
164F   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1650   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1651   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1652   0080           01594         movwf INDF                      ;Save to QUEUE
1653   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01596         count = count + 1
1654   1409           01591             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1655   1009           01592             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1656   0808           01593         movf ADC_DATAPORT, W            ;Save Sample
1657   0080           01594         movwf INDF                      ;Save to QUEUE
1658   0A84           01595         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01596         count = count + 1
                      01597     endw
1659   1409           01598     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
165A   1009           01599     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
165B   0808           01600     movf ADC_DATAPORT, W                ;Sample
165C   0080           01601     movwf INDF
165D   1784           01602     bsf FSR, 7                                                  ;goto bank 2
  00000001            01603     count = 1
                      01604     while count < D'39'
165E   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
165F   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1660   0808           01607         movf ADC_DATAPORT, W            ;Sample
1661   0080           01608         movwf INDF                      ;Save to QUEUE
1662   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01610         count = count + 1
1663   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1664   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1665   0808           01607         movf ADC_DATAPORT, W            ;Sample
1666   0080           01608         movwf INDF                      ;Save to QUEUE
1667   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01610         count = count + 1
1668   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1669   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
166A   0808           01607         movf ADC_DATAPORT, W            ;Sample
166B   0080           01608         movwf INDF                      ;Save to QUEUE
166C   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 164


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000004            01610         count = count + 1
166D   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
166E   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
166F   0808           01607         movf ADC_DATAPORT, W            ;Sample
1670   0080           01608         movwf INDF                      ;Save to QUEUE
1671   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01610         count = count + 1
1672   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1673   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1674   0808           01607         movf ADC_DATAPORT, W            ;Sample
1675   0080           01608         movwf INDF                      ;Save to QUEUE
1676   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01610         count = count + 1
1677   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1678   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1679   0808           01607         movf ADC_DATAPORT, W            ;Sample
167A   0080           01608         movwf INDF                      ;Save to QUEUE
167B   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01610         count = count + 1
167C   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
167D   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
167E   0808           01607         movf ADC_DATAPORT, W            ;Sample
167F   0080           01608         movwf INDF                      ;Save to QUEUE
1680   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01610         count = count + 1
1681   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1682   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1683   0808           01607         movf ADC_DATAPORT, W            ;Sample
1684   0080           01608         movwf INDF                      ;Save to QUEUE
1685   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01610         count = count + 1
1686   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1687   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1688   0808           01607         movf ADC_DATAPORT, W            ;Sample
1689   0080           01608         movwf INDF                      ;Save to QUEUE
168A   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01610         count = count + 1
168B   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
168C   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
168D   0808           01607         movf ADC_DATAPORT, W            ;Sample
168E   0080           01608         movwf INDF                      ;Save to QUEUE
168F   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01610         count = count + 1
1690   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1691   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1692   0808           01607         movf ADC_DATAPORT, W            ;Sample
1693   0080           01608         movwf INDF                      ;Save to QUEUE
1694   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01610         count = count + 1
1695   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1696   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1697   0808           01607         movf ADC_DATAPORT, W            ;Sample
1698   0080           01608         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 165


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1699   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01610         count = count + 1
169A   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
169B   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
169C   0808           01607         movf ADC_DATAPORT, W            ;Sample
169D   0080           01608         movwf INDF                      ;Save to QUEUE
169E   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01610         count = count + 1
169F   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16A0   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16A1   0808           01607         movf ADC_DATAPORT, W            ;Sample
16A2   0080           01608         movwf INDF                      ;Save to QUEUE
16A3   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000000F            01610         count = count + 1
16A4   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16A5   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16A6   0808           01607         movf ADC_DATAPORT, W            ;Sample
16A7   0080           01608         movwf INDF                      ;Save to QUEUE
16A8   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01610         count = count + 1
16A9   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16AA   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16AB   0808           01607         movf ADC_DATAPORT, W            ;Sample
16AC   0080           01608         movwf INDF                      ;Save to QUEUE
16AD   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01610         count = count + 1
16AE   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16AF   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B0   0808           01607         movf ADC_DATAPORT, W            ;Sample
16B1   0080           01608         movwf INDF                      ;Save to QUEUE
16B2   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01610         count = count + 1
16B3   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B4   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16B5   0808           01607         movf ADC_DATAPORT, W            ;Sample
16B6   0080           01608         movwf INDF                      ;Save to QUEUE
16B7   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01610         count = count + 1
16B8   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16B9   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16BA   0808           01607         movf ADC_DATAPORT, W            ;Sample
16BB   0080           01608         movwf INDF                      ;Save to QUEUE
16BC   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01610         count = count + 1
16BD   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16BE   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16BF   0808           01607         movf ADC_DATAPORT, W            ;Sample
16C0   0080           01608         movwf INDF                      ;Save to QUEUE
16C1   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01610         count = count + 1
16C2   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C3   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C4   0808           01607         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 166


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16C5   0080           01608         movwf INDF                      ;Save to QUEUE
16C6   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01610         count = count + 1
16C7   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16C8   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16C9   0808           01607         movf ADC_DATAPORT, W            ;Sample
16CA   0080           01608         movwf INDF                      ;Save to QUEUE
16CB   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01610         count = count + 1
16CC   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16CD   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16CE   0808           01607         movf ADC_DATAPORT, W            ;Sample
16CF   0080           01608         movwf INDF                      ;Save to QUEUE
16D0   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01610         count = count + 1
16D1   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16D2   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16D3   0808           01607         movf ADC_DATAPORT, W            ;Sample
16D4   0080           01608         movwf INDF                      ;Save to QUEUE
16D5   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01610         count = count + 1
16D6   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16D7   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16D8   0808           01607         movf ADC_DATAPORT, W            ;Sample
16D9   0080           01608         movwf INDF                      ;Save to QUEUE
16DA   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001A            01610         count = count + 1
16DB   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16DC   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16DD   0808           01607         movf ADC_DATAPORT, W            ;Sample
16DE   0080           01608         movwf INDF                      ;Save to QUEUE
16DF   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001B            01610         count = count + 1
16E0   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E1   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E2   0808           01607         movf ADC_DATAPORT, W            ;Sample
16E3   0080           01608         movwf INDF                      ;Save to QUEUE
16E4   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001C            01610         count = count + 1
16E5   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16E6   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16E7   0808           01607         movf ADC_DATAPORT, W            ;Sample
16E8   0080           01608         movwf INDF                      ;Save to QUEUE
16E9   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001D            01610         count = count + 1
16EA   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16EB   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16EC   0808           01607         movf ADC_DATAPORT, W            ;Sample
16ED   0080           01608         movwf INDF                      ;Save to QUEUE
16EE   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001E            01610         count = count + 1
16EF   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F0   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 167


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

16F1   0808           01607         movf ADC_DATAPORT, W            ;Sample
16F2   0080           01608         movwf INDF                      ;Save to QUEUE
16F3   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  0000001F            01610         count = count + 1
16F4   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16F5   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16F6   0808           01607         movf ADC_DATAPORT, W            ;Sample
16F7   0080           01608         movwf INDF                      ;Save to QUEUE
16F8   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000020            01610         count = count + 1
16F9   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16FA   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
16FB   0808           01607         movf ADC_DATAPORT, W            ;Sample
16FC   0080           01608         movwf INDF                      ;Save to QUEUE
16FD   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000021            01610         count = count + 1
16FE   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
16FF   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1700   0808           01607         movf ADC_DATAPORT, W            ;Sample
1701   0080           01608         movwf INDF                      ;Save to QUEUE
1702   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000022            01610         count = count + 1
1703   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1704   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1705   0808           01607         movf ADC_DATAPORT, W            ;Sample
1706   0080           01608         movwf INDF                      ;Save to QUEUE
1707   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000023            01610         count = count + 1
1708   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1709   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
170A   0808           01607         movf ADC_DATAPORT, W            ;Sample
170B   0080           01608         movwf INDF                      ;Save to QUEUE
170C   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000024            01610         count = count + 1
170D   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
170E   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
170F   0808           01607         movf ADC_DATAPORT, W            ;Sample
1710   0080           01608         movwf INDF                      ;Save to QUEUE
1711   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000025            01610         count = count + 1
1712   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1713   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1714   0808           01607         movf ADC_DATAPORT, W            ;Sample
1715   0080           01608         movwf INDF                      ;Save to QUEUE
1716   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000026            01610         count = count + 1
1717   1409           01605         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1718   1009           01606         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1719   0808           01607         movf ADC_DATAPORT, W            ;Sample
171A   0080           01608         movwf INDF                      ;Save to QUEUE
171B   0384           01609         decf FSR, F                     ;Increment QUEUE pointer
  00000027            01610         count = count + 1
                      01611         endw
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 168


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

171C   1409           01612     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
171D   0808           01613     movf ADC_DATAPORT, W                ;Sample
                      01614         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
171E   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
171F   118A               M                 bcf PCLATH, 3
                          M         endif
1720   2E16               M         goto SampleRep5MEndC
                      01615         
1721                  01616 SampleRep5MStep3
1721   2F22           01617     goto $ + 1
1722   1009           01618     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1723   2F24           01619         goto $ + 1
1724   0000           01620         nop
  0000                01621     local count
  00000001            01622     count = 1
                      01623     while count < D'25'
1725   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1726   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1727   0808           01626         movf ADC_DATAPORT, W            ;Sample
1728   0080           01627         movwf INDF                      ;Save to QUEUE
1729   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01629         count = count + 1
172A   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
172B   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
172C   0808           01626         movf ADC_DATAPORT, W            ;Sample
172D   0080           01627         movwf INDF                      ;Save to QUEUE
172E   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01629         count = count + 1
172F   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1730   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1731   0808           01626         movf ADC_DATAPORT, W            ;Sample
1732   0080           01627         movwf INDF                      ;Save to QUEUE
1733   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01629         count = count + 1
1734   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1735   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1736   0808           01626         movf ADC_DATAPORT, W            ;Sample
1737   0080           01627         movwf INDF                      ;Save to QUEUE
1738   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01629         count = count + 1
1739   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
173A   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
173B   0808           01626         movf ADC_DATAPORT, W            ;Sample
173C   0080           01627         movwf INDF                      ;Save to QUEUE
173D   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01629         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 169


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

173E   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
173F   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1740   0808           01626         movf ADC_DATAPORT, W            ;Sample
1741   0080           01627         movwf INDF                      ;Save to QUEUE
1742   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01629         count = count + 1
1743   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1744   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1745   0808           01626         movf ADC_DATAPORT, W            ;Sample
1746   0080           01627         movwf INDF                      ;Save to QUEUE
1747   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01629         count = count + 1
1748   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1749   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
174A   0808           01626         movf ADC_DATAPORT, W            ;Sample
174B   0080           01627         movwf INDF                      ;Save to QUEUE
174C   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01629         count = count + 1
174D   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
174E   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
174F   0808           01626         movf ADC_DATAPORT, W            ;Sample
1750   0080           01627         movwf INDF                      ;Save to QUEUE
1751   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01629         count = count + 1
1752   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1753   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1754   0808           01626         movf ADC_DATAPORT, W            ;Sample
1755   0080           01627         movwf INDF                      ;Save to QUEUE
1756   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01629         count = count + 1
1757   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1758   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1759   0808           01626         movf ADC_DATAPORT, W            ;Sample
175A   0080           01627         movwf INDF                      ;Save to QUEUE
175B   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01629         count = count + 1
175C   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
175D   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
175E   0808           01626         movf ADC_DATAPORT, W            ;Sample
175F   0080           01627         movwf INDF                      ;Save to QUEUE
1760   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01629         count = count + 1
1761   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1762   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1763   0808           01626         movf ADC_DATAPORT, W            ;Sample
1764   0080           01627         movwf INDF                      ;Save to QUEUE
1765   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  0000000E            01629         count = count + 1
1766   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1767   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1768   0808           01626         movf ADC_DATAPORT, W            ;Sample
1769   0080           01627         movwf INDF                      ;Save to QUEUE
176A   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 170


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000000F            01629         count = count + 1
176B   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
176C   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
176D   0808           01626         movf ADC_DATAPORT, W            ;Sample
176E   0080           01627         movwf INDF                      ;Save to QUEUE
176F   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000010            01629         count = count + 1
1770   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1771   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1772   0808           01626         movf ADC_DATAPORT, W            ;Sample
1773   0080           01627         movwf INDF                      ;Save to QUEUE
1774   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000011            01629         count = count + 1
1775   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1776   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1777   0808           01626         movf ADC_DATAPORT, W            ;Sample
1778   0080           01627         movwf INDF                      ;Save to QUEUE
1779   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000012            01629         count = count + 1
177A   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
177B   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
177C   0808           01626         movf ADC_DATAPORT, W            ;Sample
177D   0080           01627         movwf INDF                      ;Save to QUEUE
177E   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000013            01629         count = count + 1
177F   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1780   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1781   0808           01626         movf ADC_DATAPORT, W            ;Sample
1782   0080           01627         movwf INDF                      ;Save to QUEUE
1783   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000014            01629         count = count + 1
1784   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1785   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1786   0808           01626         movf ADC_DATAPORT, W            ;Sample
1787   0080           01627         movwf INDF                      ;Save to QUEUE
1788   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000015            01629         count = count + 1
1789   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
178A   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
178B   0808           01626         movf ADC_DATAPORT, W            ;Sample
178C   0080           01627         movwf INDF                      ;Save to QUEUE
178D   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000016            01629         count = count + 1
178E   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
178F   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1790   0808           01626         movf ADC_DATAPORT, W            ;Sample
1791   0080           01627         movwf INDF                      ;Save to QUEUE
1792   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000017            01629         count = count + 1
1793   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1794   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1795   0808           01626         movf ADC_DATAPORT, W            ;Sample
1796   0080           01627         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 171


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1797   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000018            01629         count = count + 1
1798   1409           01624         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1799   1009           01625         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
179A   0808           01626         movf ADC_DATAPORT, W            ;Sample
179B   0080           01627         movwf INDF                      ;Save to QUEUE
179C   0384           01628         decf FSR, F                     ;Increment QUEUE pointer
  00000019            01629         count = count + 1
                      01630         endw
179D   1409           01631     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
179E   1009           01632     bcf ADC_CONTROLPORT, RDD
179F   0808           01633     movf ADC_DATAPORT, W                ;Sample
17A0   0080           01634     movwf INDF
17A1   1783           01635     bsf STATUS, IRP                                             ;goto bank 4
  00000001            01636     count = 1
                      01637     while count < D'26'
17A2   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A3   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A4   0808           01640         movf ADC_DATAPORT, W            ;Sample
17A5   0080           01641         movwf INDF                      ;Save to QUEUE
17A6   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01643         count = count + 1
17A7   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17A8   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17A9   0808           01640         movf ADC_DATAPORT, W            ;Sample
17AA   0080           01641         movwf INDF                      ;Save to QUEUE
17AB   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01643         count = count + 1
17AC   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17AD   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17AE   0808           01640         movf ADC_DATAPORT, W            ;Sample
17AF   0080           01641         movwf INDF                      ;Save to QUEUE
17B0   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01643         count = count + 1
17B1   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B2   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B3   0808           01640         movf ADC_DATAPORT, W            ;Sample
17B4   0080           01641         movwf INDF                      ;Save to QUEUE
17B5   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01643         count = count + 1
17B6   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17B7   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17B8   0808           01640         movf ADC_DATAPORT, W            ;Sample
17B9   0080           01641         movwf INDF                      ;Save to QUEUE
17BA   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01643         count = count + 1
17BB   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17BC   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17BD   0808           01640         movf ADC_DATAPORT, W            ;Sample
17BE   0080           01641         movwf INDF                      ;Save to QUEUE
17BF   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01643         count = count + 1
17C0   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 172


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17C1   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17C2   0808           01640         movf ADC_DATAPORT, W            ;Sample
17C3   0080           01641         movwf INDF                      ;Save to QUEUE
17C4   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01643         count = count + 1
17C5   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17C6   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17C7   0808           01640         movf ADC_DATAPORT, W            ;Sample
17C8   0080           01641         movwf INDF                      ;Save to QUEUE
17C9   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01643         count = count + 1
17CA   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17CB   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17CC   0808           01640         movf ADC_DATAPORT, W            ;Sample
17CD   0080           01641         movwf INDF                      ;Save to QUEUE
17CE   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01643         count = count + 1
17CF   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D0   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D1   0808           01640         movf ADC_DATAPORT, W            ;Sample
17D2   0080           01641         movwf INDF                      ;Save to QUEUE
17D3   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01643         count = count + 1
17D4   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17D5   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17D6   0808           01640         movf ADC_DATAPORT, W            ;Sample
17D7   0080           01641         movwf INDF                      ;Save to QUEUE
17D8   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01643         count = count + 1
17D9   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17DA   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17DB   0808           01640         movf ADC_DATAPORT, W            ;Sample
17DC   0080           01641         movwf INDF                      ;Save to QUEUE
17DD   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01643         count = count + 1
17DE   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17DF   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E0   0808           01640         movf ADC_DATAPORT, W            ;Sample
17E1   0080           01641         movwf INDF                      ;Save to QUEUE
17E2   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01643         count = count + 1
17E3   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E4   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17E5   0808           01640         movf ADC_DATAPORT, W            ;Sample
17E6   0080           01641         movwf INDF                      ;Save to QUEUE
17E7   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01643         count = count + 1
17E8   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17E9   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17EA   0808           01640         movf ADC_DATAPORT, W            ;Sample
17EB   0080           01641         movwf INDF                      ;Save to QUEUE
17EC   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01643         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 173


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

17ED   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17EE   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17EF   0808           01640         movf ADC_DATAPORT, W            ;Sample
17F0   0080           01641         movwf INDF                      ;Save to QUEUE
17F1   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01643         count = count + 1
17F2   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17F3   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17F4   0808           01640         movf ADC_DATAPORT, W            ;Sample
17F5   0080           01641         movwf INDF                      ;Save to QUEUE
17F6   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01643         count = count + 1
17F7   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17F8   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17F9   0808           01640         movf ADC_DATAPORT, W            ;Sample
17FA   0080           01641         movwf INDF                      ;Save to QUEUE
17FB   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01643         count = count + 1
17FC   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
17FD   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
17FE   0808           01640         movf ADC_DATAPORT, W            ;Sample
17FF   0080           01641         movwf INDF                      ;Save to QUEUE
1800   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01643         count = count + 1
1801   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1802   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1803   0808           01640         movf ADC_DATAPORT, W            ;Sample
1804   0080           01641         movwf INDF                      ;Save to QUEUE
1805   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01643         count = count + 1
1806   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1807   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1808   0808           01640         movf ADC_DATAPORT, W            ;Sample
1809   0080           01641         movwf INDF                      ;Save to QUEUE
180A   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01643         count = count + 1
180B   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
180C   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
180D   0808           01640         movf ADC_DATAPORT, W            ;Sample
180E   0080           01641         movwf INDF                      ;Save to QUEUE
180F   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01643         count = count + 1
1810   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1811   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1812   0808           01640         movf ADC_DATAPORT, W            ;Sample
1813   0080           01641         movwf INDF                      ;Save to QUEUE
1814   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01643         count = count + 1
1815   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1816   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1817   0808           01640         movf ADC_DATAPORT, W            ;Sample
1818   0080           01641         movwf INDF                      ;Save to QUEUE
1819   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 174


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000019            01643         count = count + 1
181A   1409           01638         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
181B   1009           01639         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
181C   0808           01640         movf ADC_DATAPORT, W            ;Sample
181D   0080           01641         movwf INDF                      ;Save to QUEUE
181E   0A84           01642         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01643         count = count + 1
                      01644         endw
181F   1409           01645     bsf ADC_CONTROLPORT, RDD
1820   0808           01646     movf ADC_DATAPORT, W            ;Sample
                      01647         MGOTO SampleRep5MEndA
                          M         if (SampleRep5MEndA & (0x1000))
1821   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndA & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1822   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1823   2E13               M         goto SampleRep5MEndA
                      01648         
1824                  01649 SampleRep5MStep4
1824   2825           01650     goto $ + 1
1825   0000           01651     nop
1826   1009           01652     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1827   2828           01653         goto $ + 1
1828   0000           01654         nop
  0000                01655     local count
  00000001            01656     count = 1
                      01657     while count < D'38'
1829   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
182A   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
182B   0808           01660         movf ADC_DATAPORT, W            ;Sample
182C   0080           01661         movwf INDF                      ;Save to QUEUE
182D   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000002            01663         count = count + 1
182E   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
182F   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1830   0808           01660         movf ADC_DATAPORT, W            ;Sample
1831   0080           01661         movwf INDF                      ;Save to QUEUE
1832   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000003            01663         count = count + 1
1833   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1834   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1835   0808           01660         movf ADC_DATAPORT, W            ;Sample
1836   0080           01661         movwf INDF                      ;Save to QUEUE
1837   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000004            01663         count = count + 1
1838   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1839   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 175


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

183A   0808           01660         movf ADC_DATAPORT, W            ;Sample
183B   0080           01661         movwf INDF                      ;Save to QUEUE
183C   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000005            01663         count = count + 1
183D   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
183E   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
183F   0808           01660         movf ADC_DATAPORT, W            ;Sample
1840   0080           01661         movwf INDF                      ;Save to QUEUE
1841   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000006            01663         count = count + 1
1842   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1843   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1844   0808           01660         movf ADC_DATAPORT, W            ;Sample
1845   0080           01661         movwf INDF                      ;Save to QUEUE
1846   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000007            01663         count = count + 1
1847   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1848   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1849   0808           01660         movf ADC_DATAPORT, W            ;Sample
184A   0080           01661         movwf INDF                      ;Save to QUEUE
184B   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000008            01663         count = count + 1
184C   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
184D   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
184E   0808           01660         movf ADC_DATAPORT, W            ;Sample
184F   0080           01661         movwf INDF                      ;Save to QUEUE
1850   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000009            01663         count = count + 1
1851   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1852   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1853   0808           01660         movf ADC_DATAPORT, W            ;Sample
1854   0080           01661         movwf INDF                      ;Save to QUEUE
1855   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000A            01663         count = count + 1
1856   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1857   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1858   0808           01660         movf ADC_DATAPORT, W            ;Sample
1859   0080           01661         movwf INDF                      ;Save to QUEUE
185A   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000B            01663         count = count + 1
185B   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
185C   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
185D   0808           01660         movf ADC_DATAPORT, W            ;Sample
185E   0080           01661         movwf INDF                      ;Save to QUEUE
185F   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000C            01663         count = count + 1
1860   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1861   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1862   0808           01660         movf ADC_DATAPORT, W            ;Sample
1863   0080           01661         movwf INDF                      ;Save to QUEUE
1864   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000D            01663         count = count + 1
1865   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 176


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1866   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1867   0808           01660         movf ADC_DATAPORT, W            ;Sample
1868   0080           01661         movwf INDF                      ;Save to QUEUE
1869   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000E            01663         count = count + 1
186A   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
186B   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
186C   0808           01660         movf ADC_DATAPORT, W            ;Sample
186D   0080           01661         movwf INDF                      ;Save to QUEUE
186E   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000000F            01663         count = count + 1
186F   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1870   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1871   0808           01660         movf ADC_DATAPORT, W            ;Sample
1872   0080           01661         movwf INDF                      ;Save to QUEUE
1873   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000010            01663         count = count + 1
1874   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1875   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1876   0808           01660         movf ADC_DATAPORT, W            ;Sample
1877   0080           01661         movwf INDF                      ;Save to QUEUE
1878   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000011            01663         count = count + 1
1879   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
187A   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
187B   0808           01660         movf ADC_DATAPORT, W            ;Sample
187C   0080           01661         movwf INDF                      ;Save to QUEUE
187D   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000012            01663         count = count + 1
187E   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
187F   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1880   0808           01660         movf ADC_DATAPORT, W            ;Sample
1881   0080           01661         movwf INDF                      ;Save to QUEUE
1882   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000013            01663         count = count + 1
1883   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1884   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1885   0808           01660         movf ADC_DATAPORT, W            ;Sample
1886   0080           01661         movwf INDF                      ;Save to QUEUE
1887   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000014            01663         count = count + 1
1888   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1889   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
188A   0808           01660         movf ADC_DATAPORT, W            ;Sample
188B   0080           01661         movwf INDF                      ;Save to QUEUE
188C   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000015            01663         count = count + 1
188D   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
188E   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
188F   0808           01660         movf ADC_DATAPORT, W            ;Sample
1890   0080           01661         movwf INDF                      ;Save to QUEUE
1891   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000016            01663         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 177


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1892   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1893   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1894   0808           01660         movf ADC_DATAPORT, W            ;Sample
1895   0080           01661         movwf INDF                      ;Save to QUEUE
1896   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000017            01663         count = count + 1
1897   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1898   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1899   0808           01660         movf ADC_DATAPORT, W            ;Sample
189A   0080           01661         movwf INDF                      ;Save to QUEUE
189B   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000018            01663         count = count + 1
189C   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
189D   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
189E   0808           01660         movf ADC_DATAPORT, W            ;Sample
189F   0080           01661         movwf INDF                      ;Save to QUEUE
18A0   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000019            01663         count = count + 1
18A1   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A2   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A3   0808           01660         movf ADC_DATAPORT, W            ;Sample
18A4   0080           01661         movwf INDF                      ;Save to QUEUE
18A5   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000001A            01663         count = count + 1
18A6   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18A7   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18A8   0808           01660         movf ADC_DATAPORT, W            ;Sample
18A9   0080           01661         movwf INDF                      ;Save to QUEUE
18AA   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000001B            01663         count = count + 1
18AB   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18AC   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18AD   0808           01660         movf ADC_DATAPORT, W            ;Sample
18AE   0080           01661         movwf INDF                      ;Save to QUEUE
18AF   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000001C            01663         count = count + 1
18B0   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18B1   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18B2   0808           01660         movf ADC_DATAPORT, W            ;Sample
18B3   0080           01661         movwf INDF                      ;Save to QUEUE
18B4   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000001D            01663         count = count + 1
18B5   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18B6   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18B7   0808           01660         movf ADC_DATAPORT, W            ;Sample
18B8   0080           01661         movwf INDF                      ;Save to QUEUE
18B9   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  0000001E            01663         count = count + 1
18BA   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18BB   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18BC   0808           01660         movf ADC_DATAPORT, W            ;Sample
18BD   0080           01661         movwf INDF                      ;Save to QUEUE
18BE   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 178


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001F            01663         count = count + 1
18BF   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C0   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C1   0808           01660         movf ADC_DATAPORT, W            ;Sample
18C2   0080           01661         movwf INDF                      ;Save to QUEUE
18C3   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000020            01663         count = count + 1
18C4   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18C5   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18C6   0808           01660         movf ADC_DATAPORT, W            ;Sample
18C7   0080           01661         movwf INDF                      ;Save to QUEUE
18C8   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000021            01663         count = count + 1
18C9   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18CA   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18CB   0808           01660         movf ADC_DATAPORT, W            ;Sample
18CC   0080           01661         movwf INDF                      ;Save to QUEUE
18CD   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000022            01663         count = count + 1
18CE   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18CF   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D0   0808           01660         movf ADC_DATAPORT, W            ;Sample
18D1   0080           01661         movwf INDF                      ;Save to QUEUE
18D2   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000023            01663         count = count + 1
18D3   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D4   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18D5   0808           01660         movf ADC_DATAPORT, W            ;Sample
18D6   0080           01661         movwf INDF                      ;Save to QUEUE
18D7   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000024            01663         count = count + 1
18D8   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18D9   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18DA   0808           01660         movf ADC_DATAPORT, W            ;Sample
18DB   0080           01661         movwf INDF                      ;Save to QUEUE
18DC   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000025            01663         count = count + 1
18DD   1409           01658         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18DE   1009           01659         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18DF   0808           01660         movf ADC_DATAPORT, W            ;Sample
18E0   0080           01661         movwf INDF                      ;Save to QUEUE
18E1   0A84           01662         incf FSR, F                     ;Increment QUEUE pointer
  00000026            01663         count = count + 1
                      01664         endw
18E2   1409           01665     bsf ADC_CONTROLPORT, RDD
18E3   1009           01666     bcf ADC_CONTROLPORT, RDD
18E4   0808           01667     movf ADC_DATAPORT, W            ;Sample
18E5   0080           01668     movwf INDF
18E6   1384           01669     bcf FSR, 7                                                  ;goto bank 3
  00000001            01670     count = 1
                      01671     while count < D'13'
18E7   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18E8   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 179


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

18E9   0808           01674             movf ADC_DATAPORT, W
18EA   0080           01675         movwf INDF                      ;Save to QUEUE
18EB   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000002            01677         count = count + 1
18EC   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18ED   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18EE   0808           01674             movf ADC_DATAPORT, W
18EF   0080           01675         movwf INDF                      ;Save to QUEUE
18F0   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000003            01677         count = count + 1
18F1   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F2   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F3   0808           01674             movf ADC_DATAPORT, W
18F4   0080           01675         movwf INDF                      ;Save to QUEUE
18F5   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000004            01677         count = count + 1
18F6   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18F7   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18F8   0808           01674             movf ADC_DATAPORT, W
18F9   0080           01675         movwf INDF                      ;Save to QUEUE
18FA   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000005            01677         count = count + 1
18FB   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
18FC   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
18FD   0808           01674             movf ADC_DATAPORT, W
18FE   0080           01675         movwf INDF                      ;Save to QUEUE
18FF   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000006            01677         count = count + 1
1900   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1901   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1902   0808           01674             movf ADC_DATAPORT, W
1903   0080           01675         movwf INDF                      ;Save to QUEUE
1904   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000007            01677         count = count + 1
1905   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1906   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1907   0808           01674             movf ADC_DATAPORT, W
1908   0080           01675         movwf INDF                      ;Save to QUEUE
1909   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000008            01677         count = count + 1
190A   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
190B   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
190C   0808           01674             movf ADC_DATAPORT, W
190D   0080           01675         movwf INDF                      ;Save to QUEUE
190E   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  00000009            01677         count = count + 1
190F   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1910   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1911   0808           01674             movf ADC_DATAPORT, W
1912   0080           01675         movwf INDF                      ;Save to QUEUE
1913   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  0000000A            01677         count = count + 1
1914   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 180


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1915   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1916   0808           01674             movf ADC_DATAPORT, W
1917   0080           01675         movwf INDF                      ;Save to QUEUE
1918   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  0000000B            01677         count = count + 1
1919   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
191A   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
191B   0808           01674             movf ADC_DATAPORT, W
191C   0080           01675         movwf INDF                      ;Save to QUEUE
191D   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  0000000C            01677         count = count + 1
191E   1409           01672         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
191F   1009           01673         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1920   0808           01674             movf ADC_DATAPORT, W
1921   0080           01675         movwf INDF                      ;Save to QUEUE
1922   0384           01676         decf FSR, F                     ;Increment QUEUE pointer
  0000000D            01677         count = count + 1
                      01678         endw
1923   1409           01679     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
1924   0808           01680     movf ADC_DATAPORT, W                ;Sample
                      01681         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
1925   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1926   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1927   2E16               M         goto SampleRep5MEndC
                      01682 
1928                  01683 SampleRep5MStep5
1928   2929           01684     goto $ + 1
                      01685         if (Sample1MhzEnd & (0x1000))
                      01686                 bsf PCLATH, 4
                      01687         else
1929   120A           01688                 bcf PCLATH, 4
                      01689         endif
                      01690         if (Sample1MhzEnd & (0x800))
                      01691                 bsf PCLATH, 3
                      01692         else
192A   118A           01693                 bcf PCLATH, 3
                      01694         endif
192B   1009           01695     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
192C   0000           01696         nop
Message[306]: Crossing page boundary -- ensure page bits are set.
192D   2FF6           01697         goto Sample1MhzEnd
                      01698         
                      01699 ;Repetative sample
                      01700 ;Equivalent sampling rate = 2.5 MHz with 20 MHz clock
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 181


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01701 ;-----------------------------------------------------------------------------
192E                  01702 SampleRep2M
192E   3019           01703     movlw high SampleRep2MPickSt
192F   008A           01704     movwf PCLATH
1930   087A           01705         movf modetempb, w
1931   0782           01706         addwf PCL, f
1932                  01707 SampleRep2MPickSt
                      01708         MGOTO SampleRep2MStep1
                          M         if (SampleRep2MStep1 & (0x1000))
1932   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep1 & (0x800))
1933   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
1934   293B               M         goto SampleRep2MStep1
                      01709         MGOTO SampleRep2MStep2
                          M         if (SampleRep2MStep2 & (0x1000))
1935   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep2 & (0x800))
1936   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
1937   2B42               M         goto SampleRep2MStep2
                      01710         MGOTO SampleRep2MStep3
                          M         if (SampleRep2MStep3 & (0x1000))
1938   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep2MStep3 & (0x800))
1939   158A               M                 bsf PCLATH, 3
                          M         else
                          M                 bcf PCLATH, 3
                          M         endif
193A   2D43               M         goto SampleRep2MStep3
193B                  01711 SampleRep2MPickEn
193B                  01712 SampleRep2MStep1
193B   1009           01713     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
                      01714     MOVLF BUFFERMIN, FSR                ;Initialize pointer
193C   3020               M     movlw BUFFERMIN
193D   0084               M     movwf FSR
193E   0000           01715     nop
  0000                01716     local count
  00000001            01717     count = 1
                      01718     while count < BUFFERSIZE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 182


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

193F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1940   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1941   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1942   0080           01722         movwf INDF                      ;Save to QUEUE
1943   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1944   0000           01724         nop
  00000002            01725         count = count + 1
1945   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1946   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1947   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1948   0080           01722         movwf INDF                      ;Save to QUEUE
1949   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
194A   0000           01724         nop
  00000003            01725         count = count + 1
194B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
194C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
194D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
194E   0080           01722         movwf INDF                      ;Save to QUEUE
194F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1950   0000           01724         nop
  00000004            01725         count = count + 1
1951   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1952   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1953   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1954   0080           01722         movwf INDF                      ;Save to QUEUE
1955   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1956   0000           01724         nop
  00000005            01725         count = count + 1
1957   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1958   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1959   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
195A   0080           01722         movwf INDF                      ;Save to QUEUE
195B   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
195C   0000           01724         nop
  00000006            01725         count = count + 1
195D   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
195E   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
195F   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1960   0080           01722         movwf INDF                      ;Save to QUEUE
1961   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1962   0000           01724         nop
  00000007            01725         count = count + 1
1963   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1964   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1965   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1966   0080           01722         movwf INDF                      ;Save to QUEUE
1967   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1968   0000           01724         nop
  00000008            01725         count = count + 1
1969   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
196A   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
196B   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
196C   0080           01722         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 183


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

196D   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
196E   0000           01724         nop
  00000009            01725         count = count + 1
196F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1970   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1971   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1972   0080           01722         movwf INDF                      ;Save to QUEUE
1973   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1974   0000           01724         nop
  0000000A            01725         count = count + 1
1975   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1976   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1977   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1978   0080           01722         movwf INDF                      ;Save to QUEUE
1979   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
197A   0000           01724         nop
  0000000B            01725         count = count + 1
197B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
197C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
197D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
197E   0080           01722         movwf INDF                      ;Save to QUEUE
197F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1980   0000           01724         nop
  0000000C            01725         count = count + 1
1981   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1982   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1983   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1984   0080           01722         movwf INDF                      ;Save to QUEUE
1985   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1986   0000           01724         nop
  0000000D            01725         count = count + 1
1987   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1988   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1989   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
198A   0080           01722         movwf INDF                      ;Save to QUEUE
198B   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
198C   0000           01724         nop
  0000000E            01725         count = count + 1
198D   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
198E   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
198F   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1990   0080           01722         movwf INDF                      ;Save to QUEUE
1991   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1992   0000           01724         nop
  0000000F            01725         count = count + 1
1993   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1994   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1995   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1996   0080           01722         movwf INDF                      ;Save to QUEUE
1997   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1998   0000           01724         nop
  00000010            01725         count = count + 1
1999   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 184


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

199A   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
199B   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
199C   0080           01722         movwf INDF                      ;Save to QUEUE
199D   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
199E   0000           01724         nop
  00000011            01725         count = count + 1
199F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19A0   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19A1   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19A2   0080           01722         movwf INDF                      ;Save to QUEUE
19A3   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19A4   0000           01724         nop
  00000012            01725         count = count + 1
19A5   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19A6   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19A7   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19A8   0080           01722         movwf INDF                      ;Save to QUEUE
19A9   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19AA   0000           01724         nop
  00000013            01725         count = count + 1
19AB   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19AC   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19AD   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19AE   0080           01722         movwf INDF                      ;Save to QUEUE
19AF   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19B0   0000           01724         nop
  00000014            01725         count = count + 1
19B1   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19B2   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19B3   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19B4   0080           01722         movwf INDF                      ;Save to QUEUE
19B5   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19B6   0000           01724         nop
  00000015            01725         count = count + 1
19B7   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19B8   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19B9   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19BA   0080           01722         movwf INDF                      ;Save to QUEUE
19BB   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19BC   0000           01724         nop
  00000016            01725         count = count + 1
19BD   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19BE   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19BF   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19C0   0080           01722         movwf INDF                      ;Save to QUEUE
19C1   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19C2   0000           01724         nop
  00000017            01725         count = count + 1
19C3   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19C4   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19C5   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19C6   0080           01722         movwf INDF                      ;Save to QUEUE
19C7   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 185


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19C8   0000           01724         nop
  00000018            01725         count = count + 1
19C9   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19CA   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19CB   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19CC   0080           01722         movwf INDF                      ;Save to QUEUE
19CD   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19CE   0000           01724         nop
  00000019            01725         count = count + 1
19CF   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19D0   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19D1   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19D2   0080           01722         movwf INDF                      ;Save to QUEUE
19D3   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19D4   0000           01724         nop
  0000001A            01725         count = count + 1
19D5   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19D6   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19D7   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19D8   0080           01722         movwf INDF                      ;Save to QUEUE
19D9   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19DA   0000           01724         nop
  0000001B            01725         count = count + 1
19DB   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19DC   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19DD   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19DE   0080           01722         movwf INDF                      ;Save to QUEUE
19DF   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19E0   0000           01724         nop
  0000001C            01725         count = count + 1
19E1   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19E2   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19E3   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19E4   0080           01722         movwf INDF                      ;Save to QUEUE
19E5   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19E6   0000           01724         nop
  0000001D            01725         count = count + 1
19E7   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19E8   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19E9   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19EA   0080           01722         movwf INDF                      ;Save to QUEUE
19EB   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19EC   0000           01724         nop
  0000001E            01725         count = count + 1
19ED   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19EE   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19EF   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19F0   0080           01722         movwf INDF                      ;Save to QUEUE
19F1   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19F2   0000           01724         nop
  0000001F            01725         count = count + 1
19F3   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19F4   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 186


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

19F5   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19F6   0080           01722         movwf INDF                      ;Save to QUEUE
19F7   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19F8   0000           01724         nop
  00000020            01725         count = count + 1
19F9   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
19FA   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
19FB   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
19FC   0080           01722         movwf INDF                      ;Save to QUEUE
19FD   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
19FE   0000           01724         nop
  00000021            01725         count = count + 1
19FF   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A00   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A01   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A02   0080           01722         movwf INDF                      ;Save to QUEUE
1A03   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A04   0000           01724         nop
  00000022            01725         count = count + 1
1A05   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A06   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A07   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A08   0080           01722         movwf INDF                      ;Save to QUEUE
1A09   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A0A   0000           01724         nop
  00000023            01725         count = count + 1
1A0B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A0C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A0D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A0E   0080           01722         movwf INDF                      ;Save to QUEUE
1A0F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A10   0000           01724         nop
  00000024            01725         count = count + 1
1A11   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A12   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A13   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A14   0080           01722         movwf INDF                      ;Save to QUEUE
1A15   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A16   0000           01724         nop
  00000025            01725         count = count + 1
1A17   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A18   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A19   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A1A   0080           01722         movwf INDF                      ;Save to QUEUE
1A1B   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A1C   0000           01724         nop
  00000026            01725         count = count + 1
1A1D   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A1E   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A1F   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A20   0080           01722         movwf INDF                      ;Save to QUEUE
1A21   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A22   0000           01724         nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 187


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000027            01725         count = count + 1
1A23   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A24   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A25   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A26   0080           01722         movwf INDF                      ;Save to QUEUE
1A27   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A28   0000           01724         nop
  00000028            01725         count = count + 1
1A29   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A2A   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A2B   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A2C   0080           01722         movwf INDF                      ;Save to QUEUE
1A2D   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A2E   0000           01724         nop
  00000029            01725         count = count + 1
1A2F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A30   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A31   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A32   0080           01722         movwf INDF                      ;Save to QUEUE
1A33   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A34   0000           01724         nop
  0000002A            01725         count = count + 1
1A35   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A36   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A37   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A38   0080           01722         movwf INDF                      ;Save to QUEUE
1A39   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A3A   0000           01724         nop
  0000002B            01725         count = count + 1
1A3B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A3C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A3D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A3E   0080           01722         movwf INDF                      ;Save to QUEUE
1A3F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A40   0000           01724         nop
  0000002C            01725         count = count + 1
1A41   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A42   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A43   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A44   0080           01722         movwf INDF                      ;Save to QUEUE
1A45   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A46   0000           01724         nop
  0000002D            01725         count = count + 1
1A47   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A48   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A49   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A4A   0080           01722         movwf INDF                      ;Save to QUEUE
1A4B   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A4C   0000           01724         nop
  0000002E            01725         count = count + 1
1A4D   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A4E   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A4F   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 188


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A50   0080           01722         movwf INDF                      ;Save to QUEUE
1A51   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A52   0000           01724         nop
  0000002F            01725         count = count + 1
1A53   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A54   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A55   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A56   0080           01722         movwf INDF                      ;Save to QUEUE
1A57   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A58   0000           01724         nop
  00000030            01725         count = count + 1
1A59   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A5A   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A5B   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A5C   0080           01722         movwf INDF                      ;Save to QUEUE
1A5D   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A5E   0000           01724         nop
  00000031            01725         count = count + 1
1A5F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A60   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A61   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A62   0080           01722         movwf INDF                      ;Save to QUEUE
1A63   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A64   0000           01724         nop
  00000032            01725         count = count + 1
1A65   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A66   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A67   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A68   0080           01722         movwf INDF                      ;Save to QUEUE
1A69   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A6A   0000           01724         nop
  00000033            01725         count = count + 1
1A6B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A6C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A6D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A6E   0080           01722         movwf INDF                      ;Save to QUEUE
1A6F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A70   0000           01724         nop
  00000034            01725         count = count + 1
1A71   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A72   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A73   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A74   0080           01722         movwf INDF                      ;Save to QUEUE
1A75   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A76   0000           01724         nop
  00000035            01725         count = count + 1
1A77   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A78   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A79   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A7A   0080           01722         movwf INDF                      ;Save to QUEUE
1A7B   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A7C   0000           01724         nop
  00000036            01725         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 189


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1A7D   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A7E   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A7F   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A80   0080           01722         movwf INDF                      ;Save to QUEUE
1A81   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A82   0000           01724         nop
  00000037            01725         count = count + 1
1A83   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A84   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A85   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A86   0080           01722         movwf INDF                      ;Save to QUEUE
1A87   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A88   0000           01724         nop
  00000038            01725         count = count + 1
1A89   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A8A   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A8B   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A8C   0080           01722         movwf INDF                      ;Save to QUEUE
1A8D   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A8E   0000           01724         nop
  00000039            01725         count = count + 1
1A8F   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A90   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A91   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A92   0080           01722         movwf INDF                      ;Save to QUEUE
1A93   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A94   0000           01724         nop
  0000003A            01725         count = count + 1
1A95   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A96   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A97   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A98   0080           01722         movwf INDF                      ;Save to QUEUE
1A99   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1A9A   0000           01724         nop
  0000003B            01725         count = count + 1
1A9B   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1A9C   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1A9D   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1A9E   0080           01722         movwf INDF                      ;Save to QUEUE
1A9F   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1AA0   0000           01724         nop
  0000003C            01725         count = count + 1
1AA1   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1AA2   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AA3   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AA4   0080           01722         movwf INDF                      ;Save to QUEUE
1AA5   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1AA6   0000           01724         nop
  0000003D            01725         count = count + 1
1AA7   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1AA8   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AA9   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AAA   0080           01722         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 190


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1AAB   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1AAC   0000           01724         nop
  0000003E            01725         count = count + 1
1AAD   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1AAE   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AAF   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AB0   0080           01722         movwf INDF                      ;Save to QUEUE
1AB1   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1AB2   0000           01724         nop
  0000003F            01725         count = count + 1
1AB3   0808           01719         movf ADC_DATAPORT, W            ;Save Sample
1AB4   1409           01720             bsf ADC_CONTROLPORT, RDD            ;Latch Conversion into SPP
1AB5   1009           01721             bcf ADC_CONTROLPORT, RDD        ;Start next conversion
1AB6   0080           01722         movwf INDF                      ;Save to QUEUE
1AB7   0A84           01723         incf FSR, F                     ;Increment QUEUE pointer
1AB8   0000           01724         nop
  00000040            01725         count = count + 1
                      01726     endw
1AB9   0808           01727     movf ADC_DATAPORT, W
1ABA   1409           01728     bsf ADC_CONTROLPORT, RDD                    ;Latch Conversion into SPP
1ABB   1009           01729     bcf ADC_CONTROLPORT, RDD            ;Start next conversion
1ABC   0080           01730     movwf INDF
1ABD   1784           01731     bsf FSR, 7                                                  ;goto bank 2
1ABE   0000           01732     nop
  00000001            01733     count = 1
                      01734     while count < D'22'
1ABF   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AC0   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AC1   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AC2   0080           01738         movwf INDF                      ;Save to QUEUE
1AC3   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AC4   0000           01740                 nop
  00000002            01741         count = count + 1
1AC5   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AC6   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AC7   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AC8   0080           01738         movwf INDF                      ;Save to QUEUE
1AC9   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1ACA   0000           01740                 nop
  00000003            01741         count = count + 1
1ACB   0808           01735         movf ADC_DATAPORT, W            ;Sample
1ACC   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1ACD   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1ACE   0080           01738         movwf INDF                      ;Save to QUEUE
1ACF   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AD0   0000           01740                 nop
  00000004            01741         count = count + 1
1AD1   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AD2   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AD3   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AD4   0080           01738         movwf INDF                      ;Save to QUEUE
1AD5   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AD6   0000           01740                 nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 191


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000005            01741         count = count + 1
1AD7   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AD8   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AD9   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1ADA   0080           01738         movwf INDF                      ;Save to QUEUE
1ADB   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1ADC   0000           01740                 nop
  00000006            01741         count = count + 1
1ADD   0808           01735         movf ADC_DATAPORT, W            ;Sample
1ADE   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1ADF   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AE0   0080           01738         movwf INDF                      ;Save to QUEUE
1AE1   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AE2   0000           01740                 nop
  00000007            01741         count = count + 1
1AE3   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AE4   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AE5   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AE6   0080           01738         movwf INDF                      ;Save to QUEUE
1AE7   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AE8   0000           01740                 nop
  00000008            01741         count = count + 1
1AE9   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AEA   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AEB   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AEC   0080           01738         movwf INDF                      ;Save to QUEUE
1AED   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AEE   0000           01740                 nop
  00000009            01741         count = count + 1
1AEF   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AF0   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AF1   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AF2   0080           01738         movwf INDF                      ;Save to QUEUE
1AF3   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AF4   0000           01740                 nop
  0000000A            01741         count = count + 1
1AF5   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AF6   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AF7   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AF8   0080           01738         movwf INDF                      ;Save to QUEUE
1AF9   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1AFA   0000           01740                 nop
  0000000B            01741         count = count + 1
1AFB   0808           01735         movf ADC_DATAPORT, W            ;Sample
1AFC   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1AFD   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1AFE   0080           01738         movwf INDF                      ;Save to QUEUE
1AFF   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B00   0000           01740                 nop
  0000000C            01741         count = count + 1
1B01   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B02   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B03   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 192


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B04   0080           01738         movwf INDF                      ;Save to QUEUE
1B05   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B06   0000           01740                 nop
  0000000D            01741         count = count + 1
1B07   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B08   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B09   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B0A   0080           01738         movwf INDF                      ;Save to QUEUE
1B0B   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B0C   0000           01740                 nop
  0000000E            01741         count = count + 1
1B0D   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B0E   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B0F   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B10   0080           01738         movwf INDF                      ;Save to QUEUE
1B11   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B12   0000           01740                 nop
  0000000F            01741         count = count + 1
1B13   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B14   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B15   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B16   0080           01738         movwf INDF                      ;Save to QUEUE
1B17   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B18   0000           01740                 nop
  00000010            01741         count = count + 1
1B19   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B1A   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B1B   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B1C   0080           01738         movwf INDF                      ;Save to QUEUE
1B1D   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B1E   0000           01740                 nop
  00000011            01741         count = count + 1
1B1F   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B20   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B21   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B22   0080           01738         movwf INDF                      ;Save to QUEUE
1B23   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B24   0000           01740                 nop
  00000012            01741         count = count + 1
1B25   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B26   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B27   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B28   0080           01738         movwf INDF                      ;Save to QUEUE
1B29   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B2A   0000           01740                 nop
  00000013            01741         count = count + 1
1B2B   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B2C   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B2D   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B2E   0080           01738         movwf INDF                      ;Save to QUEUE
1B2F   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B30   0000           01740                 nop
  00000014            01741         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 193


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B31   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B32   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B33   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B34   0080           01738         movwf INDF                      ;Save to QUEUE
1B35   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B36   0000           01740                 nop
  00000015            01741         count = count + 1
1B37   0808           01735         movf ADC_DATAPORT, W            ;Sample
1B38   1409           01736         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B39   1009           01737         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B3A   0080           01738         movwf INDF                      ;Save to QUEUE
1B3B   0384           01739         decf FSR, F                     ;Increment QUEUE pointer
1B3C   0000           01740                 nop
  00000016            01741         count = count + 1
                      01742         endw
1B3D   0808           01743     movf ADC_DATAPORT, W                ;Sample
1B3E   1409           01744     bsf ADC_CONTROLPORT, RDD            ;Stop conversion
                      01745         MGOTO SampleRep5MEndC
                          M         if (SampleRep5MEndC & (0x1000))
1B3F   160A               M                 bsf PCLATH, 4
                          M         else
                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndC & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1B40   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1B41   2E16               M         goto SampleRep5MEndC
                      01746 
1B42                  01747 SampleRep2MStep2
1B42   2B43           01748     goto $ + 1                                                  ;Delay 2
1B43   1009           01749     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1B44   2B45           01750     goto $ + 1                          ;Wait three cycles
1B45   0000           01751     nop
  0000                01752     local count
  00000001            01753     count = 1
                      01754     while count < D'42'
1B46   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B47   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B48   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B49   0080           01758         movwf INDF                      ;Save to QUEUE
1B4A   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B4B   0000           01760         nop
  00000002            01761         count = count + 1
1B4C   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B4D   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B4E   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B4F   0080           01758         movwf INDF                      ;Save to QUEUE
1B50   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B51   0000           01760         nop
  00000003            01761         count = count + 1
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 194


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B52   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B53   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B54   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B55   0080           01758         movwf INDF                      ;Save to QUEUE
1B56   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B57   0000           01760         nop
  00000004            01761         count = count + 1
1B58   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B59   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B5A   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B5B   0080           01758         movwf INDF                      ;Save to QUEUE
1B5C   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B5D   0000           01760         nop
  00000005            01761         count = count + 1
1B5E   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B5F   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B60   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B61   0080           01758         movwf INDF                      ;Save to QUEUE
1B62   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B63   0000           01760         nop
  00000006            01761         count = count + 1
1B64   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B65   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B66   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B67   0080           01758         movwf INDF                      ;Save to QUEUE
1B68   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B69   0000           01760         nop
  00000007            01761         count = count + 1
1B6A   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B6B   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B6C   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B6D   0080           01758         movwf INDF                      ;Save to QUEUE
1B6E   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B6F   0000           01760         nop
  00000008            01761         count = count + 1
1B70   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B71   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B72   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B73   0080           01758         movwf INDF                      ;Save to QUEUE
1B74   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B75   0000           01760         nop
  00000009            01761         count = count + 1
1B76   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B77   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B78   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B79   0080           01758         movwf INDF                      ;Save to QUEUE
1B7A   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B7B   0000           01760         nop
  0000000A            01761         count = count + 1
1B7C   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B7D   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B7E   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B7F   0080           01758         movwf INDF                      ;Save to QUEUE
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 195


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1B80   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B81   0000           01760         nop
  0000000B            01761         count = count + 1
1B82   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B83   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B84   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B85   0080           01758         movwf INDF                      ;Save to QUEUE
1B86   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B87   0000           01760         nop
  0000000C            01761         count = count + 1
1B88   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B89   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B8A   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B8B   0080           01758         movwf INDF                      ;Save to QUEUE
1B8C   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B8D   0000           01760         nop
  0000000D            01761         count = count + 1
1B8E   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B8F   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B90   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B91   0080           01758         movwf INDF                      ;Save to QUEUE
1B92   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B93   0000           01760         nop
  0000000E            01761         count = count + 1
1B94   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B95   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B96   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B97   0080           01758         movwf INDF                      ;Save to QUEUE
1B98   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B99   0000           01760         nop
  0000000F            01761         count = count + 1
1B9A   0808           01755         movf ADC_DATAPORT, W            ;Sample
1B9B   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1B9C   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1B9D   0080           01758         movwf INDF                      ;Save to QUEUE
1B9E   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1B9F   0000           01760         nop
  00000010            01761         count = count + 1
1BA0   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BA1   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BA2   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BA3   0080           01758         movwf INDF                      ;Save to QUEUE
1BA4   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BA5   0000           01760         nop
  00000011            01761         count = count + 1
1BA6   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BA7   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BA8   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BA9   0080           01758         movwf INDF                      ;Save to QUEUE
1BAA   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BAB   0000           01760         nop
  00000012            01761         count = count + 1
1BAC   0808           01755         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 196


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1BAD   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BAE   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BAF   0080           01758         movwf INDF                      ;Save to QUEUE
1BB0   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BB1   0000           01760         nop
  00000013            01761         count = count + 1
1BB2   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BB3   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BB4   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BB5   0080           01758         movwf INDF                      ;Save to QUEUE
1BB6   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BB7   0000           01760         nop
  00000014            01761         count = count + 1
1BB8   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BB9   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BBA   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BBB   0080           01758         movwf INDF                      ;Save to QUEUE
1BBC   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BBD   0000           01760         nop
  00000015            01761         count = count + 1
1BBE   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BBF   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BC0   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BC1   0080           01758         movwf INDF                      ;Save to QUEUE
1BC2   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BC3   0000           01760         nop
  00000016            01761         count = count + 1
1BC4   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BC5   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BC6   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BC7   0080           01758         movwf INDF                      ;Save to QUEUE
1BC8   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BC9   0000           01760         nop
  00000017            01761         count = count + 1
1BCA   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BCB   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BCC   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BCD   0080           01758         movwf INDF                      ;Save to QUEUE
1BCE   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BCF   0000           01760         nop
  00000018            01761         count = count + 1
1BD0   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BD1   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BD2   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BD3   0080           01758         movwf INDF                      ;Save to QUEUE
1BD4   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BD5   0000           01760         nop
  00000019            01761         count = count + 1
1BD6   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BD7   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BD8   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BD9   0080           01758         movwf INDF                      ;Save to QUEUE
1BDA   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 197


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1BDB   0000           01760         nop
  0000001A            01761         count = count + 1
1BDC   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BDD   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BDE   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BDF   0080           01758         movwf INDF                      ;Save to QUEUE
1BE0   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BE1   0000           01760         nop
  0000001B            01761         count = count + 1
1BE2   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BE3   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BE4   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BE5   0080           01758         movwf INDF                      ;Save to QUEUE
1BE6   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BE7   0000           01760         nop
  0000001C            01761         count = count + 1
1BE8   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BE9   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BEA   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BEB   0080           01758         movwf INDF                      ;Save to QUEUE
1BEC   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BED   0000           01760         nop
  0000001D            01761         count = count + 1
1BEE   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BEF   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BF0   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BF1   0080           01758         movwf INDF                      ;Save to QUEUE
1BF2   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BF3   0000           01760         nop
  0000001E            01761         count = count + 1
1BF4   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BF5   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BF6   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BF7   0080           01758         movwf INDF                      ;Save to QUEUE
1BF8   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BF9   0000           01760         nop
  0000001F            01761         count = count + 1
1BFA   0808           01755         movf ADC_DATAPORT, W            ;Sample
1BFB   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1BFC   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1BFD   0080           01758         movwf INDF                      ;Save to QUEUE
1BFE   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1BFF   0000           01760         nop
  00000020            01761         count = count + 1
1C00   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C01   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C02   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C03   0080           01758         movwf INDF                      ;Save to QUEUE
1C04   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C05   0000           01760         nop
  00000021            01761         count = count + 1
1C06   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C07   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 198


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1C08   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C09   0080           01758         movwf INDF                      ;Save to QUEUE
1C0A   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C0B   0000           01760         nop
  00000022            01761         count = count + 1
1C0C   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C0D   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C0E   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C0F   0080           01758         movwf INDF                      ;Save to QUEUE
1C10   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C11   0000           01760         nop
  00000023            01761         count = count + 1
1C12   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C13   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C14   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C15   0080           01758         movwf INDF                      ;Save to QUEUE
1C16   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C17   0000           01760         nop
  00000024            01761         count = count + 1
1C18   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C19   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C1A   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C1B   0080           01758         movwf INDF                      ;Save to QUEUE
1C1C   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C1D   0000           01760         nop
  00000025            01761         count = count + 1
1C1E   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C1F   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C20   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C21   0080           01758         movwf INDF                      ;Save to QUEUE
1C22   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C23   0000           01760         nop
  00000026            01761         count = count + 1
1C24   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C25   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C26   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C27   0080           01758         movwf INDF                      ;Save to QUEUE
1C28   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C29   0000           01760         nop
  00000027            01761         count = count + 1
1C2A   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C2B   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C2C   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C2D   0080           01758         movwf INDF                      ;Save to QUEUE
1C2E   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C2F   0000           01760         nop
  00000028            01761         count = count + 1
1C30   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C31   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C32   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C33   0080           01758         movwf INDF                      ;Save to QUEUE
1C34   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C35   0000           01760         nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 199


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000029            01761         count = count + 1
1C36   0808           01755         movf ADC_DATAPORT, W            ;Sample
1C37   1409           01756         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C38   1009           01757         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C39   0080           01758         movwf INDF                      ;Save to QUEUE
1C3A   0384           01759         decf FSR, F                     ;Increment QUEUE pointer
1C3B   0000           01760         nop
  0000002A            01761         count = count + 1
                      01762         endw
1C3C   0808           01763     movf ADC_DATAPORT, W
1C3D   1409           01764     bsf ADC_CONTROLPORT, RDD
1C3E   1009           01765     bcf ADC_CONTROLPORT, RDD
1C3F   0080           01766     movwf INDF
1C40   1783           01767     bsf STATUS, IRP                                             ;goto bank 4
1C41   0000           01768     nop
  00000001            01769     count = 1
                      01770     while count < D'43'
1C42   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C43   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C44   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C45   0080           01774         movwf INDF                      ;Save to QUEUE
1C46   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C47   0000           01776         nop
  00000002            01777         count = count + 1
1C48   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C49   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C4A   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C4B   0080           01774         movwf INDF                      ;Save to QUEUE
1C4C   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C4D   0000           01776         nop
  00000003            01777         count = count + 1
1C4E   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C4F   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C50   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C51   0080           01774         movwf INDF                      ;Save to QUEUE
1C52   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C53   0000           01776         nop
  00000004            01777         count = count + 1
1C54   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C55   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C56   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C57   0080           01774         movwf INDF                      ;Save to QUEUE
1C58   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C59   0000           01776         nop
  00000005            01777         count = count + 1
1C5A   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C5B   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C5C   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C5D   0080           01774         movwf INDF                      ;Save to QUEUE
1C5E   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C5F   0000           01776         nop
  00000006            01777         count = count + 1
1C60   0808           01771         movf ADC_DATAPORT, W            ;Sample
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 200


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1C61   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C62   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C63   0080           01774         movwf INDF                      ;Save to QUEUE
1C64   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C65   0000           01776         nop
  00000007            01777         count = count + 1
1C66   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C67   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C68   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C69   0080           01774         movwf INDF                      ;Save to QUEUE
1C6A   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C6B   0000           01776         nop
  00000008            01777         count = count + 1
1C6C   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C6D   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C6E   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C6F   0080           01774         movwf INDF                      ;Save to QUEUE
1C70   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C71   0000           01776         nop
  00000009            01777         count = count + 1
1C72   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C73   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C74   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C75   0080           01774         movwf INDF                      ;Save to QUEUE
1C76   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C77   0000           01776         nop
  0000000A            01777         count = count + 1
1C78   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C79   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C7A   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C7B   0080           01774         movwf INDF                      ;Save to QUEUE
1C7C   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C7D   0000           01776         nop
  0000000B            01777         count = count + 1
1C7E   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C7F   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C80   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C81   0080           01774         movwf INDF                      ;Save to QUEUE
1C82   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C83   0000           01776         nop
  0000000C            01777         count = count + 1
1C84   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C85   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C86   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C87   0080           01774         movwf INDF                      ;Save to QUEUE
1C88   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C89   0000           01776         nop
  0000000D            01777         count = count + 1
1C8A   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C8B   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C8C   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C8D   0080           01774         movwf INDF                      ;Save to QUEUE
1C8E   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 201


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1C8F   0000           01776         nop
  0000000E            01777         count = count + 1
1C90   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C91   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C92   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C93   0080           01774         movwf INDF                      ;Save to QUEUE
1C94   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C95   0000           01776         nop
  0000000F            01777         count = count + 1
1C96   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C97   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C98   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C99   0080           01774         movwf INDF                      ;Save to QUEUE
1C9A   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1C9B   0000           01776         nop
  00000010            01777         count = count + 1
1C9C   0808           01771         movf ADC_DATAPORT, W            ;Sample
1C9D   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1C9E   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1C9F   0080           01774         movwf INDF                      ;Save to QUEUE
1CA0   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CA1   0000           01776         nop
  00000011            01777         count = count + 1
1CA2   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CA3   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CA4   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CA5   0080           01774         movwf INDF                      ;Save to QUEUE
1CA6   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CA7   0000           01776         nop
  00000012            01777         count = count + 1
1CA8   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CA9   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CAA   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CAB   0080           01774         movwf INDF                      ;Save to QUEUE
1CAC   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CAD   0000           01776         nop
  00000013            01777         count = count + 1
1CAE   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CAF   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CB0   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CB1   0080           01774         movwf INDF                      ;Save to QUEUE
1CB2   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CB3   0000           01776         nop
  00000014            01777         count = count + 1
1CB4   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CB5   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CB6   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CB7   0080           01774         movwf INDF                      ;Save to QUEUE
1CB8   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CB9   0000           01776         nop
  00000015            01777         count = count + 1
1CBA   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CBB   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 202


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1CBC   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CBD   0080           01774         movwf INDF                      ;Save to QUEUE
1CBE   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CBF   0000           01776         nop
  00000016            01777         count = count + 1
1CC0   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CC1   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CC2   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CC3   0080           01774         movwf INDF                      ;Save to QUEUE
1CC4   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CC5   0000           01776         nop
  00000017            01777         count = count + 1
1CC6   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CC7   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CC8   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CC9   0080           01774         movwf INDF                      ;Save to QUEUE
1CCA   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CCB   0000           01776         nop
  00000018            01777         count = count + 1
1CCC   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CCD   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CCE   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CCF   0080           01774         movwf INDF                      ;Save to QUEUE
1CD0   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CD1   0000           01776         nop
  00000019            01777         count = count + 1
1CD2   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CD3   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CD4   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CD5   0080           01774         movwf INDF                      ;Save to QUEUE
1CD6   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CD7   0000           01776         nop
  0000001A            01777         count = count + 1
1CD8   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CD9   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CDA   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CDB   0080           01774         movwf INDF                      ;Save to QUEUE
1CDC   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CDD   0000           01776         nop
  0000001B            01777         count = count + 1
1CDE   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CDF   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CE0   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CE1   0080           01774         movwf INDF                      ;Save to QUEUE
1CE2   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CE3   0000           01776         nop
  0000001C            01777         count = count + 1
1CE4   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CE5   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CE6   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CE7   0080           01774         movwf INDF                      ;Save to QUEUE
1CE8   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CE9   0000           01776         nop
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 203


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000001D            01777         count = count + 1
1CEA   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CEB   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CEC   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CED   0080           01774         movwf INDF                      ;Save to QUEUE
1CEE   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CEF   0000           01776         nop
  0000001E            01777         count = count + 1
1CF0   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CF1   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CF2   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CF3   0080           01774         movwf INDF                      ;Save to QUEUE
1CF4   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CF5   0000           01776         nop
  0000001F            01777         count = count + 1
1CF6   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CF7   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CF8   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CF9   0080           01774         movwf INDF                      ;Save to QUEUE
1CFA   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1CFB   0000           01776         nop
  00000020            01777         count = count + 1
1CFC   0808           01771         movf ADC_DATAPORT, W            ;Sample
1CFD   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1CFE   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1CFF   0080           01774         movwf INDF                      ;Save to QUEUE
1D00   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D01   0000           01776         nop
  00000021            01777         count = count + 1
1D02   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D03   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D04   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D05   0080           01774         movwf INDF                      ;Save to QUEUE
1D06   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D07   0000           01776         nop
  00000022            01777         count = count + 1
1D08   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D09   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D0A   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D0B   0080           01774         movwf INDF                      ;Save to QUEUE
1D0C   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D0D   0000           01776         nop
  00000023            01777         count = count + 1
1D0E   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D0F   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D10   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D11   0080           01774         movwf INDF                      ;Save to QUEUE
1D12   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D13   0000           01776         nop
  00000024            01777         count = count + 1
1D14   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D15   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D16   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 204


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

1D17   0080           01774         movwf INDF                      ;Save to QUEUE
1D18   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D19   0000           01776         nop
  00000025            01777         count = count + 1
1D1A   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D1B   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D1C   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D1D   0080           01774         movwf INDF                      ;Save to QUEUE
1D1E   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D1F   0000           01776         nop
  00000026            01777         count = count + 1
1D20   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D21   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D22   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D23   0080           01774         movwf INDF                      ;Save to QUEUE
1D24   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D25   0000           01776         nop
  00000027            01777         count = count + 1
1D26   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D27   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D28   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D29   0080           01774         movwf INDF                      ;Save to QUEUE
1D2A   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D2B   0000           01776         nop
  00000028            01777         count = count + 1
1D2C   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D2D   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D2E   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D2F   0080           01774         movwf INDF                      ;Save to QUEUE
1D30   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D31   0000           01776         nop
  00000029            01777         count = count + 1
1D32   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D33   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D34   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D35   0080           01774         movwf INDF                      ;Save to QUEUE
1D36   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D37   0000           01776         nop
  0000002A            01777         count = count + 1
1D38   0808           01771         movf ADC_DATAPORT, W            ;Sample
1D39   1409           01772         bsf ADC_CONTROLPORT, RDD        ;Stop conversion
1D3A   1009           01773         bcf ADC_CONTROLPORT, RDD        ;Begin next conversion
1D3B   0080           01774         movwf INDF                      ;Save to QUEUE
1D3C   0A84           01775         incf FSR, F                     ;Increment QUEUE pointer
1D3D   0000           01776         nop
  0000002B            01777         count = count + 1
                      01778         endw
1D3E   0808           01779     movf ADC_DATAPORT, W            ;Sample
1D3F   1409           01780     bsf ADC_CONTROLPORT, RDD
                      01781         MGOTO SampleRep5MEndA
                          M         if (SampleRep5MEndA & (0x1000))
1D40   160A               M                 bsf PCLATH, 4
                          M         else
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 205


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                          M                 bcf PCLATH, 4
                          M         endif
                          M         if (SampleRep5MEndA & (0x800))
                          M                 bsf PCLATH, 3
                          M         else
1D41   118A               M                 bcf PCLATH, 3
                          M         endif
Message[306]: Crossing page boundary -- ensure page bits are set.
1D42   2E13               M         goto SampleRep5MEndA
                      01782 
1D43                  01783 SampleRep2MStep3
1D43   2D44           01784     goto $ + 1                                                  ;Delay 4
                      01785         if (Sample833kEnd & (0x1000))
1D44   160A           01786                 bsf PCLATH, 4
                      01787         else
                      01788                 bcf PCLATH, 4
                      01789         endif
                      01790         if (Sample833kEnd & (0x800))
                      01791                 bsf PCLATH, 3
                      01792         else
1D45   118A           01793                 bcf PCLATH, 3
                      01794         endif
1D46   1009           01795     bcf ADC_CONTROLPORT, RDD            ;Begin Conversion
1D47   0000           01796     nop
Message[306]: Crossing page boundary -- ensure page bits are set.
1D48   2AFE           01797         goto Sample833kEnd
                      01798         
                      01799 ;=============================================================================
                      01800 end     ;end of program
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 206


SYMBOL TABLE
  LABEL                             VALUE 

ABDEN                             00000000
ABDOVF                            00000007
ACDCMODE                          00000000
ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADCShutdown                       00000170
ADC_CONTROLPORT                   00000009
ADC_DATAPORT                      00000008
ADC_PORT                          00000006
ADDEN                             00000003
ADDFF                             
ADDFF_TW                          
ADDLF                             
ADDLF_TW                          
ADDR0                             00000001
ADDR1                             00000002
ADDR2                             00000003
ADDWPC                            
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
ANALOG_ACDC                       00000007
ANALOG_GAIN                       00000005
ANALOG_SEL                        00000007
ANDFF                             
ANDFF_TW                          
ANDLF                             
ANDLF_TW                          
ANS0                              00000000
ANS1                              00000001
ANS10                             00000002
ANS11                             00000003
ANS12                             00000004
ANS13                             00000005
ANS2                              00000002
ANS3                              00000003
ANS4                              00000004
ANS5                              00000005
ANS6                              00000006
ANS7                              00000007
ANS8                              00000000
ANS9                              00000001
ANSEL                             00000188
ANSELH                            00000189
BAUDCTL                           00000187
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 207


SYMBOL TABLE
  LABEL                             VALUE 

BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BNKSEL                            
BRG0                              00000000
BRG1                              00000001
BRG10                             00000002
BRG11                             00000003
BRG12                             00000004
BRG13                             00000005
BRG14                             00000006
BRG15                             00000007
BRG16                             00000003
BRG2                              00000002
BRG3                              00000003
BRG4                              00000004
BRG5                              00000005
BRG6                              00000006
BRG7                              00000007
BRG8                              00000000
BRG9                              00000001
BRGH                              00000002
BUFFERMAX                         0000005F
BUFFERMIN                         00000020
BUFFERSIZE                        00000040
C                                 00000000
C1CH0                             00000000
C1CH1                             00000001
C1IE                              00000005
C1IF                              00000005
C1OE                              00000005
C1ON                              00000007
C1OUT                             00000006
C1POL                             00000004
C1R                               00000002
C1RSEL                            00000005
C1SEN                             00000005
C2CH0                             00000000
C2CH1                             00000001
C2IE                              00000006
C2IF                              00000006
C2OE                              00000005
C2ON                              00000007
C2OUT                             00000006
C2POL                             00000004
C2R                               00000002
C2REN                             00000004
C2RSEL                            00000004
C2SYNC                            00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 208


SYMBOL TABLE
  LABEL                             VALUE 

CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CH1SEL                            00000001
CH1SELG                           00000004
CH2SEL                            00000002
CH2SELG                           00000005
CHANNELBIT                        00000004
CHANNELCONFSEND                   
CHANNELCONFSTORE                  
CHS0                              00000002
CHS1                              00000003
CHS2                              00000004
CHS3                              00000005
CKE                               00000006
CKP                               00000004
CLK                               00000005
CLOCKFREQBIT                      00000005
CM1CON0                           00000107
CM2CON0                           00000108
CM2CON1                           00000109
CONFRECIEVE                       
CONFSEND                          
CREN                              00000004
CS                                00000001
CSRC                              00000007
CURRENTBANK                       00000000
D                                 00000005
DATA_ADDRESS                      00000005
DC                                00000001
DC1B0                             00000004
DC1B1                             00000005
DC2B0                             00000004
DC2B1                             00000005
D_A                               00000005
Delay                             00000165
DelayFive                         0000035B
DelayFour                         0000035C
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 209


SYMBOL TABLE
  LABEL                             VALUE 

DelayLoop                         00000166
DelaySeven                        00000359
DelaySix                          0000035A
DelayTwo                          0000035D
ECCPAS                            0000009C
ECCPAS0                           00000004
ECCPAS1                           00000005
ECCPAS2                           00000006
ECCPASE                           00000007
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDAT                             0000010C
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FREQMODEBIT0                      00000000
FREQMODEBIT1                      00000001
FREQMODEBIT2                      00000002
FREQMODEBIT3                      00000003
FREQSAMPLE1M                      00000000
FREQSAMPLE250K                    00000004
FREQSAMPLE417K                    00000003
FREQSAMPLE625K                    00000002
FREQSAMPLE833K                    00000001
FREQSAMPLEDELAYED                 00000005
FREQSAMPLEREP2M                   00000007
FREQSAMPLEREP5M                   00000006
FREQSAMPLEXY192K                  0000000A
FREQSAMPLEXY250K                  00000009
FREQSAMPLEXY417K                  00000008
FREQSAMPLEXYDELAYED               0000000B
FSR                               00000004
FVREN                             00000000
GAIN1                             00000000
GAIN5                             00000001
GCEN                              00000007
GIE                               00000007
GO                                00000001
GO_DONE                           00000001
GetByte                           00000155
GetByteSerial                     00000157
GetByteSerialB                    00000159
GetByteSerialC                    0000015D
HARDWARE                          00000012
HTS                               00000002
I2CPORT                           00000006
I2CSGetAck                        00000081
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 210


SYMBOL TABLE
  LABEL                             VALUE 

I2CSGetAckL1                      00000086
I2CSGetByte                       00000053
I2CSGetByteL1                     00000056
I2CSGetByteL2                     0000005C
I2CSGetStop                       00000031
I2CSGetStopL1                     00000035
I2CSGetStopL2                     0000003C
I2CSGetStopL3                     00000043
I2CSPutAck                        00000060
I2CSPutAckL1                      00000064
I2CSPutAckL2                      00000066
I2CSPutByte                       0000006C
I2CSPutByteL1                     00000070
I2CSPutByteL1S                    00000072
I2CSPutByteL2                     00000077
I2CSPutByteL3                     0000007C
I2CSWaitStart                     00000046
I2CSWaitStartL1                   00000051
I2CSWaitStartL2                   0000004D
I2CSWaitStartL3                   00000049
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IOCB                              00000096
IOCB0                             00000000
IOCB1                             00000001
IOCB2                             00000002
IOCB3                             00000003
IOCB4                             00000004
IOCB5                             00000005
IOCB6                             00000006
IOCB7                             00000007
IORFF                             
IORFF_TW                          
IORLF                             
IORLF_TW                          
IRCF0                             00000004
IRCF1                             00000005
IRCF2                             00000006
IRP                               00000007
Initial                           00000089
IntHandler                        00000004
LTS                               00000001
MC1OUT                            00000007
MC2OUT                            00000006
MGOTO                             
MOVFF                             
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 211


SYMBOL TABLE
  LABEL                             VALUE 

MOVFF_TW                          
MOVLF                             
MOVLF_TW                          
MSK                               00000093
Main                              000000A6
MainB                             000000A8
MainSelect                        0000000C
MainWTrigB                        000000C5
MainWaitTrig                      000000B5
NEGATEF                           
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000001
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OERR                              00000001
OPTION_REG                        00000081
OSCCON                            0000008F
OSCTUNE                           00000090
OSFIE                             00000007
OSFIF                             00000007
OSTS                              00000003
P                                 00000004
P1M0                              00000006
P1M1                              00000007
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PDC0                              00000000
PDC1                              00000001
PDC2                              00000002
PDC3                              00000003
PDC4                              00000004
PDC5                              00000005
PDC6                              00000006
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 212


SYMBOL TABLE
  LABEL                             VALUE 

PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRSEN                             00000007
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSSAC0                            00000002
PSSAC1                            00000003
PSSBD0                            00000000
PSSBD1                            00000001
PSTRCON                           0000009D
PULSR                             00000002
PULSS                             00000003
PWM1CON                           0000009B
PutByte                           0000015E
PutByteSerial                     00000160
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIDL                             00000006
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
RDD                               00000000
READ_WRITE                        00000002
ROTL                              
ROTR                              
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX                                00000007
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SBOREN                            00000004
SCKP                              00000004
SCS                               00000000
SDA                               00000004
SEN                               00000000
SENDB                             00000003
SERIALPORT                        00000007
SHIFTL                            
SHIFTR                            
SMP                               00000007
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 213


SYMBOL TABLE
  LABEL                             VALUE 

SP                                00000002
SPBRG                             00000099
SPBRGH                            0000009A
SPEN                              00000007
SPPORT                            00000005
SR0                               00000006
SR1                               00000007
SRCON                             00000185
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPMSK                            00000093
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
STRA                              00000000
STRB                              00000001
STRC                              00000002
STRD                              00000003
STRSYNC                           00000004
SUBFF                             
SUBFF_TW                          
SUBLF                             
SUBLF_TW                          
SWAPFF                            
SWAPFF_TW                         
SWAPWF                            
SWDTEN                            00000000
SYNC                              00000004
Sample1M                          000003F1
Sample1MhzEnd                     000007F6
Sample250kA                       0000030A
Sample250kB                       00000321
Sample250kC                       00000338
Sample250kD                       0000034F
Sample417k250k                    000002FA
Sample417kA                       0000030B
Sample417kB                       00000322
Sample417kC                       00000339
Sample417kD                       00000350
Sample417kLoopA                   00000303
Sample417kLoopB                   0000031A
Sample417kLoopC                   00000331
Sample417kLoopD                   00000348
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 214


SYMBOL TABLE
  LABEL                             VALUE 

Sample625k                        000002B7
Sample625kLoopA                   000002BD
Sample625kLoopB                   000002CD
Sample625kLoopC                   000002DD
Sample625kLoopD                   000002ED
Sample833k                        00000EF8
Sample833kEnd                     000012FE
SampleDelayed                     000001A9
SampleDelayedLoopA                000001B4
SampleDelayedLoopB                000001CE
SampleDelayedLoopC                000001E8
SampleDelayedLoopD                00000202
SampleRep2M                       0000192E
SampleRep2MPickEn                 0000193B
SampleRep2MPickSt                 00001932
SampleRep2MStep1                  0000193B
SampleRep2MStep2                  00001B42
SampleRep2MStep3                  00001D43
SampleRep5M                       000014FB
SampleRep5MEndA                   00001613
SampleRep5MEndB                   00001618
SampleRep5MEndC                   00001616
SampleRep5MPickEn                 0000150E
SampleRep5MPickSt                 000014FF
SampleRep5MStep1                  0000150E
SampleRep5MStep2                  0000161E
SampleRep5MStep3                  00001721
SampleRep5MStep4                  00001824
SampleRep5MStep5                  00001928
SampleXY250k192k                  0000035E
SampleXY250kLA                    0000036D
SampleXY250kLB                    00000391
SampleXY250kLC                    000003B5
SampleXY250kLD                    000003D9
SampleXY417k                      000008F5
SampleXYDelayed                   00000214
SampleXYDelayedLA                 00000226
SampleXYDelayedLB                 0000024E
SampleXYDelayedLC                 00000276
SampleXYDelayedLD                 0000029E
StSample417kLoopB                 0000031F
StSample417kLoopC                 00000336
StSample417kLoopD                 0000034D
StSampleDelayedLoopA              000001B9
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1GIV                             00000007
T1GSS                             00000001
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 215


SYMBOL TABLE
  LABEL                             VALUE 

T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR0IE                            00000005
TMR0IF                            00000002
TMR1CS                            00000001
TMR1GE                            00000006
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOTALBUFFERSIZE                   00000100
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRIGGER                           00000000
TRIGGERENBIT                      00000006
TRIGGERPORT                       00000006
TRIGGERPOSBIT                     00000007
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRMT                              00000001
TUN0                              00000000
TUN1                              00000001
TUN2                              00000002
TUN3                              00000003
TUN4                              00000004
TX                                00000006
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
ULPWUE                            00000005
ULPWUIE                           00000002
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 216


SYMBOL TABLE
  LABEL                             VALUE 

ULPWUIF                           00000002
VCFG0                             00000004
VCFG1                             00000005
VR0                               00000000
VR1                               00000001
VR2                               00000002
VR3                               00000003
VRCON                             00000097
VREN                              00000007
VROE                              00000006
VROTL                             
VROTR                             
VRR                               00000005
VRSS                              00000004
VSHIFTL                           
VSHIFTR                           
W                                 00000000
WCOL                              00000007
WDTCON                            00000105
WDTPS0                            00000001
WDTPS1                            00000002
WDTPS2                            00000003
WDTPS3                            00000004
WPUB                              00000095
WPUB0                             00000000
WPUB1                             00000001
WPUB2                             00000002
WPUB3                             00000003
WPUB4                             00000004
WPUB5                             00000005
WPUB6                             00000006
WPUB7                             00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
WUE                               00000001
WaitByte                          00000152
WaitComm                          000000CE
WaitComm_Conf                     00000116
WaitComm_Data                     000000D3
WaitComm_Rec                      00000136
WaitComm_SendDataA                000000DA
WaitComm_SendDataB                000000E7
WaitComm_SendDataC                000000F4
WaitComm_SendDataD                00000101
WaitComm_SendDataExit             0000010A
WaitComm_Test                     000000CF
XORFF                             
XORFF_TW                          
XORLF                             
XORLF_TW                          
Z                                 00000002
_BOR21V                           00003EFF
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 217


SYMBOL TABLE
  LABEL                             VALUE 

_BOR40V                           00003FFF
_BOR_NSLEEP                       00003EFF
_BOR_OFF                          00003CFF
_BOR_ON                           00003FFF
_BOR_SBODEN                       00003DFF
_CONFIG1                          00002007
_CONFIG2                          00002008
_CPD_OFF                          00003FFF
_CPD_ON                           00003F7F
_CP_OFF                           00003FFF
_CP_ON                            00003FBF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         00001FFF
_EC_OSC                           00003FFB
_EXTRC                            00003FFF
_EXTRCIO                          00003FFE
_EXTRC_OSC_CLKOUT                 00003FFF
_EXTRC_OSC_NOCLKOUT               00003FFE
_FCMEN_OFF                        000037FF
_FCMEN_ON                         00003FFF
_HS_OSC                           00003FFA
_IESO_OFF                         00003BFF
_IESO_ON                          00003FFF
_INTOSC                           00003FFD
_INTOSCIO                         00003FFC
_INTRC_OSC_CLKOUT                 00003FFD
_INTRC_OSC_NOCLKOUT               00003FFC
_LP_OSC                           00003FF8
_LVP_OFF                          00002FFF
_LVP_ON                           00003FFF
_MCLRE_OFF                        00003FDF
_MCLRE_ON                         00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FEF
_WDT_OFF                          00003FF7
_WDT_ON                           00003FFF
_WRT_1FOURTH                      00003BFF
_WRT_256                          00003DFF
_WRT_HALF                         000039FF
_WRT_OFF                          00003FFF
_XT_OSC                           00003FF9
__16F887                          00000001
__DEBUG                           1
clockFreq                         00000020
cntr                              0000007B
cntra                             00000076
cntrb                             00000077
cntrc                             00000078
configLoc1                        00000070
dataConfig                        0000007D
f                                 00000001
i2csdata                          0000007C
modetemp                          00000079
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 218


SYMBOL TABLE
  LABEL                             VALUE 

modetempb                         0000007A
sampleRate1                       00000074
sampleRate2                       00000075
skipEqFF                          
skipEqLF                          
skipGrEqFF                        
skipGrEqFL                        
skipGrEqLF                        
skipGrFF                          
skipGrFL                          
skipGrLF                          
skipLessEqZero                    
skipLessZero                      
skipMoreEqZero                    
skipMoreZero                      
skipNotZero                       
skipZero                          
triggerDelay1                     00000071
triggerDelay2                     00000072
triggerDelay3                     00000073
triggerLevel                      0000007E
w                                 00000000


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 219


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
09C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0C80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0CC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0D80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0DC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0E80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0EC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0F80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0FC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 220


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


1080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
10C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
11C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
12C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
13C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
14C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
15C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
16C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
17C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
18C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1940 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1980 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
19C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1A80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1AC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1B80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1BC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.31                   DSOSCOPEA01.ASM   4-24-2012  14:24:31         PAGE 221


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


1C00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C40 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1C80 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1CC0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D00 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
1D40 : XXXXXXXXX------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:  7497
Program Memory Words Free:   695


Errors   :     0
Warnings :     0 reported,  1129 suppressed
Messages :    16 reported,    21 suppressed

